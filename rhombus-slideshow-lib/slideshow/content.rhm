#lang rhombus/static/and_meta

import:
  pict:
    expose Pict
  pict/text

export:
  SlideContent
  slide_content_pict
  nonarchival

  // these are re-exported by `slideshow` in a `slide` namespace:
  next
  sync
  gap
  alts
  align
  right
  center
  left
  horiz

module private:
  export:
    flatten_slide_content

fun
| nonarchival(p :: Pict) :~ Pict:
    for values(p = p) (i in 0..p.duration):
      nonarchival(p, i)
| nonarchival(p :: Pict, epoch :: Int) :~ Pict:
    p.epoch_set_metadata(epoch, p.epoch_metadata(epoch) ++ { #'nonarchival: #true })

class Next():
  implements Printable
  override describe(mode, recur):
    "slide.next"
def next = Next()

class Barrier():
  implements Printable
  override describe(mode, recur):
    "slide.barrier"
def sync = Barrier()

class Alts(alts :~ List.of(List)):
  implements Printable
  override describe(mode, recur):
    PrintDesc.list("slide.alts(", alts.map(recur), ")")

fun alts(contents, ...):
  Alts([flatten_slide_content(#'alts, contents),
        ...])

class Align(sep, horiz, cs :: List, width)
class Horiz(sep, horiz, cs :: List)

annot.macro 'SlideContent': 'satisfying(is_slide_content)'

fun horiz(~sep: sep :: Real || matching(#'inherit) = #'inherit,
          ~horiz: horiz :: pict.HorizAlignment = #'left,
          content :: SlideContent, ...):
  Horiz(sep, horiz, flatten_slide_content(#'horiz, [content, ...]))

fun left(~sep: sep :: Real || matching(#'inherit) = #'inherit,
         content :: SlideContent, ...):
  Horiz(sep, #'left, flatten_slide_content(#'left, [content, ...]))

fun center(~sep: sep :: Real || matching(#'inherit) = #'inherit,
           content :: SlideContent, ...):
  Horiz(sep, #'center, flatten_slide_content(#'center, [content, ...]))

fun right(~sep: sep :: Real || matching(#'inherit) = #'inherit,
          content :: SlideContent, ...):
  Horiz(sep, #'right, flatten_slide_content(#'right, [content, ...]))

def gap = 24

fun align(~sep: sep :: Real || matching(#'inherit) = #'inherit,
          ~horiz: horiz :: pict.HorizAlignment = #'left,
          content :: SlideContent, ...):
  Align(sep, horiz, flatten_slide_content(#'right, [content, ...]), #false)

fun is_slide_content(c):
  match c
  | [c, ...]: for all (c in [c, ...]): is_slide_content(c)
  | p :: Pict: #true
  | p :: Next: #true
  | p :: Barrier: #true
  | p :: Alts: #true
  | p :: Horiz: #true
  | p :: Align: #true
  | ~else: #false

fun flatten_slide_content(who, c) :~ List:
  match c
  | [c, ...]: List.append(flatten_slide_content(who, c), ...)
  | p :: pict.NothingPict: []
  | p :: Pict: [p]
  | p :: Next: [p]
  | p :: Barrier: [p]
  | Alts([]): []
  | Alts([alt]): alt
  | p :: Alts: [p]
  | p :: Horiz: [p]
  | p :: Align: [p]
  | ~else:
      error(~who: who,
            ~exn: Exn.Fail.Annot,
            "bad slide content",
            error.val(c))

// generated in `align_content` for consumption by `next_to_anim`:
class SetSep(pre_sep, post_sep)

fun next_to_anim(sep, contents) :~ Pict:
  recur loop (sep = sep, contents = contents, accum :~ List = []) :~ Pict:
    match contents
    | []:
        pict.stack(~sep: sep, & accum)
    | [p :: Next, & contents]:
        let pre = pict.stack(~sep: sep, & accum)
        let pre = nonarchival(pre, pre.duration-1)
        let post = loop(sep, contents, [])
        pict.stack(~sep: sep,
                   pre.sustain(post.duration),
                   post.time_pad(~before: pre.duration))
    | [p :: Barrier, & contents]:
        let pre = pict.stack(~sep: sep, & accum)
        let pre = nonarchival(pre, pre.duration-1)
        let post = loop(sep, contents, [])
        pict.stack(~sep: sep,
                   pre.sustain(post.duration-1),
                   if pre.duration > 1
                   | pict.switch(post.snapshot().sustain(pre.duration-2),
                                 post)
                   | post)
    | [Alts([alt, ...]), & contents]:
        let none = []
        let alts = [loop(sep, alt, none), ...]
        let p = pict.overlay(~vert: #'top,
                             ~duration: #'pad,
                             & pict.sequential(& alts))
        let pre = pict.stack(~sep: sep, & accum)
        loop(sep, contents, [pre, p])
    | [SetSep(pre_sep, post_sep), & contents]:
        pict.stack(~sep: pre_sep,
                   pict.stack(~sep: sep, & accum),
                   loop(post_sep, contents, []))
    | [c, & contents]:
        loop(sep, contents, accum.add(c))

fun slide_content_pict(~sep: sep :: Real = gap,
                       ~horiz: horiz :: pict.HorizAlignment = #'center,
                       content, ...) :~ Pict:
  next_to_anim(sep, align_content(sep, horiz, flatten_slide_content(#'slide_content_pict, [content, ...])))

// ----------------------------------------

fun align_content(sep, horiz, contents):
  let [width, recorded :~ List]:
    recur gather_widths (cs :: List = contents):
      let (max_w, accum):
        for values(max_w = 0, accum :~ List = []) (c in cs):
          match c
          | p :: Pict: values(math.max(max_w, p.width),
                              accum.add(p))
          | next :: Next: values(max_w, accum.add(next))
          | next :: Barrier: values(max_w, accum.add(next))
          | Alts([alt, ...]):
              let [[w, alt], ...]:
                [gather_widths(alt), ...]
              values(math.max(max_w, w, ...),
                     accum.add(Alts([alt, ...])))
          | Horiz(sep, horiz, cs):
              let [w, recorded] = gather_widths(cs)
              values(math.max(max_w, w),
                     accum.add(Horiz(sep, horiz, recorded)))
          | Align(sep, horiz, cs, _):
              let [w, recorded] = gather_widths(cs)
              values(math.max(max_w, w),
                     accum.add(Align(sep, horiz, recorded, w)))
      [max_w, accum]
  fun make_widener(width, horiz, prev):
    fun (p :~ Pict):
      prev(match horiz
           | #'left: p.pad(~right: width - p.width)
           | #'center: p.pad(~horiz: (width - p.width) / 2)
           | #'right: p.pad(~left: width - p.width))
  recur widen (w = width, sep = sep, cs :: List = recorded,
               widener = make_widener(width, horiz, values)):
    List.append(
      & for List (c in cs):
        match c
        | p :: Pict:
            [widener(p)]
        | next :: Next: [next]
        | next :: Barrier: [next]
        | Alts([alt, ...]):
            [Alts([widen(w, sep, alt, widener), ...])]
        | Horiz(h_sep, horiz, cs):
            let mid = widen(w, if h_sep == #'inherit | sep | h_sep, cs,
                            make_widener(w, horiz, widener))
            if h_sep == #'inherit
            | mid
            | [SetSep(sep, h_sep)] ++ mid ++ [SetSep(sep, sep)]
        | Align(align_sep, horiz, cs, w):
            let mid = widen(w, if align_sep == #'inherit | sep | align_sep, cs,
                            make_widener(w, horiz, widener))
            if align_sep == #'inherit
            | mid
            | [SetSep(sep, align_sep)] ++ mid ++ [SetSep(sep, sep)]
    )
