#lang rhombus/static/and_meta

import:
  draw
  pict open:
    except:
      circle
  lib("pict/main.rkt") as rkt

export:
  BoundingBoxMode
  Radial:
    only_space namespace annot

  radial_pict radial

  radials_pict

  // Equivalent to `radial_pict` and `radial`,
  // but with default arguments that match the named shape:
  flower flower_radial
  cloud cloud_radial
  flash flash_radial
  star star_radial
  sun sun_radial
  gear gear_radial
  regular_polygon regular_polygon_radial
  circle_radial

  evenly_spaced
  jitter_spaced

  ArrowBoundingBoxMode
  arrow arrow_path

annot.macro 'BoundingBoxMode': 'Any.of(#'unit, #'shrink, #'stretch)'

class Radial(~points,
             ~width,
             ~height,
             ~angle_at,
             ~inner_radius,
             ~outer_radius,
             ~inner_pause,
             ~outer_pause,
             ~flat_inner_edge,
             ~flat_outer_edge,
             ~inner_pull,
             ~outer_pull,
             ~rotate):
  method path() :~ draw.Path:
    radial_path(this)
  method pict(~fill: fill :: maybe(ColorMode) = #false,
              ~line: line :: maybe(ColorMode) = !fill && #'inherit,
              ~line_width: line_width :: LineWidth = #'inherit,
              ~bound: bound :: BoundingBoxMode = #'unit) :~ Pict:
    radials_pict([this],
                 ~line: line,
                 ~line_width: line_width,
                 ~fill: fill,
                 ~bound: bound)

fun radial_path(Radial(~points: n,
                       ~width: width,
                       ~height: height,
                       ~angle_at: point_angle,
                       ~inner_radius: inner_radius,
                       ~outer_radius: outer_radius,
                       ~inner_pause: inner_pause,
                       ~outer_pause: outer_pause,
                       ~flat_inner_edge: flat_inner_edge,
                       ~flat_outer_edge: flat_outer_edge,
                       ~outer_pull: outer_pull,
                       ~inner_pull: inner_pull,
                       ~rotate: spin)) :~ draw.Path:
  let p = draw.Path()
  let pi = math.pi

  // gets the point at mag@s in polar form, but then moves it orthogonal
  // to that vector by a `pinwheel` fraction
  fun arm(s, mag, pinwheel):
    cond
    | pinwheel .= 0:
        [mag * math.cos(s), mag * math.sin(s)]
    | pinwheel > 0:
        [mag * math.cos(s) + pinwheel * mag * math.cos(s+pi/2), mag * math.sin(s) + pinwheel * mag * math.sin(s+pi/2)]
    | pinwheel < 0:
        [mag * math.cos(s) - pinwheel * mag * math.cos(s-pi/2), mag * math.sin(s) - pinwheel * mag * math.sin(s-pi/2)]
  let xd = inner_radius * (1 + inner_pull)
  if flat_outer_edge
  | let step = 2 * math.pi / n
    p.move_to(arm(point_angle(0, n), outer_radius * 100 * math.cos(step/4), 0))
  | p.move_to(arm(point_angle(0, n), outer_radius * 100, 0))
  for (i in 0..n):
    let s0 = point_angle(i, n)
    let e0 = point_angle(i + 1, n)
    let s = s0 + (e0 - s0) * outer_pause/2
    let e = e0 - (e0 - s0) * outer_pause/2
    let m1 = s + (1-inner_pause) * (e - s) / 2
    let m2 = e - (1-inner_pause) * (e - s) / 2
    fun arc(frac, m1, m2, flat):
      unless m1 .= m2
      | unless flat
        | p.arc([frac*(-100), frac*(-100), frac*200, frac*200], -m1, -m2, ~clockwise: #true)
    if flat_outer_edge
    | p.line_to(arm(s, outer_radius * 100, 0))
    | arc(1, s0, s, flat_outer_edge)
    if outer_pull .= 0 && inner_pull .= 0
    | p.line_to(arm(m1, inner_radius * 100, 0))
      arc(inner_radius, m1, m2, flat_inner_edge)
      p.line_to(arm(e, outer_radius * 100, 0))
    | p.curve_to(arm(s, outer_radius * 100, outer_pull),
                 arm(m1, xd * 100, -0),
                 arm(m1, inner_radius * 100, 0))
      arc(inner_radius, m1, m2, flat_inner_edge)
      p.curve_to(arm(m2, xd * 100, 0),
                 arm(e, outer_radius * 100, -outer_pull),
                 arm(e, outer_radius * 100, 0))
    arc(outer_radius, e, e0, flat_outer_edge)
  p.rotate(2 * pi * .25 + spin)
  p.close()
  p.scale(width / 200, height / 200)
  p

fun radials_pict([r :: Radial, ...],
                 ~fill: fill :: maybe(ColorMode) = #false,
                 ~line: line :: maybe(ColorMode) = !fill && #'inherit,
                 ~line_width: line_width :: LineWidth = #'inherit,
                 ~bound: bound :: BoundingBoxMode = #'unit) :~ Pict:
  if [r, ...].length() == 0
  | nothing
  | let width = math.max(r.width, ...)
    let height = math.max(r.height, ...)
    fun scale(pa :~ draw.Path, xs, ys): pa.scale(xs, ys); pa
    let [pa, ...] = [scale(radial_path(r), r.width/width, r.height/height), ...]
    let all_pa :: draw.Path = [pa, ...][0]
    for (pa in [pa, ...].rest):
      all_pa.append(pa)
    let p:
      dc(fun (dc :: draw.DC, x, y):
           dc.path(all_pa, ~dx: x + width/2, ~dy: y + height/2),
         ~width: width,
         ~height: height,
         ~line: line,
         ~line_width: line_width,
         ~fill: fill)
    let p :~ Pict:
      if bound == #'unit
      | p
      | let r = all_pa.bounding_box()
        let p:
          p.pad(~left: -width/2 - r.x,
                ~top: -height/2 - r.y,
                ~right: r.x + r.width - width/2,
                ~bottom: r.y + r.height - height/2)
        if bound == #'stretch
        | p.scale(width / p.width, height / p.height)
        | p
    p

defn.macro 'def_radial:
              $radial($pt_kw: $pt_name $pt_rhs ...,
                      $kw: $name $rhs ...,
                      ...)
              $pict($make, $r, $extra_arg, ...):
                $body
            ':
  '
    fun $radial($pt_kw: $pt_name $pt_rhs ...,
                $kw: $name $rhs ...,
                ...) :~ Radial:
      Radial(~points: $pt_name,
             $kw: $name,
             ...)
    fun $pict($pt_kw: $pt_name $pt_rhs ...,
              $kw: $name $rhs ...,
              ...,
              ~fill: fill :: maybe(ColorMode) = #false,
              ~line: line :: maybe(ColorMode) = !fill && #'inherit,
              ~line_width: line_width :: LineWidth = #'inherit,
              ~bound: bound :: BoundingBoxMode = #'unit,
              $extra_arg,
              ...) :~ Pict:
      let $r: Radial(~points: $pt_name,
                     $kw: $name,
                     ...)
      fun $make(rs) :~ Pict:
        radials_pict(rs,
                     ~line: line,
                     ~fill: fill,
                     ~line_width: line_width,
                     ~bound: bound)
      $body
  '

fun evenly_spaced(i :: Int, n :: PosInt):
  2 * math.pi * i / n

fun jitter_spaced(jitter):
  fun (i :: Int, n :: PosInt):
    let a = evenly_spaced(i, n)
    let delta = 2 * math.pi / n
    a + 0.25 * math.sin(jitter * (if i == n | 0 | a)) * delta

def_radial:
  radial(~points: n :: PosInt = 6,
         ~width: width :: Real = 64,
         ~height: height :: Real = width,
         ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
         ~inner_radius: d :: Real = 0.5,
         ~outer_radius: od :: Real = 1,
         ~inner_pause: inner_pause :: Real = 0,
         ~outer_pause: outer_pause :: Real = 0,
         ~flat_inner_edge: flat_inner_edge = #false,
         ~flat_outer_edge: flat_outer_edge = #false,
         ~outer_pull: outer_pull :: Real = 0,
         ~inner_pull: inner_pull :: Real = 0,
         ~rotate: spin :: Real = 0)
  radial_pict(make, r): make([r])

def_radial:
  flower_radial(~petals: n :: PosInt = 6,
                ~width: width :: Real = 64,
                ~height: height :: Real = width,
                ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
                ~inner_radius: d :: Real = 0.5,
                ~outer_radius: od :: Real = 1,
                ~inner_pause: inner_pause :: Real = 0,
                ~outer_pause: outer_pause :: Real = 0,
                ~flat_inner_edge: flat_inner_edge = #false,
                ~flat_outer_edge: flat_outer_edge = #false,
                ~outer_pull: outer_pull :: Real = 0.3,
                ~inner_pull: inner_pull :: Real = 0.5,
                ~rotate: spin :: Real = 0)
  flower(make, r): make([r])

def_radial:
  cloud_radial(~bumps: n :: PosInt = 6,
               ~width: width :: Real = 64,
               ~height: height :: Real = width / 2,
               ~angle_at: point_angle :: (Int, PosInt) -> Real = jitter_spaced(0.3),
               ~inner_radius: d :: Real = 0.8,
               ~outer_radius: od :: Real = 1,
               ~inner_pause: inner_pause :: Real = 0,
               ~outer_pause: outer_pause :: Real = 0,
               ~flat_inner_edge: flat_inner_edge = #false,
               ~flat_outer_edge: flat_outer_edge = #false,
               ~outer_pull: outer_pull :: Real = 0.3,
               ~inner_pull: inner_pull :: Real = 0.125,
               ~rotate: spin :: Real = 0)
  cloud(make, r): make([r])

def_radial:
  flash_radial(~points: n :: PosInt = 10,
               ~width: width :: Real = 64,
               ~height: height :: Real = width / 2,
               ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
               ~inner_radius: d :: Real = 0.75,
               ~outer_radius: od :: Real = 1,
               ~inner_pause: inner_pause :: Real = 0,
               ~outer_pause: outer_pause :: Real = 0,
               ~flat_inner_edge: flat_inner_edge = #false,
               ~flat_outer_edge: flat_outer_edge = #false,
               ~outer_pull: outer_pull :: Real = 0,
               ~inner_pull: inner_pull :: Real = 0,
               ~rotate: spin :: Real = 0)
  flash(make, r): make([r])

fun star_inner(n):
  cond
  | n <= 4: n / 8 // not really a star below 5
  | ~else:
      let theta = 2 * math.pi / n
      let x = math.cos(theta)
      let s = x / math.cos(theta/2)
      let y = s * math.sin(theta/2)
      math.sqrt(x*x + y*y)

def_radial:
  star_radial(~points: n :: PosInt = 5,
              ~width: width :: Real = 64,
              ~height: height :: Real = width,
              ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
              ~inner_radius: d :: Real = star_inner(n),
              ~outer_radius: od :: Real = 1,
              ~inner_pause: inner_pause :: Real = 0,
              ~outer_pause: outer_pause :: Real = 0,
              ~flat_inner_edge: flat_inner_edge = #false,
              ~flat_outer_edge: flat_outer_edge = #false,
              ~outer_pull: outer_pull :: Real = 0,
              ~inner_pull: inner_pull :: Real = 0,
              ~rotate: spin :: Real = 0)
  star(make, r): make([r])

def_radial:
  sun_radial(~rays: n :: PosInt = 10,
             ~width: width :: Real = 64,
             ~height: height :: Real = width,
             ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
             ~inner_radius: d :: Real = 0.6,
             ~outer_radius: od :: Real = 1,
             ~inner_pause: inner_pause :: Real = 0.5,
             ~outer_pause: outer_pause :: Real = 0,
             ~flat_inner_edge: flat_inner_edge = #false,
             ~flat_outer_edge: flat_outer_edge = #false,
             ~outer_pull: outer_pull :: Real = 0,
             ~inner_pull: inner_pull :: Real = 0,
             ~rotate: spin :: Real = 0)
  sun(make, r): make([r])

def_radial:
  gear_radial(~arms: n :: PosInt = 5,
              ~width: width :: Real = 64,
              ~height: height :: Real = width,
              ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
              ~inner_radius: d :: Real = 0.7,
              ~outer_radius: od :: Real = 1,
              ~inner_pause: inner_pause :: Real = 0.5,
              ~outer_pause: outer_pause :: Real = 0.5,
              ~flat_inner_edge: flat_inner_edge = #false,
              ~flat_outer_edge: flat_outer_edge = #true,
              ~outer_pull: outer_pull :: Real = 0,
              ~inner_pull: inner_pull :: Real = 0,
              ~rotate: spin :: Real = 0)
  gear(make, r,
       ~hole: hole :: Real = 0.5):
    make(if hole == 0
         | [r]
         | [r, circle_radial(~width: r.width * hole,
                             ~height: r.height * hole)])

def_radial:
  circle_radial(~sides: n :: PosInt = 5,
                ~width: width :: Real = 64,
                ~height: height :: Real = width,
                ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
                ~inner_radius: d :: Real = 1,
                ~outer_radius: od :: Real = 1,
                ~inner_pause: inner_pause :: Real = 0,
                ~outer_pause: outer_pause :: Real = 1,
                ~flat_inner_edge: flat_inner_edge = #false,
                ~flat_outer_edge: flat_outer_edge = #false,
                ~outer_pull: outer_pull :: Real = 0,
                ~inner_pull: inner_pull :: Real = 0,
                ~rotate: spin :: Real = 0)
  circle(make, r): make([r])

def_radial:
  regular_polygon_radial(~sides: n :: PosInt = 5,
                         ~width: width :: Real = 64,
                         ~height: height :: Real = 64,
                         ~angle_at: point_angle :: (Int, PosInt) -> Real = evenly_spaced,
                         ~inner_radius: d :: Real = math.cos(math.pi/n),
                         ~outer_radius: od :: Real = 1,
                         ~inner_pause: inner_pause :: Real = 0,
                         ~outer_pause: outer_pause :: Real = 0,
                         ~flat_inner_edge: flat_inner_edge = #true,
                         ~flat_outer_edge: flat_outer_edge = #true,
                         ~outer_pull: outer_pull :: Real = 0,
                         ~inner_pull: inner_pull :: Real = 0,
                         ~rotate: spin :: Real = if n mod 2 == 0 | math.pi/n | 0)
  regular_polygon(make, r): make([r])

fun arrow_path(~length: length :: Real = 64,
               ~breadth: breadth :: Real = length,
               ~tail: tail :: Real = 0.5,
               ~head: head :: Real = (if tail .= 0 | 1 | 0.5),
               ~indent: indent = (if tail .= 0 | 0.3 | 0),
               ~rotate: spin :: Real = 0) :~ draw.Path:
  let p = draw.Path()
  let h = length * head
  let a_x = length - h
  let intersect_x = a_x + (h * indent * (1 - tail))
  let tail_top_y = breadth * (1 - tail) / 2
  let tail_bottom_y = breadth - tail_top_y
  if tail .= 0
  | p.move_to([intersect_x, tail_top_y])
  | p.move_to([0, tail_top_y])
    p.line_to([intersect_x, tail_top_y])
  p.line_to([a_x, 0])
  p.line_to([length, breadth/2])
  p.line_to([a_x, breadth])
  unless tail .= 0
  | p.line_to([intersect_x, tail_bottom_y])
    p.line_to([0, tail_bottom_y])
  p.close()
  p.translate(-length/2, -breadth/2)
  p.rotate(spin)
  p

annot.macro 'ArrowBoundingBoxMode': 'Any.of(#'unit, #'shrink, #'line)'

fun arrow(~length: length :: Real = 64,
          ~breadth: breadth :: Real = length,
          ~tail: tail :: Real = 0.5,
          ~head: head :: Real = (if tail .= 0 | 1 | 0.5),
          ~indent: indent = (if tail .= 0 | 0.3 | 0),
          ~rotate: spin :: Real = 0,
          ~fill: fill :: maybe(ColorMode) = #false,
          ~line: line :: maybe(ColorMode) = !fill && #'inherit,
          ~line_width: line_width :: LineWidth = #'inherit,
          ~bound: bound :: ArrowBoundingBoxMode = #'unit) :~ Pict:
  let p = arrow_path(~length: length,
                     ~breadth: breadth,
                     ~tail: tail,
                     ~head: head,
                     ~indent: indent,
                     ~rotate: spin)
  let (w, h, pdx, pdy):
    match bound
    | #'line:
        let w = length * math.abs(math.cos(spin))
        let h = breadth * math.abs(math.sin(spin))
        values (w, h, w/2, h/2)
    | #'shrink:
        let r = p.bounding_box()
        values(r.width, r.height, -r.x, -r.y)
    | #'unit:
        values(length, breadth, length/2, breadth/2)
  dc(fun (dc :: draw.DC, dx, dy):
       dc.path(p, ~dx: dx + pdx, ~dy: dy + pdy),
     ~width: w,
     ~height: h,
     ~fill: fill,
     ~line: line,
     ~line_width: line_width)
