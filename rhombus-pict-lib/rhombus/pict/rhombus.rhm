#lang rhombus/static/and_meta
import:
  pict open
  pict/text open
  shrubbery/render
  shrubbery/render/define
  lib("racket/base.rkt").#{datum-intern-literal} as intern

export:
  rhombus
  rhombusblock
  rhombusblock_etc

  current_rhombus_colorize
  current_paren_color
  current_literal_color
  current_identifier_color
  current_comment_color
  current_result_color
  current_rhombus_tt

Parameter.def current_rhombus_colorize :: Any.to_boolean = #true

Parameter.def current_paren_color :: Color || String = "brown"
Parameter.def current_literal_color :: Color || String = "forestgreen"
Parameter.def current_identifier_color :: Color || String = "black"
Parameter.def current_comment_color :: Color || String = "chocolate"
Parameter.def current_result_color :: Color || String = "darkblue"

Parameter.def current_rhombus_tt :: Function.all_of(~name: "current_rhombus_tt function",
                                                    String -> Pict):
  fun (str_s):
    boldly: tt(str_s)

fun rtt(str_s) :~ Pict:
  current_rhombus_tt()(str_s)

def (render_line,
     render_block):
  @render.make(~render:
                 fun (kind, str):
                   let p :~ Pict:
                     if kind == #'variable
                     | italicly: rtt(str)
                     | rtt(str)
                   match current_rhombus_colorize() && kind
                   | #'value: p.colorize(current_literal_color())
                   | #'result: p.colorize(current_result_color())
                   | #'identifier: p.colorize(current_identifier_color())
                   | #'paren: p.colorize(current_paren_color())
                   | #'comment: p.colorize(current_comment_color())
                   | ~else: p
               ~render_in_space:
                 fun (space, str, od):
                   rtt(str)
               ~render_whitespace:
                 fun (n):
                   rtt(String.make(n, Char" "))
               ~render_line:
                 fun (elems):
                   fun flatten(p):
                     match p
                     | PairList[a, ...]: List.append(flatten(a), ...)
                     | a: [a]
                   beside(& flatten(elems), ~vert: #'topline, ~attach: #'paragraph)
               ~render_lines:
                 fun (lines):
                   stack.left(& PairList.to_list(lines))
               ~rendered_shape:
                 fun (p :~ Pict, len, old_style):
                   values(p.width,
                          // second result is used for collapsing, so
                          // allow collapsing when the size per position
                          // is the same
                          intern(p.width / len))
               ~render_indentation:
                 fun (n, off, m, s, style):
                   if s
                   | let p = rtt(" ")
                     p.scale(s * n / m / p.width, 1)
                   | tt(String.make(n, Char" "))
               ~is_rendered:
                 fun (v):
                   v is_a Pict)

fun to_pict(who, v):
  if v is_a Pict
  | v
  | error(~who: who,
          ~exn: Exn.Fail.Annot,
          error.annot_msg("escape result"),
          error.val(~label: "result", v))

define.macros (rhombus,
               rhombusblock,
               rhombusblock_etc):
  ~render_line: render_line
  ~render_block: render_block
  ~escape: to_pict
  ~result: Pict
