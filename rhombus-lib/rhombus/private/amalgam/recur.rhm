#lang rhombus/private/amalgam/core
import:
  "core-meta.rkt" open
  "error.rhm" open
  lib("racket/unsafe/undefined.rkt").#{unsafe-undefined}

use_static

export:
  recur

expr.macro 'recur $(name :: Identifier) ($(arg :: bind_meta.Argument),
                                         ...) $(r :: bind_meta.Result):
              $(body :: Block)':
  ~op_stx self_id
  for (arg in [arg, ...],
       expr in [arg.maybe_expr, ...]):
    unless expr
    | syntax_meta.error("missing initial-value expression",
                        self_id,
                        arg)
  let loop_name = Syntax.make_id(name +& "_recur")
  let [arg_info, ...] = [bind_meta.get_info(arg.parsed, '()'), ...]
  // if all the bindings are immediate (as opposed to more complex patterns),
  // then we expand similar to Racket's named `let`. Otherwise, to avoid
  // duplicating the binding machinery for the initial call and recursive calls,
  // we'll expand in a way that uses `#{unsafe-undefined}` on the initial call
  let all_immediate: for values(immed = #true) (info in [arg_info, ...]):
                       immed && bind_meta.is_immediate(info)
  let ['($_, $a_name, $_, ...)', ...] = [bind_meta.unpack_info(arg_info), ...]
  let [arg_id, ...] = [Syntax.make_id(a_name +& "_arg"), ...]
  let [avail_id, ...] = [Syntax.make_id(a_name +& "_ready_arg"), ...]
  let [recur_arg, ...] = (for List (kw in [arg.maybe_keyword, ...],
                                    id in [arg_id, ...],
                                    avail_id in [avail_id, ...]):
                            if kw
                            | '$kw: $id = $avail_id'
                            | '$id')
  let body_expr:
    wrap_converter('«block:
                       fun $name($recur_arg, ...) :~ providing($r.static_info):
                         $loop_name($arg_id, ...)
                       block $body
                     »',
                   r.count, r.maybe_converter, r.annotation_string, name)
  fun
  | make_binds_plus_body(mode, [], [], [], [], inside):
      inside
  | make_binds_plus_body(mode,
                         [arg_info, & arg_infos],
                         [arg_id, & arg_ids],
                         [avail_id, & avail_ids],
                         [init_expr, & init_exprs],
                         inside):
      let '($ann_str, $a_name, $sis, (($id, $_, $si), ...), $matcher, $evidence, $committer, $binder, $data)':
        bind_meta.unpack_info(arg_info)
      let next:
          '«block:
              $committer($avail_id, $evidence, $data)
              $binder($avail_id, $evidence, $data)
              statinfo.macro '$id': '$si'
              ...
              $(make_binds_plus_body(mode, arg_infos, arg_ids, avail_ids, init_exprs, inside))»'
      '«block:
          def $avail_id: $(match mode
                           | #'immediate: arg_id
                           | #'general:
                               'if $arg_id === #{unsafe-undefined}
                                | $init_expr
                                | $arg_id'
                           | #'initial: init_expr)
          $matcher($avail_id, $data, if, $next, no_match(#' $name, #%literal $ann_str, $avail_id))»'
  fun make_binds_plus_body_for(mode, inside):
    make_binds_plus_body(mode,
                         [arg_info, ...],
                         [arg_id, ...],
                         [avail_id, ...],
                         [arg.maybe_expr, ...],
                         inside)
  fun undefined(id): '#{unsafe-undefined}'
  let expr:
    'block:
       fun $loop_name($arg_id, ...):
         $(make_binds_plus_body_for(if all_immediate | #'immediate | #'general,
                                    body_expr))
       $(if all_immediate
         | make_binds_plus_body_for(#'initial,
                                    '$loop_name($avail_id, ...)')
         | '$loop_name($(undefined(arg_id)), ...)')'
  statinfo_meta.wrap(expr, r.static_info)

fun no_match(who, ann_str, what):
  error(~who: who,
        ~exn: Exn.Fail.Annot,
        error.annot_msg(),
        error.annot(ann_str),
        error.val(what))

meta:
  fun wrap_converter(expr, count, maybe_converter, annotation_string, name):
    if maybe_converter
    | if count == 1
      | '$maybe_converter($expr,
                          fun (v): v,
                          fun (): bad_result(#' $name,
                                             #%literal $annotation_string))'
      | let [arg, ...]:
          for List (i in 0..count):
            Syntax.make_id("arg" +& i)
        'block:
           fun fail(): bad_result(#' $name, #%literal $annotation_string)
           call_with_values(
             fun (): $expr,
             fun
             | ($arg, ...):
                 $maybe_converter($arg, ..., values, fail)
             | (& args): fail()
           )'
    | expr

fun bad_result(who, ann_str):
  error(~who: who,
        ~exn: Exn.Fail.Annot,
        error.annot_msg("result"),
        error.annot(ann_str))

annot.macro 'providing($unpacked_static_info)':
  annot_meta.pack_predicate('fun (x): #true',
                            unpacked_static_info)
