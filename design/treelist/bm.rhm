#lang rhombus
import:
  rhombus/measure
  "treelist.rhm".TreeList

def M = 1000000
def N = 10

def show_TreeList = #false

macro 'bm $who: $body':
  'block:
     print($who +& "                ".substring(0, math.max(0, 16 - ($who).length())))
     measure.time:
       ~gc
       $body
     #void' 

bm "+ Pair.cons":
  for values(r = #false) (i in 0..M):
    for values(l = []) (i in 0..N):
      Pair.cons(i, l)

bm "+ PairList.for":
  for values(r = #false) (i in 0..M):
    for PairList (i in 0..N):
      i

bm "+ PairList.cons":
  for values(r = #false) (i in 0..M):
    for values(l = PairList[]) (i in 0..N):
      PairList.cons(i, l)

bm "+ List.for":
  for values(r = #false) (i in 0..M):
    for List (i in 0..N):
      i

bm "+ List.add":
  for values(r = #false) (i in 0..M):
    for values(l = []) (i in 0..N):
      List.add(l, i)

bm "+ List.cons":
  for values(r = #false) (i in 0..M):
    for values(l = []) (i in 0..N):
      List.cons(i, l)

when show_TreeList
| bm "+ TreeList.add":
    for values(r = #false) (i in 0..M):
      for values(l = TreeList.empty) (i in 0..N):
        TreeList.add(l, i)

when show_TreeList
| bm "+ TreeList.cons":
    for values(r = #false) (i in 0..M):
      for values(l = TreeList.empty) (i in 0..N):
        TreeList.cons(l, i)

bm "+ Set.add":
  for values(r = #false) (i in 0..M):
    for values(l = Set.empty) (i in 0..N):
      l ++ { i }

bm "- Pair.rest":
  let init:
    for values(l = []) (i in 0..N):
      Pair.cons(i, l)
  for values(r = #false) (i in 0..M):
    for values(l = init) (i in 0..N):
      Pair.rest(l)

bm "- PairList.rest":
  let init:
    for PairList (i in 0..N): i
  for values(r = #false) (i in 0..M):
    for values(l = init) (i in 0..N):
      PairList.rest(l)

bm "- List.rest":
  let init:
    for List (i in 0..N): i
  for values(r = #false) (i in 0..M):
    for values(l = init) (i in 0..N):
      List.rest(l)

when show_TreeList
| bm "- TreeList.drop":
    let init:
      for values(l = TreeList.empty) (i in 0..N):
        TreeList.cons(l, i)
    for values(r = #false) (i in 0..M):
      for values(l = init) (i in 0..N):
        TreeList.drop(l, 1)

bm "- Set.remove":
  let init:
    for values(l = Set.empty) (i in 0..N):
      l ++ { i }
  for values(r = #false) (i in 0..M):
    for values(l = init) (i in 0..N):
      Set.remove(l, i)

bm "^ PairList.iter":
  let init :~ PairList:
    for PairList (i in 0..N): i
  for values(r = #false) (i in 0..M):
    for values(r = r) (e in init):
      e

bm "^ List.iter":
  let init :~ List:
    for List (i in 0..N): i
  for values(r = #false) (i in 0..M):
    for values(r = r) (e in init):
      e

when show_TreeList
| bm "^ TreeList.iter":
    let init :~ TreeList:
      for values(l = TreeList.empty) (i in 0..N):
        TreeList.cons(l, i)
    for values(r = #false) (i in 0..M):
      for values(r = r) (e in init):
        e

bm "^ Set.iter":
  let init :~ Set:
    for Set (i in 0..N): i
  for values(r = #false) (i in 0..M):
    for values(r = r) (e in init):
      e
