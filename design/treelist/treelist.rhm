#lang rhombus/static/and_meta
import:
  rhombus/unsafe.use_unsafe

use_unsafe

// comment out for fast
#//
import:
  "core.rkt".(::) as :~

/*
  (Rough) Roadmap:
  - tail
  - make rrbtree construction smarter
  - largescale real world use (shplait?)
*/

export:
  TreeList

def BITS = 5
def MAX_WIDTH = 2 ** BITS
def MASK = MAX_WIDTH - 1
def MAX_ERROR = 2


macro 'radix($index, $height)':
  '((($index) bits.(>>) (BITS * ($height))) bits.and MASK)'

module test:
  for (i in 0 .. MAX_WIDTH):
    check: radix(i, 0) ~is i
    check: radix(i, 1) ~is 0
  for (i in MAX_WIDTH .. 2*MAX_WIDTH):
    check: radix(i, 1) ~is 1

/* a node in the RRB Tree

  - a node is fully dense if it has exactly `m` children where `m` is the branching factor of the overall Tree
    and each child is also fully dense
  - a node is leftwise dense if its first `n - 1` children, where `n` is its total number of children,
    are fully dense, and its `n`th child is leftwise-dense or fully dense. `n` is allowed to be < `m`
  - a node is balanced if it is leftwise dense or fully dense (note that leaves are always at least leftwise dense)
  - unbalanced nodes contain a size array `sizes`, balanced nodes do not
*/

// veneer `Node` variant:
#//
veneer Node(this :~ (Array.of(Node || Any)
                       || Pair.of(Array.of(Node || Any),
                                  Array.of(Int)))):
  implements Indexable

  expression
  | 'Node()': 'empty_node'
  | 'Node($children, $sizes)': '((block:
                                    let cs = $children
                                    let szs = $sizes
                                    if szs | Pair(cs, szs) |cs) :~ Node)'
  | 'Node($children)': '(($children) :~ Node)'

  property balanced:
    this is_a Array

  property children :~ Array:
    match this
    | Pair(a :~ Array, _): a
    | a :~ Array: a

  property sizes:
    match this
    | Pair(_, szs :~ Array): szs
    | _: #false

  property size:
    children.length()

  property first:
    children[0]

  property last:
    let a = children
    a[a.length() - 1]

  override get(index):
    children[index]

  method set(index, el) :~ Node:
    match this
    | Pair(a :~ Array, sizes):
        Node(a.set_in_copy(index, el), sizes)
    | a :~ Array:
        Node(a.set_in_copy(index, el))

// wrapper `Node` variant:
class Node(children :~ Array.now_of(Node || Any) = Array(), sizes :~ maybe(Array.now_of(Int)) = #false):
  implements Indexable

  property balanced:
    !sizes

  property size:
    children.length()

  property first:
    children[0]

  property last:
    let a = children
    a[a.length() - 1]

  override get(index):
    children[index]

  method set(index, el) :~ Node:
    Node(children.set_in_copy(index, el), sizes)

def empty_node = Node(Array())

macro 'leaf($arg, ...)':
  'Node(Array($arg, ...))'

class TreeList(root :~ Node,
               size :~ NonnegInt,
               height :~ NonnegInt):
  implements Indexable
  private implements Equatable
  private implements Appendable
  private implements Printable
  implements Sequenceable
  authentic

  internal _TreeList

  expression
  | 'TreeList[]': 'empty :~ TreeList'
  | 'TreeList[$(a :: Term)]': '_TreeList(leaf($a), 1, 0) :~ TreeList'
  | 'TreeList[$a, $b]': '_TreeList(leaf($a, $b), 2, 0) :~ TreeList'
  | 'TreeList[$a, $b, $c]': '_TreeList(leaf($a, $b, $c), 3, 0) :~ TreeList'
  | 'TreeList[$a, $b, $c, $d, ...]': 'TreeList[$a, $b, $c].add_all(List($d, ...)) :~ TreeList'

  export:
    empty
    from

  override to_sequence():
    // Slower strategy than the `sequence` inline version, but
    // the `Sequence.make` protocol requires a single value for
    // the position, and allocating a value to track index plus
    // node defeats the benefit of threading the current node
    Sequence.make(
      ~initial_position: 0,
      ~continue_at_position: fun (pos): pos < size,
      ~position_to_element: fun (pos): this[pos],
      ~position_to_next: fun (pos): pos + 1
    )

  sequence '$lhs: $rhs':
    '(~outer_binds:
        p :~ TreeList = $rhs,
      ~recur_binds:
        pos = 0
        node = empty_node
        node_pos = 0,
      ~head_guard:
        pos < p.size,
      ~inner_binds:
        values($lhs, next_node, next_node_pos):
          if node_pos < Node.size(node)
          | values((node :~ Node)[node_pos], node, node_pos + 1)
          | let (node :~ Node, node_pos) = _TreeList.node_for(p, pos)
            values(node[node_pos], node, node_pos + 1),
      ~recur_args:
        (pos + 1, next_node, next_node_pos))'

  private override describe(mode, recur):
    PrintDesc.list("TreeList[", List.map(to_list(), recur), "]")

  property balanced:
    root.balanced

  // TODO i want it to be equal if the represented sequence is equal which requires walking the tree
  // how to do efficiently?
  private override equals(rhs :~ TreeList, recur):
    (size == rhs.size) && (for all (i in 0..size):
                             recur(rhs[i], this[i]))

  private override hash_code(recur):
    recur(root)

  override get(index :~ Int):
    let (node :~ Node, pos :~ Int) = node_for(index)
    node[pos]

  private method node_for(index :~ NonnegInt) :~ (Node, Int):
    cond
    | size == 0 || index < 0 || index >= size:
        error(#'#{TreeList.get}, "index out of range")
    | height == 0:
        values(root, index)
    | ~else:
        recur walk(node :~ Node = root, index = index, depth = height):
          cond
          | node.balanced:
              values(recur sub (n :~ Node = node, depth = depth):
                       if depth == 0
                       | n
                       | sub(n.get(radix(index, depth)),
                             depth-1),
                     index bits.and MASK)
          | depth == 1:
              let (bi, si) = step(node, index, depth)
              values(node[bi], si bits.and MASK)
          | ~else:
              let (bi, si) = step(node, index, depth)
              walk(node.get(bi), si, depth - 1)

  // functionally update the slot at `index` to `el`
  method set(index :~ Int, el) :~ TreeList:
    def new_node = recur set(node :~ Node  = root, index = index, el = el, depth = height):
      cond
      | depth == 0:
          node.set(radix(index, depth), el)
      | node.balanced:
          def branch_index = radix(index, depth)
          node.set(branch_index, set(node.get(branch_index), index, el, depth - 1))
      | ~else:
          def (branch_index, subindex) = step(node, index, depth)
          node.set(branch_index, set(node.get(branch_index), subindex, el, depth - 1))

    _TreeList(new_node, size, height)

  // add `el` to end of vector
  method add(el) :~ TreeList:
    if size == 0
    | _TreeList(leaf(el), 1, 0)
    | let new_root = build(root, height, el)
      if new_root
      | /* enough space in original tree */
        _TreeList(new_root, size + 1, height)
      | /* not enough space in original tree */
        _TreeList(Node(Array(root, new_branch(el, height)),
                       root.sizes && Array(size, size + 1)),
                  size + 1,
                  height + 1)

  // TODO chunk adding here by 32 and add whole nodes at a time?
  method add_all(els :~ Sequence) :~ TreeList:
    for values(t :~ TreeList = this) (el in els):
      t.add(el)

  // TODO should be able to make this faster. At the least, we can grab whole leaf nodes at a time
  // rather than traverse once per element of represented vector
  method to_list() :~ List:
    for List (idx in 0..size):
      get(idx)

  method length() :~ Int:
    size

  // trees that are a result of this method may not meet invariants, but rebalancing is costly
  // and future concatenations would restore the invariants due to rebalancing being done on concats.
  // TODO write some tests showing this
  method take(pos :~ NonnegInt) :~ TreeList:
    cond
    | pos < 0 || pos > size:
        error(#'TreeList_take, "index out of range")
    | pos == 0:
        TreeList[]
    | pos == size:
        this
    | ~else:
        def new_root = recur take(node :~ Node = root, index = pos - 1, depth = height) :~ Node:
          cond
          | depth == 0:
              Node(node.children.take(radix(index, 0) + 1))
          | node.balanced:
              def branch_index = radix(index, depth)
              def new_children :~ Array.now_of(Node) = node.children.take(branch_index + 1)
              if depth == 0
              |  Node(new_children)
              |  new_children[branch_index] := take(node.children[branch_index], index, depth - 1)
                 Node(new_children)
          | ~else:
              def (branch_index, subindex) = step(node, index, depth)
              def new_children :~ Array.now_of(Node) = node.children.take(branch_index + 1)
              def new_sizes :~ Array.now_of(Int)  = Array.take(node.sizes, branch_index + 1)
              new_children[branch_index] := take(node.get(branch_index), subindex, depth - 1)
              new_sizes[branch_index] := index + 1
              Node(new_children, new_sizes)

        squash(new_root, pos, height)

  method drop(pos :~ NonnegInt) :~ TreeList:
    cond
    | pos < 0 || pos > size:
        error(#'TreeList_drop, "index out of range")
    | pos == 0:
        this
    | pos == size:
        TreeList[]
    | ~else:
        def new_root = recur drop(node :~ Node = root,
                                  index :~ Int = pos,
                                  depth :~ Int = height) :~ Node:
          cond
          | depth == 0:
              Node(node.children.drop(radix(index, 0)))
          | node.balanced:
              def branch_index = radix(index, depth)
              def new_children :~ Array.now_of(Node) = node.children.drop(branch_index)
              def new_child :~ Node = drop(node.get(branch_index), index, depth - 1)
              new_children[0] := new_child

              def size0 = size_subtree(new_child, depth-1)
              def new_len = node.size - branch_index
              def new_sizes = Array.make(new_len)

              cond
              | new_len == 1:
                  new_sizes[0] := size0
              | ~else:
                  def step = 1 bits.(<<) (depth * BITS)
                  for (i in 0 .. new_len - 1):
                    new_sizes[i] := (size0 + i * step)
                  let sizeN = size_subtree(new_children[new_len-1], depth-1)
                  new_sizes[new_len - 1] := size0 + (new_len - 2) * step + sizeN

              Node(new_children, new_sizes)
          | ~else:
              def (branch_index, subindex) = step(node, index, depth)
              def new_children :~ Array.now_of(Node) = node.children.drop(branch_index)
              def new_sizes = for Array.of_length((node.sizes :~ Array.now_of(Int)).length() - branch_index):
                each i in branch_index .. (node.sizes :~ Array.now_of(Int)).length()
                (node.sizes :~ Array.now_of(Int))[i] - index
              def new_child = drop(node.get(branch_index), subindex, depth - 1)

              new_children[0] := new_child
              Node(new_children, new_sizes)

        squash(new_root, size - pos, height)

  method split(at :~ NonnegInt) :~ (TreeList, TreeList):
    cond
    | at == 0: values(TreeList[], this)
    | at == size: values(this, TreeList[])
    | at > 0 && at < size: values(take(at), drop(at))
    | ~else: error(#'split, "invalid index")

  method insert(at :~ NonnegInt, el) :~ TreeList:
    cond
    | at <= 0:
        this.cons(el)
    | at >= size:
        this.add(el)
    | ~else:
        let (l :~ TreeList, r :~ TreeList) = split(at)
        l.add(el).concat(r)

  method cons(el) :~ TreeList:
    if size == 0
    | _TreeList(leaf(el), 1, 0)
    | // insert in leftmost node, if it has space; this
      // will always work for small lists
      fun insert_left(a :~ Node, height) :~ maybe(Node):
        cond
        | height == 0:
            (a.size < MAX_WIDTH) && Node(Array(el) ++ a.children)
        | ~else:
            let left = insert_left(a.children[0], height - 1)
            left && Node(a.children.set_in_copy(0, left),
                         block:
                           let sizes :~ Array: a.sizes
                           for Array.of_length(sizes.length()):
                             each n in sizes
                             n+1)
      let new_root = insert_left(root, height)
      if new_root
      | _TreeList(new_root, size + 1, height)
      | TreeList[el].concat(this)

  method pop() :~ TreeList:
    take(size - 1)

  private override method append(rhs :~ TreeList) :~ TreeList:
    concat(rhs)

  method concat(rhs :~ TreeList) :~ TreeList:
    cond
    | size == 0: rhs
    | rhs.size == 0: this
    | ~else:
        let values(new_children, new_height):
          concat_subtree(root,
                         height,
                         rhs.root,
                         rhs.height)
        _TreeList(new_children,
                  size + rhs.size,
                  new_height)

  method sublist(start :~ Int = 0, end :~ Int = size) :~ TreeList:
    cond
    | start < 0 || end > size:
        error(#'TreeList_sublist, "index out of range")
    | start == 0 && end == size:
        this
    | ~else:
        drop(start).take(end - start)

// must be defined after `_TreeList` is available:
def empty = _TreeList(Node(), 0, 0)

/* helper functions */

// after take or drop, squash tree if it can be shorter:
fun squash(node :~ Node, new_size, new_height):
  if node.size == 1 && new_height > 0
  | squash(node.first, new_size, new_height - 1)
  | _TreeList(node, new_size, new_height)

// result height is either max of two heights or one more
// than the max of the heights
fun concat_subtree(left :~ Node,
                   height_l :~ Int,
                   right :~ Node,
                   height_r :~ Int) :~ (Node, Int):
  cond
  /* only trees of the same height can be concatenated */
  | height_l > height_r:
      let values(mid, height_m):
        concat_subtree(left.last,
                       height_l - 1,
                       right,
                       height_r)
      rebalance(left,
                mid,
                #false,
                height_l,
                height_m)
  | height_l < height_r:
      let values(mid, height_m):
        concat_subtree(left,
                       height_l,
                       right.first,
                       height_r - 1)
      rebalance(#false,
                mid,
                right,
                height_r,
                height_m)
  | height_l == 0:
      if left.size + right.size <= MAX_WIDTH
      | values(Node(left.children ++ right.children),
               0)
      | values(Node(Array(left, right),
                    Array(left.size, left.size + right.size)),
               1)
  | ~else:
      /* two internal nodes with same height */
      let values(mid, height_m):
        concat_subtree(left.last,
                       height_l - 1,
                       right.first,
                       height_r - 1)
      rebalance(left,
                mid,
                right,
                height_l,
                height_m)

// keeps all but last of `left`, all but first of `right`,
// and all of `center`; height is the same for `left` and
// `right`, which `center` height might be one less; height
// is at least 1; the resulting height grows by either 0 or 1
fun rebalance(left :~ maybe(Node),
              center :~ Node,
              right :~ maybe(Node),
              height :~ Int,
              height_c :~ Int) :~ (Node, Int):
  def all_slots = merge_nodes(left,
                              if height_c < height
                              | Node(Array(center))
                              | center,
                              right)
  def plan = concat_plan(all_slots)
  def rebalanced_slots = exec_concat_plan(all_slots, plan, height)

  cond
  | rebalanced_slots.length() <= MAX_WIDTH:
      values(set_sizes(rebalanced_slots, height),
             height)
  | ~else:
      def new_left = Array.take(rebalanced_slots, MAX_WIDTH)
      def new_right = Array.drop(rebalanced_slots, MAX_WIDTH)
      values(set_sizes(Array(set_sizes(new_left, height),
                             set_sizes(new_right, height)),
                       height + 1),
             height + 1)

/* merge all children except for the rightmost in `left` and leftmost in `right` */
fun merge_nodes(left :~ maybe(Node), center :~ Node, right :~ maybe(Node)) :~ Array:
  Array.append(if !left | Array() | Node.children(left).drop_last(1),
               center.children,
               if !right | Array() | Node.children(right).drop(1))

fun array_add(a :~ Array, val):
  a ++ Array(val)

// TODO how to avoid setting sizes when the tree is leftwise dense?
fun set_sizes(children :~ Array, height :~ Int) :~ Node:
  if height == 0:
  | Node(children)
  | def sizes = Array.make(children.length())
    for values(sum = 0) (i in 0 .. children.length()):
      def new_sum = sum + size_subtree(children[i], height - 1)
      sizes[i] := new_sum
      new_sum
    Node(children, sizes)

// TODO redesign this to be less imperative?
/* receives a node that is temporarily allowed to have > max_width children, redistributes it to conform to invariant */
fun concat_plan(slots :~ Array) :~ maybe(Array):
  def plan = Array.make(slots.length())
  def child_count:
    for values(count = 0) (i in 0 .. slots.length()):
      def sz = (slots[i] :~ Node).size
      plan[i] := sz
      count + sz

  def optimal_node_len = (child_count + MAX_WIDTH - 1) div MAX_WIDTH
  def target_node_len = optimal_node_len + MAX_ERROR

  if target_node_len >= plan.length()
  | #false
  | distribute(plan, target_node_len, plan.length())

fun distribute(plan :~ Array, target :~ Int, count :~ Int, node_idx :~ Int = 0) :~ Array:
  if target >= count:
  | Array.take(plan, count)
  | let (i, r):
      recur loop(i = short_node(plan, node_idx),
                 r = plan[i]):
        if r == 0
        | values(i, r)
        | def min_size = math.min(r + plan[i + 1], MAX_WIDTH)
          plan[i] := min_size
          loop(i + 1, r + plan[i + 1] - min_size)

    /* we've removed a node (conceptually) at this point,
       so move nodes to the right of current node left by one */
    for (j in i .. count - 1):
      plan[j] := plan[j + 1]

    distribute(plan, target, count - 1, i - 1)


fun short_node(plan :~ Array, i :~ Int) :~ Int:
  if plan[i] < MAX_WIDTH - 1
  | i
  | short_node(plan, i + 1)


fun exec_concat_plan(slots :~ Array,
                     plan :~ maybe(Array),
                     height :~ Int) :~ Array:
  if !plan
  | slots
  | let plan :~ Array = plan
    def flattened_size:
      for values(sum = 0):
        each node :~ Node in slots
        sum + node.size
    def flattened:
      for Array.of_length(flattened_size):
        each node :~ Node in slots
        each child in node.children
        child

    def new_slots = Array.make(plan.length())
    for values(sum = 0):
      each i in 0..plan.length()

      let new_sum = sum + plan[i]
      let new_node:
        for Array.of_length(new_sum - sum):
          each j in sum .. new_sum
          flattened[j]
      new_slots[i] :=  set_sizes(new_node, height - 1)

      new_sum

    new_slots

fun size_subtree(node :~ Node, height :~ Int):
  cond
  | height == 0:
      node.children.length()
  | node.sizes:
      (node.sizes :~ Array)[node.size - 1]
  | ~else: // if sizes is #false, then we know we have a leftwise-dense subtree
      ((node.size - 1) bits.(<<) (height * BITS)) + size_subtree(node.last, height - 1)


/* helper functions */

fun scan_sizes(sizes :~ Array.now_of(Int), target_index, i = 0) :~ Int:
  if sizes[i] .<= target_index
  | scan_sizes(sizes, target_index, i + 1)
  | i

// calculate next branch to take and subindex of `index` along that path
fun step(node :~ Node, index, depth) :~ (NonnegInt, NonnegInt):
  let sizes :~ Array = node.sizes
  def branch = scan_sizes(sizes, index, radix(index, depth))
  values(branch,
         if branch == 0
         | index
         | index - sizes[branch - 1])

// add if there's room, return #false otherwise
fun build(n :~ Node, height, el):
  cond
  | height == 0:
      if n.size < MAX_WIDTH
      | Node(array_add(n.children, el))
      | #false
  | ~else:
      let child = (n.size > 0) && build(n.get(n.size - 1), height - 1, el)
      cond
      | child:
          Node(n.children.set_in_copy(n.size - 1, child),
               n.sizes && Array.set_in_copy(n.sizes,
                                            Array.length(n.sizes) - 1,
                                            (n.sizes :~ Array)[Array.length(n.sizes) - 1] + 1))
      | n.size < MAX_WIDTH:
          Node(array_add(n.children,
                         new_branch(el, height - 1)),
               n.sizes && Array.append(n.sizes, Array((n.sizes :~ Array)[n.size - 1] + 1)))
      | ~else:
          #false

// create a branch of height `height` terminating in a unary leaf node containing `el`
fun new_branch(el, height):
  if height == 0
  | leaf(el)
  | Node(Array(new_branch(el, height - 1)))


fun
| from() :~ TreeList: TreeList[]
| from(s :~ Sequence) :~ TreeList:
    for values(v :~ TreeList = TreeList[]) (el in s):
      v.add(el)

module test:
  macro 'checkP $msg:
           $body':
    'TODO'

  fun
  | array_from(s :: Sequence) :~ Array:
      for Array (si in s): si

  fun
  | list_from(s :: Sequence) :~ List:
      for List (i in s): i

  /* Node tests */
  let leaf_n :~ Node = Node(Array(1, 2, 3, 4))
  let internal_balanced_n :~ Node = Node(Array(Node(array_from(0..32)),
                                               Node(array_from(32..64)),
                                               Node(array_from(64..96))))
  let internal_unbalanced_n :~ Node = Node(Array(Node(array_from(0..32)),
                                                 Node(array_from(32..60)),
                                                 Node(array_from(60..90))),
                                           Array(32, 60, 90))

  check: //balanced
    leaf_n.balanced ~is #true
    internal_balanced_n.balanced ~is !internal_unbalanced_n.balanced

  check: //size
    leaf_n.size ~is 4
    internal_balanced_n.size ~is 3
    internal_unbalanced_n.size ~is 3

  check: //first
    leaf_n.first ~is 1
    internal_balanced_n.first ~is_now Node(array_from(0..32))
    internal_unbalanced_n.first ~is_now Node(array_from(0..32))

  check: //last
    leaf_n.last ~is 4
    internal_balanced_n.last ~is_now Node(array_from(64..96))
    internal_unbalanced_n.last ~is_now Node(array_from(60..90))

  check: // get
    leaf_n.get(0) ~is leaf_n[0]
    leaf_n[3] ~is 4
    internal_balanced_n.get(0) ~is_now internal_balanced_n[0]
    internal_balanced_n.get(1) ~is_now Node(array_from(32..64))
    internal_unbalanced_n.get(0) ~is_now internal_unbalanced_n[0]
    internal_unbalanced_n.get(1) ~is_now Node(array_from(32 .. 60))

  check: // set
    leaf_n.set(0, -1) ~is_now Node(Array(-1, 2, 3, 4))
    internal_balanced_n.set(0, -1).set(1, -1).set(2, -1) ~is_now Node(Array(-1, -1, -1))
    internal_unbalanced_n.set(0, -1).set(1, -1).set(2, -1).children ~is_now Array(-1, -1, -1)

  check: // leaf macro
    leaf(1, 2, 3, 4) ~is_now leaf_n
    leaf(leaf(1, 2, 3, 4), leaf(5, 6)) ~is_now Node(Array(leaf(1,2,3,4),
                                                          leaf(5,6)))


  // expressions
  check: _TreeList(Node(), 0, 0) ~is TreeList[]
         _TreeList(leaf(1), 1, 0) ~is TreeList[1]
         _TreeList(leaf(1, 2), 2, 0) ~is TreeList[1, 2]
         _TreeList(leaf(1, 2, 3), 3, 0) ~is TreeList[1, 2, 3]
         _TreeList(leaf(1, 2, 3, 4), 4, 0) ~is TreeList[1, 2, 3, 4]
         _TreeList(leaf(1, 2, 3, 4, 5), 5, 0) ~is TreeList[1, 2, 3, 4, 5]
  check: _TreeList(leaf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), 20, 0)
         ~is TreeList[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

  // start with testing some balanced vecs

  let empty :~ TreeList = TreeList[]
  let small :~ TreeList = TreeList[1, 2, 3, 4, 5]
  let small_ub /* ub for unbalanced */ :~ TreeList = _TreeList(Node(Array(Node(Array(1, 2, 3, 4)),
                                                                          Node(Array(5))),
                                                                    Array(4, 5)),
                                                               5, 1)
  let medium :~ TreeList = TreeList[].add_all(List.iota(1024))
  let medium_ub :~ TreeList = TreeList.from(0..300) ++ TreeList.from(300..600) ++ TreeList.from(600..900) ++ TreeList.from(900..1024)
  let large :~ TreeList = TreeList[].add_all(List.iota(MAX_WIDTH ** 4 + 1))
  let large_ub :~ TreeList = TreeList.from(0..32) ++ TreeList.from(32..(32**2)) ++ TreeList.from((32**2)..(32**3)) ++ TreeList.from((32**3)..(32**4))

  check: // get near beginning
    empty.get(0) ~throws ""
    small.get(0) ~is 1
    medium.get(0) ~is 0
    small_ub.get(0) ~is 1
    medium_ub.get(0) ~is 0
    large_ub.get(0) ~is 0

  check: // get in the middle
    empty.get(1) ~throws ""
    small.get(1) ~is 2
    medium.get(500) ~is 500
    small_ub.get(2) ~is 3
    medium_ub.get(300) ~is 300
    large_ub.get(16**3) ~is 16**3

  check: // get at the end
    empty.get(10000000) ~throws ""
    small.get(4) ~is 5
    medium.get(1023) ~is 1023
    small_ub.get(4) ~is 5
    medium_ub.get(1023) ~is 1023
    large_ub.get(32**3) ~is 32**3

// add

  check: // add
    empty.add(1) ~is TreeList[1]
    small.add(1) ~is TreeList[1, 2, 3, 4, 5, 1]
    medium.add(1).to_list() ~is List.iota(1024) ++ [1]
    large.add(1).get(large.size) ~is 1
    small_ub.add(1) ~is TreeList[1, 2, 3, 4, 5, 1]
    medium_ub.add(1).to_list() ~is List.iota(1024) ++ [1]
    large_ub.add(1).to_list() ~is List.iota(32**4) ++ [1]

  //set
  check: // set near beginning
    empty.set(0, -1) ~throws ""
    small.set(0, -1) ~is TreeList[-1, 2, 3, 4, 5]
    medium.set(0, -1).get(0) ~is -1
    large.set(0, -1).get(0) ~is -1
    small_ub.set(0, -1) ~is TreeList[-1, 2, 3, 4, 5]
    medium_ub.set(0, -1).get(0) ~is -1
    large_ub.set(0, -1).get(0) ~is -1


  check: // set in the middle
    empty.set(1, -1) ~throws ""
    small.set(1, -1) ~is TreeList[1, -1, 3, 4, 5]
    medium.set(500, -1).get(500) ~is -1
    large.set((MAX_WIDTH ** 4) div 2, -1).get((MAX_WIDTH ** 4) div 2) ~is -1
    small_ub.set(1, -1) ~is TreeList[1, -1, 3, 4, 5]
    medium_ub.set(500, -1).get(500) ~is -1
    large_ub.set((MAX_WIDTH ** 4) div 2, -1).get((MAX_WIDTH ** 4) div 2) ~is -1

  check: // set at the end
    empty.set(100000, -1) ~throws ""
    small.set(4, -1) ~is TreeList[1, 2, 3, 4, -1]
    medium.set(1023, -1).get(1023) ~is -1
    large.set(MAX_WIDTH ** 4, -1).get(MAX_WIDTH ** 4) ~is -1
    small_ub.set(4, -1) ~is TreeList[1, 2, 3, 4, -1]
    medium_ub.set(1023, -1).get(1023) ~is -1
   // large_ub.set(MAX_WIDTH ** 4, -1).get(MAX_WIDTH ** 4) ~is -1


  // take

  check: // take 0
    empty.take(0) ~is TreeList[]
    small.take(0) ~is TreeList[]
    medium.take(0) ~is TreeList[]
    large.take(0) ~is TreeList[]
    small_ub.take(0) ~is TreeList[]
    medium_ub.take(0) ~is TreeList[]
    large_ub.take(0) ~is TreeList[]

  check: // take size
    empty.take(empty.size) ~is TreeList[]
    small.take(small.size) ~is small
    medium.take(medium.size) == medium ~is #true
    large.take(large.size) == large ~is #true
    small_ub.take(small_ub.size) ~is small_ub
    medium_ub.take(medium_ub.size) == medium_ub ~is #true
    large_ub.take(large_ub.size) == large_ub ~is #true

  check: // take small
    empty.take(1) ~throws ""
    small.take(1) ~is TreeList[1]
    medium.take(1) ~is TreeList[0]
    large.take(1) ~is TreeList[0]
    small_ub.take(1) ~is TreeList[1]
    medium_ub.take(1) ~is TreeList[0]

  check: // take medium
    empty.take(10) ~throws ""
    small.take(2) ~is TreeList[1, 2]
    medium.take(10) == TreeList[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ~is #true
    large.take(100).to_list() == List.iota(100) ~is #true
    small_ub.take(2) ~is TreeList[1, 2]
    medium_ub.take(10) == TreeList[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ~is #true

  check: // take large
    empty.take(10000).to_list() ~throws ""
    small.take(4).to_list() ~is [1, 2, 3, 4]
    medium.take(1000).to_list() == List.iota(1000) ~is #true
    large.take(10000).to_list() == List.iota(10000) ~is #true
    small_ub.take(4).to_list() ~is [1, 2, 3, 4]
    medium_ub.take(1000).to_list() == List.iota(1000) ~is #true

  check: // take error
    small.take(100) ~throws ""
    medium.take(1000000000) ~throws ""
    large.take(10000000000000000000000000000000000000000000000000000000000) ~throws ""

  // drop
    // known issues: medium and large pos drops on medium and large size vectors
  check: // drop 0
    empty.drop(0) ~is empty
    small.drop(0) ~is small
    medium.drop(0) == medium ~is #true
    large.drop(0) == large ~is #true

  check: // drop size
    empty.drop(0) ~is TreeList[]
    small.drop(small.size) ~is TreeList[]
    medium.drop(medium.size) ~is TreeList[]
    large.drop(large.size) ~is TreeList[]
    small_ub.drop(small_ub.size) ~is TreeList[]
    medium_ub.drop(medium_ub.size) ~is TreeList[]

  check: // drop small
    empty.drop(1) ~throws ""
    small.drop(1) ~is TreeList[2, 3, 4, 5]
    medium.drop(1).to_list() == List.iota(medium.size).rest ~is #true
    large.drop(1).to_list() == List.iota(large.size).rest ~is #true
    small_ub.drop(1) ~is TreeList[2, 3, 4, 5]
    medium_ub.drop(1).to_list() == List.iota(medium.size).rest ~is #true

  check: // drop medium
    empty.drop(10) ~throws ""
    small.drop(2) ~is TreeList[3, 4, 5]
    medium.drop(10).to_list() == Function.map(fun (x): x + 10, List.iota(medium.size - 10)) ~is #true
   // large.drop(100).to_list() == List.iota(100) ~is #true
    small_ub.drop(2) ~is TreeList[3, 4, 5]
    medium_ub.drop(10).to_list() == Function.map(fun (x): x + 10, List.iota(medium.size - 10)) ~is #true

  check: // drop large
    empty.drop(10000).to_list() ~throws ""
    small.drop(4).to_list() ~is [5]
    medium.drop(100).take(100).to_list() == Function.map(fun (x): x + 100, List.iota(100)) ~is #true
    large.drop(10000).take(10000).to_list() == Function.map(fun (x): x + 10000, List.iota(10000)) ~is #true
    small_ub.drop(4).to_list() ~is [5]
    medium_ub.drop(100).take(100).to_list() == Function.map(fun (x): x + 100, List.iota(100)) ~is #true

  check: // drop error
    small.drop(-1) ~throws ""
    medium.drop(-1000000000) ~throws ""
    large.drop(-10000000000000000000000000000000000000000000000000000000000) ~throws ""

// append
  check: // append identity
    (empty ++ empty :~ TreeList).to_list() ~is (empty.to_list() ++ empty.to_list())
    (small ++ small :~ TreeList).to_list() ~is (small.to_list() ++ small.to_list())
    (medium ++ medium :~ TreeList).to_list() ~is (medium.to_list() ++ medium.to_list())
    (small_ub ++ small_ub :~ TreeList).to_list() ~is (small_ub.to_list() ++ small_ub.to_list())
    (medium_ub ++ medium_ub :~ TreeList).to_list() ~is (medium_ub.to_list() ++ medium_ub.to_list())
    //(large ++ large :~ TreeList).to_list() ~is (large.to_list() ++ large.to_list())

  let i = 2
  check: // take and drop identity
    small.drop(i).take(i) ~is small.take(2 * i).drop(i)
    medium.drop(i * 2).take(i * 2) ~is medium.take(i * 4).drop(i * 2)
    small_ub.drop(i).take(i) ~is small_ub.take(2 * i).drop(i)
    medium_ub.drop(i * 2).take(i * 2) ~is medium_ub.take(i * 4).drop(i * 2)


  let (vec :~ TreeList, lst :~ List):
    for values(v :~ TreeList = TreeList[1], l :~ List = [1]):
      each i in 0..10
      match math.random(4)
      | 0: values(v.add(i), l ++ [i])
      | 1: values(v.insert(0, i), List.cons(i, l))
      | 2: values(v ++ v, l ++ l)
      | 3: values(v.set(0, -i), List.cons(-i, l.rest))

  macro '$l ++? $r':
    '($l ++ $r).to_list() == (($l).to_list() ++ ($r).to_list())'

  check: small ++? small ~is #true
         medium ++? medium ~is #true
   //      large ++? large ~is #true
         small_ub ++? small_ub ~is #true
         medium_ub ++? medium_ub ~is #true
    //     large_ub ++? large_ub ~is #true


  check: vec.to_list() ~is lst
         vec ++? vec ~is #true
         vec ++? small ~is #true
         small ++? vec ~is #true
         medium ++? vec ~is #true
         vec ++? medium ~is #true
 //        large ++? vec ~is #true
  //       vec ++? large ~is #true
         vec ++? small_ub ~is #true
         vec ++? medium_ub ~is #true
 //        vec ++? large_ub ~is #true
         small_ub ++? vec ~is #true
         medium_ub ++? vec ~is #true
 //        large_ub ++? vec ~is #true

  check: // append for uneven height vectors
    empty ++? small ~is #true
    small ++? empty ~is #true
    small ++? medium ~is #true
    medium ++? small ~is #true
//    medium ++? large ~is #true
//    large ++? medium ~is #true
    empty ++? small_ub ~is #true
    small_ub ++? empty ~is #true
    small_ub ++? medium ~is #true
    small_ub ++? medium_ub ~is #true
    medium_ub ++? small_ub ~is #true
    medium_ub ++? small ~is #true
    medium_ub ++? medium ~is #true
//    medium_ub ++? large ~is #true
//    large_ub ++? medium_ub ~is #true
//    large_ub ++? medium ~is #true

  for (i in 0 .. 100): // pop of singleton => empty
    def n = math.random(100)
    check: TreeList[n].pop()
           ~is TreeList.empty
    check: TreeList[n].add(n).pop()
           ~is TreeList[n]

  // insert
  check: // insert
    empty.insert(0, 1) ~is TreeList[1]
    small.insert(0, 1) ~is TreeList[1, 1, 2, 3, 4, 5]
    small.insert(2, 1) ~is TreeList[1, 2, 1, 3, 4, 5]
    medium.insert(0, 1) == medium.cons(1) ~is #true
    small_ub.insert(2, 1) ~is TreeList[1, 2, 1, 3, 4, 5]
    small_ub.insert(0, 1) ~is small_ub.cons(1)
    medium_ub.insert(0, 1) == medium_ub.cons(1) ~is #true
    medium_ub.insert(50, 1) == (medium_ub.sublist(0, 50).add(1) ++ medium_ub.sublist(50, medium_ub.size)) ~is #true


  check: // pop
    empty.pop() ~throws ""
    small.add(1).pop() ~is small
    medium.add(1).pop() ~is medium
    small_ub.add(1).pop() ~is small_ub
    medium_ub.add(1).pop() ~is medium_ub
    (TreeList[1, 2, 3] ++ TreeList[4, 5]).pop() ~is TreeList[1, 2, 3, 4]

  block: // regression test
    check:
      TreeList[].add_all(0..100).drop(20).add_all(0..30).to_list()
      ~is list_from(20..100) ++ list_from(0..30)
