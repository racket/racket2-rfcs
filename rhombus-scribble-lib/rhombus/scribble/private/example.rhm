#lang rhombus/static/and_meta

import:
  "typeset-example.rkt" open
  meta:
    lib("racket/base.rkt")
    lib("version/utils.rkt")

export:
  examples
  examples_stanza
  make_rhombus_eval
  close_eval

expr.macro 'examples($form, ...)':
  ~all_stx stx
  fun find_kw(want_kw,
              ~get: get = (fun (form, tail):
                             let ': $(eval_expr :: Group)' = tail
                             eval_expr)):
    for values(found_expr = #false) (form in [form, ...]):
      match form
      | '$(pattern:
             kind ~term
           | '$(kw :: Keyword)':
               match_when kw.unwrap() == want_kw
               when found_expr
               | syntax_meta.error("duplicate `~" +& kw.unwrap() +& "` clause",
                                   stx, form))
           $tail':
          get(form, tail)
      | ~else: found_expr
  let label = find_kw(#'~label)
  let eval = find_kw(#'~eval)
  let indent = find_kw(#'~indent)
  let escape = find_kw(#'~escape, ~get: fun (form, tail):
                                          match form
                                          | '~escape: $(op :: Operator)':
                                              op)
  let spacer_info_box = find_kw(#'~spacer_info_box)
  let [new_form, ...]:
    let split_forms :~ List:
      recur split(forms = [form, ...]):
        match forms
        | []: []
        | ['$('~eval' || '~label' || '~indent' || '~spacer_info_box' || '~escape'): $_', & rest]:
            split(rest)
        | ['$(tag && ('~defn' || '~repl' || '~hidden' || '~result')): $g; ...', & rest]:
            [[tag, [g, ...]], & split(rest)]
        | ['$('~error' || '~check' || '~fake'): $_', & _] :
            [['~repl', forms]]
        | ['~version_and_later $vers: $form; ...', & rest]:
            unless utils.#{valid-version?}(vers.unwrap())
            | syntax_meta.error("expected a version string", stx, vers)
            if utils.#{version<?}(base.version(), vers.unwrap())
            | split(rest)
            | split([form, ...] ++ rest)
        | ['$(kw :: Keyword) $_ ...', & _]:
            syntax_meta.error("misplaced or unrecognized keyword",
                              stx, kw)
        | ~else:
            [['~repl', forms]]
    let [info_box, ...]:
      if spacer_info_box
      | ['~spacer_info_box: spacer_info_box']
      | []
    for List ([tag, forms && [form, ...]] in split_forms,
              i: 0..):
      '(@examples_stanza(~label: $(if i == 0 | 'label' | '#false'),
                         ~eval: eval,
                         ~indent: indent,
                         ~escape: $(escape || '#,'),
                         $info_box, ...
                         $(match tag
                           | '~defn': '~no_prompt'
                           | '~hidden': '~hidden: #true'
                           | '~result': '~result_only: #true'
                           | ~else: ''),
                         $form, ...))'
        .relocate_span(forms)
  'block:
     def label = $label
     def eval = $(eval || 'make_rhombus_eval()')
     def indent = $(indent || '0')
     def spacer_info_box = $spacer_info_box
     def content = [$new_form, ...]
     $(if eval | '' | 'close_eval(eval)')
     content'

expr.macro 'examples_stanza $(parens && '($_, ...)')':
  expr_meta.pack_s_exp(['#{typeset-examples}', parens])

fun make_rhombus_eval(~lang: lang :: ModulePath || Any = ModulePath 'rhombus',
                      ~attach: attach = #true):
  let lang_s_exp:
    match lang
    | lang :: ModulePath:
        lang.s_exp()
    // Temporary compatibility:
    | ~else: lang
  #{make-rhombus-eval}(lang_s_exp, ~attach: attach)

fun close_eval(e):
  ~doc
  #{close-eval}(e)
