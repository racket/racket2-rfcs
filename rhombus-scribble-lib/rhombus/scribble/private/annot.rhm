#lang rhombus/static/and_meta
import:
  lib("scribble/core.rkt")
  lib("scribble/base.rkt")
  lib("scribble/decode.rkt")
  lib("file/convertible.rkt") as convert

export:
  Style
  Element
  Content
  PreContent
  PreFlow
  FlowBlock
  Part
  PartDecl
  Tag
  Taglet
  GeneratedTag
  TagSuffix
  TagPrefix
  StyleLike

module convert:
  export:
    convert_list
    convert_list_of_lists
    convert_pre_part

annot.macro 'Element':
  annot_meta.pack_predicate('core.#{element?}')
annot.macro 'MultiargElement':
  annot_meta.pack_predicate('core.#{multiarg-element?}')
annot.macro 'TraverseElement':
  annot_meta.pack_predicate('core.#{traverse-element?}')
annot.macro 'PartRelativeElement':
  annot_meta.pack_predicate('core.#{part-relative-element?}')
annot.macro 'DelayedElement':
  annot_meta.pack_predicate('core.#{delayed-element?}')

annot.macro 'FlowBlock':
  annot_meta.pack_predicate('core.#{block?}')

annot.macro 'Part':
  annot_meta.pack_predicate('core.#{part?}')

annot.macro 'PartDecl':
  annot_meta.pack_predicate('fun (x):
                               decode.#{title-decl?}(x)
                                 || decode.#{part-start?}(x)
                                 || decode.#{part-index-decl?}(x)
                                 || decode.#{part-collect-decl?}(x)
                                 || decode.#{part-tag-decl?}(x)')

annot.macro 'Style':
  annot_meta.pack_predicate('core.#{style?}')

annot.macro 'StyleLike':
  'Style || String || Symbol || List.of(Symbol)'

fun convert_list(v):
  match v
  | l :: List:
      for PairList (e in l): e
  | ~else:
      v

fun convert_list_of_lists(cells :~ List.of(List)):
  for PairList (row in cells):
    for PairList (cell in row):
      cell

annot.macro 'PreContent':
  annot_meta.pack_predicate('convert_pre_content')
namespace PreContent:
  export to_s_exp
  annot.macro 'to_s_exp':
    'converting(fun (v): convert_pre_content(v)) && True'

annot.macro 'Content':
  annot_meta.pack_predicate('convert_content')
namespace Content:
  export to_s_exp
  annot.macro 'to_s_exp':
    'converting(fun (v): convert_content(v)) && True'

annot.macro 'PreFlow':
  annot_meta.pack_predicate('convert_pre_flow')
namespace PreFlow:
  export to_s_exp
  annot.macro 'to_s_exp':
    'converting(fun (v): convert_pre_flow(v)) && True'

annot.macro 'Tag':
  annot_meta.pack_predicate('convert_tag')
namespace Tag:
  export to_s_exp
  annot.macro 'to_s_exp':
    'converting(fun (v): convert_tag(v)) && True'

annot.macro 'Taglet':
  annot_meta.pack_predicate('convert_taglet')
namespace Taglet:
  export to_s_exp
  annot.macro 'to_s_exp':
    'converting(fun (v): convert_taglet(v)) && True'

annot.macro 'GeneratedTag':
  'satisfying(core.#{generated-tag?})'

annot.macro 'TagSuffix':
  'String || List.of(String)'

annot.macro 'TagPrefix':
  'String || ModulePath'

fun convert_pre_content(v):
  match v
  | l :: List:
      convert_pre_content(for PairList (e in l): e)
  | l :: PairList:
      recur loop(l = l):
        match l
        | PairList[]: l
        | Pair.cons(a, b):
            let new_a = convert_pre_content(a)
            new_a && Pair.cons(new_a, loop(b))
  | _ :: satisfying(decode.#{splice?}):
      convert_pre_content(decode.#{splice-run}(v))
  | ~else:
     convert_content(v)

fun convert_content(v):
  match v
  | s :: String:
      s
  | e :: (Element || MultiargElement || TraverseElement || PartRelativeElement || DelayedElement):
      e
  | l :: List:
      convert_content(for PairList (e in l): e)
  | l :: PairList:
      recur loop(l = l):
        match l
        | PairList[]: l
        | Pair.cons(a, b):
            let new_a = convert_content(a)
            new_a && Pair.cons(new_a, loop(b))
  | p :: satisfying(convert.#{convertible?}):
      p
  | ~else:
      #false

fun convert_pre_flow(v):
  match v
  | l :: List:
      convert_pre_flow(for PairList (e in l): e)
  | l :: PairList:
      recur loop(l = l):
        match l
        | PairList[]: l
        | Pair.cons(a, b):
            let new_a = convert_pre_flow(a)
            new_a && Pair.cons(new_a, loop(b))
  | _ :: FlowBlock:
      v
  | #void:
      v
  | _ :: satisfying(decode.#{splice?}):
      convert_pre_content(decode.#{splice-run}(v))
  | ~else:
     convert_content(v)

fun convert_pre_part(v):
  match v
  | l :: List:
      convert_pre_part(for PairList (e in l): e)
  | l :: PairList:
      recur loop(l = l):
        match l
        | PairList[]: l
        | Pair.cons(a, b):
            let new_a = convert_pre_part(a)
            new_a && Pair.cons(new_a, loop(b))
  | _ :: (FlowBlock || Part || PartDecl):
      v
  | #void:
      v
  | _ :: satisfying(decode.#{splice?}):
      convert_pre_content(decode.#{splice-run}(v))
  | ~else:
     convert_content(v)

fun convert_tag(v):
  match v
  | [s :: Symbol, r :: (String || GeneratedTag || List)]:
      PairList[s, convert_list(r)]
  | ~else:
      #false

fun convert_taglet(v):
  match v
  | r :: (String || GeneratedTag || List):
      convert_list(r)
  | ~else:
      #false
