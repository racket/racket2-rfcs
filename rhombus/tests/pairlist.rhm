#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    PairList(v, ...)
    PairList.length(lst) ~method
    PairList.cons(a, d)
    PairList.get(lst, n) ~method
    PairList.first(lst)
    PairList.last(lst)
    PairList.rest(lst)
    PairList.map(lst, proc) ~method
    PairList.for_each(lst, proc) ~method
    PairList.has_element(lst, val, [eql]) ~method
    PairList.find(lst, pred) ~method
    PairList.remove(lst, val) ~method
    PairList.reverse(lst) ~method
    PairList.append(lst, ...) ~method
    PairList.drop(lst, n) ~method
    PairList.drop_last(lst, n) ~method
    PairList.take(lst, n) ~method
    PairList.take_last(lst, n) ~method
    PairList.sort(lst, [is_less]) ~method
    PairList.iota(n)
    PairList.to_list(lst) ~method
    PairList.to_sequence(lst) ~method

check:
  PairList.length(PairList[1, 2, 3])
  ~is 3

check:
  PairList.length({1, 2, 3})
  ~throws values("contract violation", "expected: PairList")

check:
  PairList[1] :: NonemptyPairList
  ~is PairList[1]

check:
  PairList[] :: NonemptyPairList
  ~throws "does not satisfy annotation"

block:
  use_static
  check:
    PairList[1, 2, 3].length()
    ~is 3
  check:
    PairList[1, 2, 3][0]
    ~is 1
  check:
    PairList[1, 2, 3].get(0)
    ~is 1
  check:
    PairList[1, 2, 3] ++ PairList[4, 5]
    ~is PairList[1, 2, 3, 4, 5]
  check:
    PairList[1, 2, 3] ++ [4, 5]
    ~throws values("contract violation", "expected: PairList")
  check:
    PairList[1, 2, 3] ++ "oops"
    ~throws values("contract violation", "expected: PairList")
  check:
    PairList[1, 2, 3].append(PairList[4, 5])
    ~is PairList[1, 2, 3, 4, 5]
  check:
    PairList[1, 2, 3].first
    ~is 1
  check:
    PairList[1, 2, 3].rest
    ~is PairList[2, 3]
  check:
    PairList(1, 2, 3).length()
    ~is 3
  check:
    def lst = PairList[1, 2, 3]
    lst.length()
    ~is 3
  check:
    def lst :: PairList = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :~ PairList = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :: PairList.of(Int) = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def PairList[v, ...] = dynamic(PairList[1, 2, 3])
    PairList[v, ...].length()
    ~is 3
  check:
    def lst :: PairList.of(PairList) = dynamic(PairList[PairList[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    def lst :: PairList.of(Int) = dynamic(PairList[1, 2, 3])
    lst.rest.length()
    ~is 2
  check:
    def lst :: NonemptyPairList.of(PairList) = dynamic(PairList[PairList[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    PairList.cons(1, PairList[2, 3])
    ~is PairList[1, 2, 3]
  check:
    PairList.cons(1, PairList[2, 3]).length()
    ~is 3

block:
  check:
    1 :: PairList
    ~throws "does not satisfy annotation"
  check:
    1 :: PairList.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: PairList.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    PairList[1, 2, 3] :: PairList.of(converting(fun (n :: Int): n+1))
    ~is PairList[2, 3, 4]
  check:
    1 :: NonemptyPairList
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyPairList.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyPairList.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    PairList[1, 2, 3] :: NonemptyPairList.of(converting(fun (n :: Int): n+1))
    ~is PairList[2, 3, 4]

block:
  check:
    dynamic(PairList[1, 2, 3]).length()
    ~is 3
  check:
    dynamic(PairList[1, 2, 3]).first
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]).rest
    ~is PairList[2, 3]
  check:
    dynamic(PairList[1, 2, 3])[0]
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]).get(0)
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]) ++ PairList[4, 5]
    ~is PairList[1, 2, 3, 4, 5]
  check:
    dynamic(PairList[1, 2, 3]) ++ [4, 5]
    ~throws "cannot append a pair list and other value"
  check:
    dynamic(PairList[1, 2, 3]) ++ "oops"
    ~throws "cannot append a pair list and other value"
  check:
    dynamic(PairList[1, 2, 3]).append(PairList[4, 5])
    ~is PairList[1, 2, 3, 4, 5]

check:
  match PairList[]
  | PairList.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match PairList[1]
  | PairList.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  use_static
  PairList[1, 2].reverse().reverse()
  ~is PairList[1, 2]

block:
  check PairList[1, 2].map(fun (x): x + 1).reverse() ~is PairList[3, 2]
  block:
    def mutable sum = 0
    check PairList[1, 2].for_each(fun (x): sum := sum + x) ~is #void
    check sum ~is 3

check:
  PairList.append(& PairList[PairList[1, 2], PairList[3], PairList[4, 5]]) ~is PairList[1, 2, 3, 4, 5]
  PairList[1, 2].append() ~is PairList[1, 2]
  PairList[1, 2].append(PairList[3]) ~is PairList[1, 2, 3]
  PairList[1, 2].append(PairList[3], PairList[4, 5]) ~is PairList[1, 2, 3, 4, 5]
  PairList[1, 2].append(3) ~throws "contract violation"

check:
  match PairList[]
  | PairList.cons(hd,tl): "no"
  | PairList[]: "empty"
  ~is "empty"

check:
  PairList[1, 2, 3].has_element(2) ~is #true
  PairList[1, 2, 3].has_element(4) ~is #false
  PairList[1, 2, 3].has_element(-3, fun (x, y): x == -y) ~is #true
  PairList[1, 2, 3].has_element(-4, fun (x, y): x == -y) ~is #false
  dynamic(PairList[1, 2, 3]).has_element(1) ~is #true
  dynamic(PairList[1, 2, 3]).has_element(-1, fun (x, y): x == -y) ~is #true

check:
  PairList[1, 2, 3].find(fun (x): x > 1) ~is 2
  PairList[1, 2, 3].find(fun (x): x > 10) ~is #false
  dynamic(PairList[1, 2, 3]).find(fun (x): x > 1) ~is 2

check:
  PairList[1, 2, 3].remove(2) ~is PairList[1, 3]
  PairList[1, 2, 3].remove(4) ~is PairList[1, 2, 3]
  PairList[1, 2, 2, 3].remove(4) ~is PairList[1, 2, 2, 3]
  dynamic(PairList[1, 2, 3]).remove(1) ~is PairList[2, 3]

check:
  PairList[1, 2, 3].drop(2) ~is PairList[3]
  PairList.drop(PairList[1, 2, 3], 2) ~is PairList[3]
  PairList[1, 2, 3].drop_last(2) ~is PairList[1]
  PairList.drop_last(PairList[1, 2, 3], 2) ~is PairList[1]
  PairList[1, 2, 3].take(2) ~is PairList[1, 2]
  PairList.take(PairList[1, 2, 3], 2) ~is PairList[1, 2]
  PairList[1, 2, 3].take_last(2) ~is PairList[2, 3]
  PairList.take_last(PairList[1, 2, 3], 2) ~is PairList[2, 3]
  PairList[1, 2, 3].take(4) ~throws values(
    "list is shorter than the number of elements to take",
    "list length", "3",
    "number to take", "4",
  )
  PairList[1, 2, 3].take_last(4) ~throws values(
    "list is shorter than the number of elements to take",
    "list length", "3",
    "number to take", "4",
  )
  PairList[1, 2, 3].drop(4) ~throws values(
    "list is shorter than the number of elements to drop",
    "list length", "3",
    "number to drop", "4",
  )
  PairList[1, 2, 3].drop_last(4) ~throws values(
    "list is shorter than the number of elements to drop",
    "list length", "3",
    "number to drop", "4",
  )

check:
  use_static
  PairList.rest(PairList[1, 2, 3]).map(math.abs)
  ~is PairList[2, 3]

check:
  use_static
  PairList.empty.has_element("no such thing")
  ~is #false

check:
  use_static
  def PairList.empty && empty = dynamic(PairList[])
  empty.has_element("no such thing")
  ~is #false

block:
  use_static
  def l = PairList[1, 2, 3]
  def l2 = l ++ l
  check l.to_list() ~is [1, 2, 3]
  check l2.to_list() ~is [1, 2, 3, 1, 2, 3]
  check l2.to_list().length() ~is 6

block:
  use_static
  def lst = PairList["a", "b", "c"]
  check:
    for List (x: PairList.to_sequence(lst)):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x: lst.to_sequence()):
      x
    ~is ["a", "b", "c"]

version_guard.at_least "8.13.0.1":
  check:
    PairList.to_sequence("oops")
    ~throws values(
      "contract violation",
      "expected: PairList",
      "given: \"oops\"",
    )
  check:
    ("oops" :~ PairList).to_sequence()
    ~throws values(
      "contract violation",
      "expected: PairList",
      "given: \"oops\"",
    )
  check:
    for List (x: PairList.to_sequence("oops")):
      x
    ~throws values(
      "contract violation",
      "expected: PairList",
      "given: \"oops\"",
    )
  check:
    for List (x: ("oops" :~ PairList).to_sequence()):
      x
    ~throws values(
      "contract violation",
      "expected: PairList",
      "given: \"oops\"",
    )

check:
  to_string(PairList[]) ~is "PairList[]"
  to_string(PairList[1, 2, 3]) ~is "PairList[1, 2, 3]"
