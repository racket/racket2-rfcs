#lang rhombus/and_meta

// Try patterns and templates that involve literal
// `$` operators, including defining `$`

check:
  '$'
  ~prints_like '$'

check:
  '$('$')'
  ~prints_like '$'

check:
  '$('...')'
  ~prints_like '...'

check:
  match '$('$') 1 + 2'
  | '$x 1 + 2': x
  ~prints_like '$'

check:
  match '$('$') 1 + 2'
  | '$('$') $x + 2': x
  ~prints_like '1'

check:
  match '($('$')) 10 + 2'
  | '($'$') $x + 2': x
  ~prints_like '10'

check:
  match ': $('$')'
  | ': $('$')': "block"
  ~is "block"

check:
  match '($('$'))'
  | '($'$')': "ok"
  ~is "ok"

check:
  match '($('...'))'
  | '($'...')': "dots"
  ~is "dots"

check:
  match '$('...') $('...') $('...')'
  | '$('...') ...': "dotss"
  ~is "dotss"

check:
  // special syntax to define `$` as a prefix operator
  expr.macro '$('$') $x': '1 + $x'
  $10
  ~is 11

check:
  // special syntax to `$` as an infix operator
  expr.macro '$x $('$') $y': '[$x, $y]'
  1 $ 2
  ~is [1, 2]

check:
  ~eval
  import: rhombus/meta open
  expr.macro '$1 + $2': '0'
  ~throws "expected operator-macro pattern"

check:
  ~eval
  import: rhombus/meta open
  expr.macro '$x $ $x': '0'
  ~throws "expected operator-macro pattern"

check:
  //  macro that acts as a template form
  expr.macro '$x =+= $y': '('$('$')$x + $('$')$y')'
  def a = '3'
  def b = '4'
  a =+= b
  ~prints_like '3 + 4'

check:
  // phase-0 binding of `$` does not affect `macro` use
  operator ($ b): b
  macro '$x + $y': '[$x, $y]'
  (1+2)
  ~is [1, 2]

check:
  ~eval
  import:
    rhombus/meta open
    meta: rhombus/meta open
  // phase-1 bindings of `$` makes `macro` bind `$`
  meta:
    operator ($ b): b
    bind.macro '$('$')': 'no'
  macro '$x + $y': '[$x, $y]'
  (1+2)
  ~is 3
