#lang rhombus
import:
  "version_guard.rhm"

check:
  match Pair.cons(7, 8)
  | Pair.cons(a, b):
      b
  | x:
      x
  | ~else:
      "other"
  ~is 8

check:
  match '(z + y, {[10, 11, 12]})'
  | '(x $a)': a
  | '($a + y, {[$n, ...]})': List.cons(a, [n, ...])
  ~matches ['z', '10', '11', '12']

block:
  let mutable cnt = 0
  fun f(x):
    // literals for initial patterns should be converted to
    // `case/equal-always` internally
    match (block:
             // check whether expression is repeatedly evaluated
             cnt := cnt + 1
             x)
    | 0: 1
    | 1: 1
    | 2: 3
    | 3: 3
    | 4: 5
    | 5: 5
    | 10: 1
    | 11: 1
    | 12: 3
    | 13: 3
    | 14: 5
    | 15: 5
    | #'apple: "other"
    | [_, ...]: "list"
  check [f(0), f(5), f(10), f(#'apple), f([])] ~is [1, 5, 1, "other", "list"]
  check cnt ~is 5

check (match 1 | 1 || 2: "yes") ~is "yes"
check (match 2 | 1 || 2: "yes") ~is "yes"
check (match 3 | 1 || 2: "yes") ~throws "no matching case"

check (match 'ok (1)' | '«ok '$x'»': "ok") ~throws "expected quotes"

version_guard.at_least "8.11.1.8":
  // check `==` semantics applies as opposed to `is_now`
  // in other words, `case/equal-always` is really used
  check:
    match Bytes.copy(#"byte string"):
    | #"byte string": "matched"
    | ~else: "unmatched"
    ~is "unmatched"

  check:
    import:
      lib("racket/base.rkt").#{string-copy}
    match #{string-copy}("string"):
    | "string": "matched"
    | ~else: "unmatched"
    ~is "unmatched"

check:
  0 matches (i :: Int when i mod 3 == 0) ~is #true
  1 matches (i :: Int unless i mod 3 == 0) ~is #true
  [1, 2, 3] matches ([x, ...] when math.sum(x, ...) == 6) ~is #true
