#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Map(k, ...)
    Map.length(m)
    Map.keys(m, [try_sort])
    Map.values(m)
    Map.has_key(m, k)
    Map.get(m, k, [default])
    Map.remove(m, k)
    MutableMap.delete(m, k)

check:
  {"a": 1, #'~b: 2}
  ~is Map(["a", 1], [#'~b, 2])

check:
  Map.length({"a": 1, "b": 2})
  ~is 2

check:
  Map.length({1, 2, 3})
  ~raises values("contract violation", "expected: ReadableMap")

block:
  use_static
  check:
    {"a": 1, "b": 2}.length()
    ~is 2
  check:
    {"a": 1, "b": 2}["a"] ~is 1
    {"a": 1, "b": 2}.get("a") ~is 1
    {"a": 1, "b": 2}.get("c", "other") ~is "other"
    {"a": 1, "b": 2}.get("c", fun (): "got other") ~is "got other"
  check:
    Map{"a": 1, "b": 2}.length()
    ~is 2
  check:
    Map(["a", 1], ["b", 2]).length()
    ~is 2
  check:
    MutableMap{"a": 1, "b": 2}.length()
    ~is 2
  check:
    MutableMap(["a", 1], ["b", 2]).length()
    ~is 2
  check:
    def map = {"a": 1, "b": 2}
    map.length()
    ~is 2
  check:
    def map :: Map = dynamic({"a": 1, "b": 2})
    map.length()
    ~is 2
  check:
    def map :~ Map = dynamic({"a": 1, "b": 2})
    map.length()
    ~is 2
  check:
    def map :: Map.of(String, Int) = dynamic({"a": 1, "b": 2})
    map.length()
    ~is 2

block:
  check:
    dynamic({"a": 1, "b": 2}).length() ~is 2
    dynamic({"a": 1, "b": 2})["a"] ~is 1
    dynamic({"a": 1, "b": 2}).get("a") ~is 1
    dynamic({"a": 1, "b": 2}).get("c", "other")  ~is "other"

// See also tests in "rest-args.rhm"
block:
  check:
    {"a": 1, "b": 2, &{"c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {"a": 1, &{"b": 2, "c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": 2, "c": 3}, "a": 1}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": 2}, "a": 1, &{"c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {"c": "oops", "b": "oops", &{"b": 2}, "a": 1, &{"c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {"b": "oops", &{"b": 2}, "c": "oops", "a": 1, &{"c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    {&{"b": "oops"}, "c": "oops", "b": 2, "a": 1, &{"c": 3}}
    ~is {"a": 1, "b": 2, "c": 3}
  check:
    def mutable x = []
    [{&(block: x := [1, x]; {"b": 2}), (block: x:= [2, x]; "a"): 1, &(block: x:= [3, x]; {"c": 3})},
     x]
    ~is [{"a": 1, "b": 2, "c": 3},
         [3, [2, [1, []]]]]
  check:
    {&"oops"}
    ~raises "not an immutable map"

block:
  def [x, ...] = [1, 2, 3]
  check:
    {x: x, ..., #true: 0}
    ~is {1: 1, 2: 2, 3: 3, #true: 0}
  check:
    {#true: 0, x: x, ...}
    ~is {1: 1, 2: 2, 3: 3, #true: 0}
  check:
    {#true: 0, &{7: 7}, x: x, ...}
    ~is {1: 1, 2: 2, 3: 3, 7: 7, #true: 0}
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [{z: #true, ...}, ...]
    ~is [{1: #true, 2: #true, 3: #true}, {4: #true, 5: #true}]

check:
  def {"x": y} = {"x": 1}
  y
  ~is 1

check:
  def Map{"x": y} = {"x": 1}
  y
  ~is 1

check:
  def Map(["x", y]) = {"x": 1}
  y
  ~is 1

check:
  def {"x": y} = {"x": 1, "y": 2}
  y
  ~is 1

check:
  def Map{"x": y} = {"x": 1, "y": 2}
  y
  ~is 1

check:
  def ex = "x"
  def {ex +& "y": y} = {"xy": 1}
  y
  ~is 1

check:
  def {"x": x, "y": y} = {"x": 1, "y": 2}
  [x, y]
  ~is [1, 2]

check:
  def {"x": x, key: val, ...} = {"x": 1, "y": 2, "z": 3}
  [{key, ...}, {val, ...}]
  ~is [{"y", "z"}, {2, 3}]

check:
  def Map{"x": x, key: val, ...} = {"x": 1, "y": 2, "z": 3}
  [{key, ...}, {val, ...}]
  ~is [{"y", "z"}, {2, 3}]

check:
  {1: "a", 2: 2, 3: 3}.keys(#true) ~is [1, 2, 3]

block:
  use_static
  check {1: "a", 2: "b"}.remove(1) ~is {2: "b"}
  check {1: "a", 2: "b"}.remove(3) ~is {1: "a", 2: "b"}
  check {1: "a", 2: "b"}.remove(1)[2] ~is "b"
  check Map.remove({1: "a", 2: "b"}, 1) ~is {2: "b"}
  check Map.remove({1: "a", 2: "b"}, 3) ~is {1: "a", 2: "b"}
  check Map.remove({1: "a", 2: "b"}, 1)[2] ~is "b"
  block:
    use_dynamic
    check dynamic({1: "a", 2: "b"}).remove(1) ~is {2: "b"}
    check dynamic({1: "a", 2: "b"}).remove(3) ~is {1: "a", 2: "b"}
    check MutableMap{1: "a", 2: "b"}.remove ~raises "no such field or method"
    check MutableMap{1: "a", 2: "b"}.remove(1) ~raises "no such field or method"
    
block:
  use_static
  let m = MutableMap{1: "a", 2: "b"}
  m.delete(1)
  check m ~is_now MutableMap{2: "b"}
  m.delete(3)
  check m ~is_now MutableMap{2: "b"}
  m[1] := "a"
  check m ~is_now MutableMap{1: "a", 2: "b"}  
  check MutableMap.delete(m, 1) ~is #void
  check m ~is_now MutableMap{2: "b"}
  check MutableMap.delete(m, 3) ~is #void
  check m ~is_now MutableMap{2: "b"}
  m[1] := "a"
  check m ~is_now MutableMap{1: "a", 2: "b"}  
  block:
    use_dynamic
    check dynamic(m).delete(1) ~is #void
    check m ~is_now MutableMap{2: "b"}
    check {1: "a", 2: "b"}.delete ~raises "no such field or method"
    check {1: "a", 2: "b"}.delete(1) ~raises "no such field or method"

block:
  let m = MutableMap{1: "a", 2: "b"}
  let n = m.copy()
  check m is_now n ~is #true
  check m == n ~is #false
  m[2] := "a"
  n[1] := "b"
  check m ~is_now MutableMap{1: "a", 2: "a"}
  check n ~is_now MutableMap{1: "b", 2: "b"}

block:
  let m = {1: "a", 2: "b"}
  let n = m.snapshot()
  check m === n ~is #true

block:
  let m = MutableMap{1: "a", 2: "b"}
  let n = m.snapshot()
  check m == n ~is #false
  check m.snapshot() == n ~is #true
  check m.snapshot() === n ~is #false

check:
  use_static
  class Posn(x, y)
  def map :: Map.of(List, Posn):
    {[#'foo]: Posn(1, 2), [1]: Posn(3, 4), [Box(2)]: Posn(4, 5)}
  for Set ((key, val): map):
    key.length() + val.y
  ~is {3, 5, 6}
  
check:
  ~eval
  use_static
  // make sure val static info isn't confused for key
  def map :: Map.of(Any, String):
    {#'foo: "foo", 1: "1", Box(2): "Box(2)"}
  for ((key, val): map):
    println(key.length() + val.length())
  ~raises "no such field or method (based on static information)"
