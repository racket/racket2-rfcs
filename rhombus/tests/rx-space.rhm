#lang rhombus/static/and_meta
import:
  lib("racket/base.rkt").pregexp

// An example use of `space.enforest`

export:
  // The main form:
  rx

  // Operators for use inside `rx'...'`:
  any
  || * ? ^ $

  // Implicit operators, like the one before a literal string;
  // we use `names` here so that these names are not
  // misinterpreted as implicits in the `export` sublangauge!
  names: #%literal #%comp #%parens #%juxtapose

// Example regexps
submodule test:
  check:
    rx'^ ("Hello" || "Hi") " "? ("Here"||"There") $'
    ~completes
  check:
    rx'(^ "Hello" || "Hi"{1, 22} || "At("any*")") $'
    ~completes
  check:
    rx'^ "https://" ((! "/"||"#")+ "/"?)* ("#" any*)? $'
    ~completes

// Instantiate enforestation and macro machinery for the
// regexp sublanguage:
space.enforest regexp:
  space_path my/space
  macro_definer macro
  meta_namespace regexp_meta:
    description "regexp"
    parse_syntax_class Parsed
    // We'll parse regexp forms directly to the `pregexp` string
    // encoding, so this is a sanity check that makes sure the
    // parsed form is a string:
    parse_checker: fun (stx, who):
                     match stx
                     | '$(s :: String)': stx
                     | _: Syntax.error("bad result", stx)
    // Improve the error for an identifier that isn't an operator
    identifier_parser: fun (id):
                         Syntax.error("identifier not allowed", id)

expr.macro '«rx '$(pat :: regexp_meta.Parsed)'»':
  'pregexp($pat)'

regexp.macro 'any': '"."'

// `#%literal` is implicitly added before literals, like strings,
// that do not have an operator before
regexp.macro '#%literal $(s :: String)':
  import lib("racket/base.rkt").#{regexp-quote}
  '$(#{regexp-quote}(s.unwrap()))'

// `#%parens` is implicitly added before parentheses
// that do not have a parsed term or operator before
regexp.macro '#%parens ($(p :: regexp_meta.Parsed))':
  p

// `#%juxtapose` is implicitly added after something that's
// parsed and before a non-operator
regexp.macro '$left #%juxtapose $right':
  ~same_as: #%call
  '$(left.unwrap() ++ right.unwrap())'

// `#%call` is implicitly added between a parsed term
// and parentheses; we want just the same thing
// as juxtaposition here, though
regexp.macro '$left #%call $tail ...':
  ~same_as: #%juxtapose
  values('$left', '#%juxtapose $tail ...')

meta:
  fun atomic(s):
    match s
    | ".": s
    | ~else: "(?:" ++ s ++ ")"

regexp.macro '$left || $right':
  ~weaker_than: ~other
  ~stronger_than: !
  '$(atomic(left.unwrap()) ++ "|" ++ atomic(right.unwrap()))'

regexp.macro '$left *':
  ~stronger_than: #%juxtapose #%call
  '$(atomic(left.unwrap()) ++ "*")'

regexp.macro '$left +':
  ~stronger_than: #%juxtapose #%call
  '$(atomic(left.unwrap()) ++ "+")'

regexp.macro '$left ?':
  ~stronger_than: #%juxtapose #%call
  '$(atomic(left.unwrap()) ++ "?")'

// `#%comp` is implicitly added between a parsed term
// and curly braces
regexp.macro #%comp:
  ~stronger_than: #%juxtapose #%call
| '$left #%comp {$(min :: Int), _}':
    '$(atomic(left.unwrap()) ++ "{" +& min.unwrap() ++ ",}")'
| '$left #%comp {$(min :: Int), $(max :: Int)}':
    '$(atomic(left.unwrap()) ++ "{" +& min.unwrap() ++ "," +& max.unwrap() ++ "}")'
| '$left #%comp {$(count :: Int)}':
    '$(atomic(left.unwrap()) ++ "{" +& count.unwrap() ++ "}")'

regexp.macro
| '^ $right':
    ~weaker_than: #%juxtapose #%call
    ~same_as: $
    '$("^" +& right.unwrap())'

regexp.macro
| '$left $('$')':
    ~weaker_than: #%juxtapose #%call
    ~same_as: ^
    '$(left.unwrap() +& "$")'

regexp.macro '! $right':
  ~weaker_than: ~other
  ~stronger_than: #%juxtpapose #%call
  '$("(?!" ++ right.unwrap() ++ ").")'
