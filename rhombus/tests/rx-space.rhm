#lang rhombus/static/and_meta
import:
  lib("racket/base.rkt").pregexp

// An example use of `space.enforest`

export:
  // The main form:
  rx

  // Operators for use inside `rx'...'`:
  any
  || * ? ^ $

  // Implicit operators, like the one before a literal string;
  // we use `names` here so that these names are not
  // misinterpreted as implicits in the `export` sublangauge!
  names: #%literal #%comp #%parens #%juxtapose

// Example regexps
module test:
  check:
    rx'^ ("Hello" || "Hi") " "? ("Here"||"There") $'
    ~completes
  check:
    rx'(^ "Hello" || "Hi"{1, 22} || "At("any*")") $'
    ~completes
  check:
    rx'^ "https://" ((! "/"||"#")+ "/"?)* ("#" any*)? $'
    ~completes
  check:
    import lib("racket/base.rkt").#{regexp-match?}
    def p = rx'"apple" || "banana"'
    #{regexp-match?}(p, "apple") && #{regexp-match?}(p, "banana")
    ~is #true    

// Instantiate enforestation and macro machinery for the
// regexp sublanguage:
space.enforest regexp:
  space_path my/space
  macro_definer macro
  meta_namespace regexp_meta:
    description "regexp"
    parse_syntax_class Parsed
    parsed_packer do_pack
    parsed_unpacker do_unpack
    // This recursive parsing is what the default checker does:
    #//
    parse_checker: fun (stx, who):
                     match stx
                     | _ when do_unpack(stx, fun (x): #false): stx
                     | (_ :: Syntax) && '$(next :: regexp_meta.Parsed)': next
                     | _: syntax_meta.error("bad result", stx)
    // Improve the error for an identifier that isn't an operator
    identifier_parser: fun (id):
                         syntax_meta.error("identifier not allowed", id)
    export pack unpack
    fun pack(s :: String) :: Syntax:
      do_pack(s)
    fun unpack(stx) :: String:
      do_unpack(stx, #false).unwrap()

expr.macro '«rx '$(pat :: regexp_meta.Parsed)'»':
  'pregexp($(regexp_meta.unpack(pat)))'

regexp.macro 'any': regexp_meta.pack(".")

// `#%literal` is implicitly added before literals, like strings,
// that do not have an operator before
regexp.macro '#%literal $(s :: String)':
  import lib("racket/base.rkt").#{regexp-quote}
  regexp_meta.pack(to_string(#{regexp-quote}(s.unwrap())))

// `#%parens` is implicitly added before parentheses
// that do not have a parsed term or operator before
regexp.macro '#%parens ($(p :: regexp_meta.Parsed))':
  p

// `#%juxtapose` is implicitly added after something that's
// parsed and before a non-operator
regexp.macro '$left #%juxtapose $right':
  ~same_as: #%call
  regexp_meta.pack("" ++ regexp_meta.unpack(left) ++ regexp_meta.unpack(right))

// `#%call` is implicitly added between a parsed term
// and parentheses; we want just the same thing
// as juxtaposition here, though
regexp.macro '$left #%call $tail ...':
  ~same_as: #%juxtapose
  values('$left', '#%juxtapose $tail ...')

meta:
  fun atomic(stx) :~ String:
    match regexp_meta.unpack(stx)
    | ".": "."
    | s: "(?:" ++ s ++ ")"

regexp.macro '$left || $right':
  ~weaker_than: ~other
  ~stronger_than: !
  regexp_meta.pack(atomic(left) ++ "|" ++ atomic(right))

regexp.macro '$left *':
  ~stronger_than: #%juxtapose #%call
  regexp_meta.pack(atomic(left) ++ "*")

regexp.macro '$left +':
  ~stronger_than: #%juxtapose #%call
  regexp_meta.pack(atomic(left) ++ "+")

regexp.macro '$left ?':
  ~stronger_than: #%juxtapose #%call
  regexp_meta.pack(atomic(left) ++ "?")

// `#%comp` is implicitly added between a parsed term
// and curly braces
regexp.macro #%comp:
  ~stronger_than: #%juxtapose #%call
| '$left #%comp {$(min :: Int), _}':
    regexp_meta.pack(atomic(left) ++ "{" +& min.unwrap() ++ ",}")
| '$left #%comp {$(min :: Int), $(max :: Int)}':
    regexp_meta.pack(atomic(left) ++ "{" +& min.unwrap() ++ "," +& max.unwrap() ++ "}")
| '$left #%comp {$(count :: Int)}':
    regexp_meta.pack(atomic(left) ++ "{" +& count.unwrap() ++ "}")

regexp.macro
| '^ $right':
    ~weaker_than: #%juxtapose #%call
    ~same_as: $
    regexp_meta.pack("^" ++ regexp_meta.unpack(right))

regexp.macro
| '$left $('$')':
    ~weaker_than: #%juxtapose #%call
    ~same_as: ^
    regexp_meta.pack(regexp_meta.unpack(left) +& "$")

regexp.macro '! $right':
  ~weaker_than: ~other
  ~stronger_than: #%juxtpapose #%call
  regexp_meta.pack("(?!" ++ regexp_meta.unpack(right) ++ ").")
