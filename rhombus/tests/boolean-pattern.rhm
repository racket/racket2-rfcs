#lang rhombus

check:
  use_static
  def x && [y] = [10]
  [[x, y], x.length()]
  ~is [[[10], 10], 1]

check:
  // static info flows from lhs to rhs
  use_static
  class Posn(x, y)
  def Posn(x, y) && z = dynamic(Posn(1, 2))
  z.x
  ~is 1

check:
  // static info doesn't go right to left
  ~eval
  use_static
  class Posn(x, y)
  def z && Posn(x, y) = dynamic(Posn(1, 2))
  z.x
  ~throws values("no such field or method", "static")

block:
  fun try(v):
    match v
    | [x] || [a, b, c]: "lists"
    | ~else: "other"
  check:
    try([1])
    ~is "lists"
  check:
    try([1, 2, 3])
    ~is "lists"
  check:
    try([])
    ~is "other"

block:
  fun try(v):
    match v
    | ![x, y]: "not two lists"
    | ~else: "two lists"
  check try([1]) ~is "not two lists"
  check try([1, 2]) ~is "two lists"
  check try([1, 2, 3]) ~is "not two lists"

check:
  import:
    rhombus/meta open
  bind.macro 'printed($pat)':
    let '$(b :: bind_meta.Parsed)' = pat
    bind_meta.pack('(printed_infoer, [$pat, $b])')
  bind.infoer 'printed_infoer($si, [$pat, $b])':
    let '($ann_str,
          $name,
          $si,
          $defs,
          $matcher,
          $committer,
          $binder,
          $data)':
      bind_meta.unpack_info(bind_meta.get_info(b, si))
    '($("printed(" +& ann_str +& ")"),
      $name,
      $si,
      $defs,
      printed_matcher,
      printed_committer,
      printed_binder,
      [$pat, $matcher, $committer, $binder, $data])'
  bind.matcher 'printed_matcher($arg, [$pat, $matcher, $_, $_, $data],
                                $IF, $success, $fail)':
    'block:
       println(#%literal $("matcher: " +& pat))
       $matcher($arg, $data,
                $IF, $success, $fail)'
  bind.committer 'printed_committer($arg, [$pat, $_, $committer, $_, $data])':
    'println(#%literal $("committer: " +& pat))
     $committer($arg, $data)'
  bind.binder 'printed_binder($arg, [$pat, $_, $_, $binder, $data])':
    'println(#%literal $("binder: " +& pat))
     $binder($arg, $data)'
  def printed([]) || printed([_]) || printed([_, _]) = []
  def printed([]) || printed([_]) || printed([_, _]) = [1]
  def printed([]) || printed([_]) || printed([_, _]) = [1, 2]
  #void
  ~prints "matcher: []"
    ++ "\n" ++ "matcher: []"
    ++ "\n" ++ "matcher: [_]"
    ++ "\n" ++ "matcher: []"
    ++ "\n" ++ "matcher: [_]"
    ++ "\n" ++ "matcher: [_, _]"
    ++ "\n"
