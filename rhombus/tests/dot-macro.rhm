#lang rhombus/and_meta

use_static

class Posn(x, y)

annot.macro 'Vector':
  annot_meta.pack_predicate('fun (x): x is_a Posn',
                            '(($(statinfo_meta.dot_provider_key), vector_dot_provider))')


dot.macro 'vector_dot_provider $left $dot $right':
  match right
  | 'angle': 'vector_angle($left)'
  | 'magnitude': 'vector_magnitude($left)'

fun vector_angle(Posn(x, y)): math.atan(y, x)
fun vector_magnitude(Posn(x, y)): math.sqrt(x*x + y*y)

let vec :: Vector: Posn(3, 4)
check:
  vec.angle
  ~is math.atan(4, 3)
check:
  vec.magnitude
  ~is 5

expr.macro 'or_zero ($p)':
  statinfo_meta.wrap('($p) || Posn(0,0)',
                     '(($(statinfo_meta.dot_provider_key),
                        vector_dot_provider))')

check:
  or_zero(Posn(3, 4)).magnitude
  ~is 5

check:
  or_zero(#false).magnitude
  ~is 0

def zero_vec = dynamic(fun(): Posn(0, 0))
statinfo.macro 'zero_vec': '(($(statinfo_meta.call_result_key),
                              $(statinfo_meta.pack('(($(statinfo_meta.dot_provider_key),
                                                      vector_dot_provider))'))))'
check:
  zero_vec().magnitude
  ~is 0

check:
  let p1 :: Posn.of(Int, Posn): Posn(1, Posn(3, 4))
  // RHS influences info for LHS:
  let Posn(px, py): p1
  py.y
  ~is 4

// checking some static-info propagation cases

dot.macro 'myint_dot_provider $left $dot $right $tail ...':
  match right
  | 'is_zero': '$left .= 0'
  | 'add': 'fun (v :~ MyInt) :~ MyInt: $left + v'

annot.macro 'MyInt':
  annot_meta.pack_predicate('fun (x): x is_a Int',
                            '(($(statinfo_meta.dot_provider_key), myint_dot_provider))')

def (one :~ MyInt) = 1

check:
  one.add(4).is_zero
  ~is #false
check:
  one.add(-1).is_zero
  ~is #true

check:
  ((one.add(4)) :~ MyInt).is_zero
  ~is #false

def two = 2 :: MyInt
check:
  two.is_zero
  ~is #false

expr.macro 'I($n)': '$n :~ MyInt'
def three = (I(3))
check:
  three.is_zero
  ~is #false

operator ((x :~ MyInt) my_plus (y :~ MyInt)) :~ MyInt:
  x.add(y)

check:
  (-2 my_plus 2).is_zero
  ~is #true

block:
  annot.macro 'MyStr':
    annot_meta.pack_predicate('fun (x): x is_a String',
                              '(($(statinfo_meta.dot_provider_key), mystr_dot_provider))')
  dot.macro 'mystr_dot_provider $left $dot $right':
    ~is_static: is_static
    match right
    | 'is_static': '$is_static'
  check:
    ("x" :: MyStr).is_static ~is #true
  check:
    use_dynamic
    ("x" :: MyStr).is_static
    ~is #false
