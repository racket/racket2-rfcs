#lang rhombus

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a
  [ex_a.alpha, ex_a.beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a:
            expose: beta
  [ex_a.alpha, beta, ex_a.beta]
  ~is ["alpha", "beta", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a:
            expose: beta
  alpha
  ~raises "alpha: undefined"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList
  [ExList(1, 2), ExList.length([1, 2, 3]),
   for ExList:
     each i: 10..12
     i]
  ~is [[1, 2], 3, [10, 11]]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList open
  length([1, 2, 3])
  ~is 3

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList open
  for ExList: "oops, no ExList"
  ~raises "expected reducer"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  [alpha, beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  ex_a.alpha
  ~raises "ex_a: undefined"

check:
  ~eval
  import:
    lib("rhombus/tests/example-a.rhm") as ex_a
    .ex_a expose: beta
  [ex_a.alpha, beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm") as ex_b
  ex_b.ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm") open
  ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm").ex_a
  ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: .List: 
            rename: cons as kons
  List.kons(1, [2])
  ~is List.cons(1, [2])

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  import: .ExList: 
            rename: cons as kons
  [ExList.kons(1, [2]),
   List.cons(1, [2])]
  ~is [List.cons(1, [2]), List.cons(1, [2])]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  block:
    import: .ExList: 
              rename: cons as kons
    [ExList.kons(1, [2]),
     List.cons(1, [2])]
  ~is [List.cons(1, [2]), List.cons(1, [2])]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha
  alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha as a
  a
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha open
  alpha
  ~raises"cannot open binding"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha:
           except: other
  "does not get here"
  ~raises "identifier to exclude is not nested within the imported name"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha
  beta
  ~raises "beta: undefined"

// This test assumes too much about the implementation of `Pair`
#//
check:
  import:
    lib("racket/base.rkt") as r:
      rename:
        cons as make_pair
      only:
        make_pair
  r.make_pair
  ~is Pair.cons

check:
  import:
    rhombus/meta.expr
    rhombus.Pair as p:
      only_space expr
      rename:
        cons as make_pair
      only:
        make_pair
  p.make_pair
  ~is Pair.cons

check:
  fun f(x, y):
    1 + block:
      import rhombus.(*) as +
      x + y - 1
  f(3, 4)
  ~is 12
