#lang rhombus

use_static

class.together:
  class Foo(x :: List.of(Bar))
  class Bar(x :: Foo)

check:
  Foo([])
  ~is Foo([])

check:
  Bar(Foo([]))
  ~is Bar(Foo([]))

check:
  Foo([Bar(Foo([]))])
  ~is Foo([Bar(Foo([]))])

check:
  Foo([1])
  ~throws "does not satisfy annotation"

check:
  Bar(1)
  ~throws "does not satisfy annotation"

check:
  Foo([Foo([])])
  ~throws "does not satisfy annotation"

check:
  class.together:
    class Tree(x :: List.of(Node))
    class Node(val, children :: Tree)

  class.together:
    class Base():
      nonfinal
    class Extend():
      extends Base

  class.together:
    interface IBase
    interface IExtend:
      extends IBase

  class.together:
    interface Interface
    class Class():
      implements Interface

  ~completes

block:
  class.together:
    class Foo():
      export: helper
      fun helper() :: Foo:
        Foo()
  check:
    Foo.helper()
    ~is Foo()
