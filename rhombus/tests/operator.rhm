#lang rhombus

operator a +* b:
  (a + b) * b
  
check:
  3 +* 4
  ~is 28

check:
  operator x mod y:
    x - math.floor(x / y) * y
  10 mod 3
  ~is 1

operator (;«x mod y»):
  x - math.floor(x / y) * y

check:
  10 mod 3
  ~is 1

// with precedence and associativity

block:
  operator (a ++* b):
    ~weaker_than: *
    ~associativity: ~right
    (a + b) * b

  check:
    3 ++* 4 * 2 ++* 5 ~is 4420
    3 ++* ((4 * 2) ++* 5) ~is 4420
  
block:
  operator ++*:
    ~weaker_than: *
    ~associativity: ~right
  | (a ++* b):
      (a + b) * b
  
  check:
    3 ++* 4 * 2 ++* 5 ~is 4420
    3 ++* ((4 * 2) ++* 5) ~is 4420
  
block:
  operator ++*:
    ~weaker_than: *
  | (a ++* b):
      ~associativity: ~right
      (a + b) * b
  
  check:
    3 ++* 4 * 2 ++* 5 ~is 4420
    3 ++* ((4 * 2) ++* 5) ~is 4420
  
block:
  operator ++*:
    ~associativity: ~right
  | (a ++* b):
      ~weaker_than: *
      (a + b) * b
  
  check:
    3 ++* 4 * 2 ++* 5 ~is 4420
    3 ++* ((4 * 2) ++* 5) ~is 4420
  
// defining a prefix operator

operator (!! b):
  ! ! b

check:
  !!#true
  ~is #true

// defining an operator that is both prefix and infix
block:
  operator
  | (** exponent):
      2 ** exponent
  | (base ** exponent):
      if exponent == 0
      | 1
      | base * (base ** (exponent-1))

  check:
    3 ** 8 ~is 6561
    ** 10 ~is 1024

// defining an operator that is both prefix and postfix
block:
  operator
  | (** exponent):
      math.expt(2, exponent)
  | (base **):
      base * base

  check:
    3 ** ~is 9
    ** 10 ~is 1024

// multi-case prefix operator
block:
  operator
  | (** (a :: Int)): "" +& a
  | (** (a :: String)): a

  check:
    ** 10 ~is "10"
    ** "apple" ~is "apple"
    ** #'sym ~throws "no matching case for arguments"

// multi-case infix operator
block:
  operator
  | (0 ** a): 0
  | (1 ** a): a

  check:
    1 ** 10 ~is 10
    0 ** "apple" ~is 0
    2 ** 10 ~throws "no matching case for arguments"

// multi-case prefix and infix
block:
  operator
  | (** (a :: Int)): "" +& a
  | (** (a :: String)): a
  | (0 ** a): 0
  | (1 ** a): a

  check:
    ** 10 ~is "10"
    ** "apple" ~is "apple"
    ** #'sym ~throws "no matching case for arguments"
    1 ** 10 ~is 10
    0 ** "apple" ~is 0
    2 ** 10 ~throws "no matching case for arguments"


// multi-case postfix
check:
  operator
  | (0 !):
      ~stronger_than: * /
      1
  | (n !): n * (n-1)!
  10!
  ~is 3628800

check:
  ~eval
  operator
  | 0 ** a: 0
  | 1 **: 1
  ~throws "combination of infix and postfix cases not allowed"

check:
  ~eval
  operator
  | (0 ** a): 0
  | (** a): 0
  | (1 **): 1
  ~throws "combination of infix and postfix cases not allowed"

check:
  ~eval
  operator
  | 0 ** a: 0
  | ** a: 0
  | 1 **: 1
  ~throws "combination of infix and postfix cases not allowed"

check:
  ~eval
  operator
  | ** **: 0
  ~throws "expected non-operator"

check:
  ~eval
  operator
  | (0 ** a): 0
  | (1 ??): 1
  ~throws "case operator does not match the initial case operator"

check:
  ~eval
  operator **:
  | (0 ** a): 0
  | (1 ??): 1
  ~throws "case operator does not match the declared operator"

check:
  ~eval
  operator
  | (0 ** a): 0
  | (1 ** b):
      ~weaker_than: +
      1
  ~throws "precedence option not allowed after first infix case"

check:
  ~eval
  operator
  | (0 **): 0
  | (1 **):
      ~weaker_than: +
      1
  ~throws "precedence option not allowed after first postfix case"

check:
  ~eval
  operator
  | (** 0): 0
  | (** 1):
      ~weaker_than: +
      1
  ~throws "precedence option not allowed after first prefix case"

check:
  ~eval
  operator **:
    ~associativity: ~none
  | (** 0): 0
  | (** 1): 1
  ~throws "associativity specified without infix cases"

check:
  ~eval
  operator
  | (0 ** a): 0
  | (1 ** b):
      ~associativity: ~left
      1
  ~throws "associativity option not allowed after first infix case"

// check postfix operator as repetition
check:
  operator n??: n
  def [a, ...] = [1, 2, 3]
  [a??, ...]
  ~is [1, 2, 3]

// check result annotations
block:
  use_static
  check:
    operator (>< (xs :: List)) :: List:
      xs.reverse()
    (>< [1, 2, 3])[0]
    ~is 3
  check:
    operator >< :: List
    | >< (xs :: List):
        xs.reverse()
    (>< [1, 2, 3])[0]
    ~is 3
  check:
    operator
    | (>< (xs :: List)) :: List:
        xs.reverse()
    (>< [1, 2, 3])[0]
    ~is 3
  check:
    operator ((xs :: List) ><) :: List:
      xs.reverse()
    ([1, 2, 3] ><)[0]
    ~is 3
  check:
    operator >< :: List
    | (xs :: List) ><:
        xs.reverse()
    ([1, 2, 3] ><)[0]
    ~is 3
  check:
    operator
    | ((xs :: List) ><) :: List:
        xs.reverse()
    ([1, 2, 3] ><)[0]
    ~is 3
  check:
    operator ((xs :: List) <> (ys :: List)) :: List:
      xs ++ ys
    ([1, 2, 3] <> [4, 5, 6])[0]
    ~is 1
  check:
    operator <> :: List
    | (xs :: List) <> (ys :: List):
        xs ++ ys
    ([1, 2, 3] <> [4, 5, 6])[0]
    ~is 1
  check:
    operator
    | ((xs :: List) <> (ys :: List)) :: List:
        xs ++ ys
    ([1, 2, 3] <> [4, 5, 6])[0]
    ~is 1

check:
  operator ? :: converting(fun (_): println("main"))
  | (? #false) :: converting(fun (_): println("prefix: false")):
      #void
  | (? #true) :: converting(fun (_): println("prefix: true")):
      #void
  | (#false ?) :: converting(fun (_): println("postfix: false")):
      #void
  | (#true ?) :: converting(fun (_): println("postfix: true")):
      #void
  ?#false
  ?#true
  #false?
  #true?
  ~prints "prefix: false\nmain\nprefix: true\nmain\npostfix: false\nmain\npostfix: true\nmain\n"

check:
  operator ? :: converting(fun (_): println("main"))
  | (? #false) :: converting(fun (_): println("prefix: false")):
      #void
  | (? #true) :: converting(fun (_): println("prefix: true")):
      #void
  | (#false ? #false) :: converting(fun (_): println("infix: false")):
      #void
  | (#true ? #true) :: converting(fun (_): println("infix: true")):
      #void
  ?#false
  ?#true
  #false?#false
  #true?#true
  ~prints "prefix: false\nmain\nprefix: true\nmain\ninfix: false\nmain\ninfix: true\nmain\n"
