#lang rhombus

namespace home:
  def x = "x"
  class Posn(x, y)
  export:
    x
    Posn
    rename: List as XList

check:
  home.x
  ~is "x"

check:
  use_static
  home.Posn(1, 2).x
  ~is 1

check:
  match home.Posn(1, 2)
  | home.Posn(x, y):
      x
  ~is 1

check:
  match home.XList(1, 2)
  | home.XList(x, y):
      for home.XList:
        each i: x..3
        i
  ~is [1, 2]

check:
  import: .home open
  match XList(1, 2)
  | XList(x, y):
      for XList:
        each i: x..3
        i
  ~is [1, 2]

check:
  import: .home open
  match Posn(1, 2)
  | Posn(x, y):
      x
  ~is 1

check:
  namespace like_home:
    export: home.x
  like_home.x
  ~is "x"

check:
  namespace n:
    let y = 11
    export:
      y
  n.y
  ~is 11

check:
  def y = 8
  namespace n:
    export:
      y
    let y = 11
  n.y
  ~is 8

check:
  namespace ~open:
    export:
      x
    def x = 10
  x
  ~is 10

check:
  namespace ~open:
    let y = 11
    export:
      y
  y
  ~is 11

check:
  import rhombus/meta open
  defn.macro 'gen':
    'namespace ~open:
       let y = 12
       export:
         y
     y'
  gen
  ~is 12

check:
  ~eval
  namespace ~open:
    export:
      nonesuch
  nonesuch
  ~throws "undefined"

check:
  import rhombus/meta open
  namespace ~open:
    export: Num
    annot.macro 'Num': 'Real'
  1 :: Num
  ~is 1
