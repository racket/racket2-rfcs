#lang rhombus
import:
  lib("racket/math.rkt").sqr
  lib("math/main.rkt") as more_math

use_static

// ---------------------------
// Positional Rest with &

check:
  math.sqrt(& [25]) ~is 5
  math.expt(& [2, 3]) ~is 8
  List(& [5, 6, 7, 8]) ~is [5, 6, 7, 8]
  math.sqrt(25, & []) ~is 5
  math.expt(2, & [3]) ~is 8
  List(5, 6, & [7, 8]) ~is [5, 6, 7, 8]

fun prlist(& xs :: List): xs

check:
  prlist(1, 2, 3)
  ~is [1, 2, 3]

fun
| altprlist(& xs :: List): xs

check:
  altprlist(4, 5, 6)
  ~is [4, 5, 6]

fun
| addition(): 0
| addition(x): x
| addition(x, & y): x + addition(& y)

check:
  addition(1, 2, 3)
  ~is 6

check:
  addition(1, & [10, 20, 30])
  ~is 61

check:
  [1, 2, & [3, 4]]
  ~is [1, 2, 3, 4]

block:
  def [a, b, & rst] = [1, 2, 3, 4]
  check a ~is 1
  check b ~is 2
  check rst ~is [3, 4]

check:
  {"a": 1, "b": 2, & {"c": 3, "d": 4}}
  ~is {"a": 1, "b": 2, "c": 3, "d": 4}

check:
  Map{"a": 1, "b": 2, & {"c": 3, "d": 4}}
  ~is {"a": 1, "b": 2, "c": 3, "d": 4}

check:
  Map(["a", 1], ["b", 2], & [["c", 3], ["d", 4]])
  ~is {"a": 1, "b": 2, "c": 3, "d": 4}

check:
  {"a", "b", & {"c", "d"}}
  ~is {"a", "b", "c", "d"}

check:
  Set{"a", "b", & {"c", "d"}}
  ~is {"a", "b", "c", "d"}

check:
  Set("a", "b", & ["c", "d"])
  ~is {"a", "b", "c", "d"}

block:
  def {"a": a, "b": b, & rst} = {"a": 1, "b": 2, "c": 3, "d": 4}
  check a ~is 1
  check b ~is 2
  check rst ~is {"c": 3, "d": 4}

block:
  def Map{"a": a, "b": b, & rst} = {"a": 1, "b": 2, "c": 3, "d": 4}
  check a ~is 1
  check b ~is 2
  check rst ~is {"c": 3, "d": 4}

// Match & rest on mutable maps produces an immutable copy
block:
  def m = MutableMap{"a": 1, "b": 2}
  def r: match m
         | MapView{"a": a, & rst}: rst
         | _: #false
  m["b"] := 3
  check r ~is {"b": 2}

block:
  fun avg(a, b):
    (a + b) / 2
  check avg(1, 5) ~is 3
  check avg(7, 9) ~is 8
  check avg(-2, 4) ~is 1

block:
  fun avg(a, & bs):
    (a + more_math.sum(bs)) / (1 + List.length(bs))
  check avg(1, 5) ~is 3
  check avg(7, 9) ~is 8
  check avg(-2, 4) ~is 1
  check avg(1, 2, 5) ~is 8/3
  check avg(-8, 5, 6, 7) ~is 5/2

// ---------------------------
// Keyword Rest with ~&

fun krmap(~& m): m

check:
  krmap(~a: 1, ~b: 2)
  ~is {#'~a: 1, #'~b: 2}

fun
| altkrmap(~& m): m

check:
  altkrmap(~a: 1, ~b: 2)
  ~is {#'~a: 1, #'~b: 2}

fun kinetic_energy(~m: m, ~v: v): (1/2) * m * sqr(v)

check:
  kinetic_energy(~m: 2, ~v: 3)
  ~is 9
check:
  kinetic_energy(~& {#'~m: 4, #'~v: 5})
  ~is 50
check:
  kinetic_energy(~m: 6, ~& {#'~v: 7})
  ~is 147
check:
  kinetic_energy(~v: 2, ~& {#'~m: 1})
  ~is 2

fun
| kws_provided(): #false
| kws_provided(~& _): #true

check:
  kws_provided()
  ~is #false
check:
  kws_provided(~a: 1, ~b: 2)
  ~is #true

fun
| krpythag(~& {#'~a: a, #'~b: b, & Map.empty}):
    math.sqrt(sqr(a) + (sqr(b)))
| krpythag(~& {#'~a: a, #'~c: c, & Map.empty}):
    math.sqrt(sqr(c) - (sqr(a)))
| krpythag(~& {#'~b: b, #'~c: c, & Map.empty}):
    math.sqrt(sqr(c) - (sqr(b)))
| krpythag(~& {#'~a: a, #'~b: b, #'~c: c, & Map.empty}):
    sqr(a) + sqr(b) == sqr(c)

check:
  krpythag(~a: 3, ~b: 4) ~is 5
  krpythag(~c: 5, ~a: 3) ~is 4
  krpythag(~c: 5, ~b: 4) ~is 3
  krpythag(~a: 3, ~b: 4, ~c: 5) ~is #true
  krpythag(~a: 3, ~b: 4, ~c: 6) ~is #false    
  krpythag(~& {#'~a: 3, #'~b: 4}) ~is 5
  krpythag(~a: 5, ~& {#'~b: 12}) ~is 13
  krpythag(~a: 8, ~b: 15, ~& {}) ~is 17
  krpythag(~b: 24, ~& {#'~a: 7}) ~is 25

fun
| pythag(~a: a, ~b: b): math.sqrt(sqr(a) + (sqr(b)))
| pythag(~a: a, ~c: c): math.sqrt(sqr(c) - (sqr(a)))
| pythag(~b: b, ~c: c): math.sqrt(sqr(c) - (sqr(b)))
| pythag(~a: a, ~b: b, ~c: c): sqr(a) + sqr(b) == sqr(c)

check:
  pythag(~a: 3, ~b: 4) ~is 5
  pythag(~c: 5, ~a: 3) ~is 4
  pythag(~c: 5, ~b: 4) ~is 3
  pythag(~a: 3, ~b: 4, ~c: 5) ~is #true
  pythag(~a: 3, ~b: 4, ~c: 6) ~is #false
  pythag(~& {#'~a: 3, #'~b: 4}) ~is 5
  pythag(~a: 5, ~& {#'~b: 12}) ~is 13
  pythag(~a: 8, ~b: 15, ~& {}) ~is 17
  pythag(~b: 24, ~& {#'~a: 7}) ~is 25

fun anyargs(& l, ~& m):
  [l, m]

check:
  anyargs("a", "b", ~c: "do", ~d: "re", ~e: "mi")
  ~is [["a", "b"], {#'~c: "do", #'~d: "re", #'~e: "mi"}]

fun anykws(~& m): m

check anykws(~a: 1, ~b: 2) ~is {#'~a: 1, #'~b: 2}

fun a_and_more(~a: _, ~& more): more

check a_and_more(~a: 1, ~b: 2, ~c: 3) ~is {#'~b: 2, #'~c: 3}

fun
| rectangle_area(~width, ~height): width * height
| rectangle_area(~diagonal, ~aspect_ratio):
    // height^2 * (aspect_ratio^2 + 1) = diagonal^2
    // width * height = aspect_ratio * height^2
    (aspect_ratio / (aspect_ratio*aspect_ratio + 1)) * diagonal * diagonal

fun
| triangle_area(~base, ~height): (1/2) * base * height
| triangle_area(~side1, ~side2, ~side3):
    def s = (1/2) * (side1 + side2 + side3)
    math.sqrt(s * (s - side1) * (s - side2) * (s - side3))

fun
| shape_area(~type: "rectangle", ~& props): rectangle_area(~& props)
| shape_area(~type: "triangle", ~& props): triangle_area(~& props)

check:
  shape_area(~type: "rectangle", ~width: 8.5, ~height: 11) ~is 93.5
  shape_area(~type: "rectangle", ~diagonal: 10, ~aspect_ratio: 4/3) ~is 48
  shape_area(~type: "rectangle", ~diagonal: 17, ~aspect_ratio: 15/8) ~is 120
  shape_area(~type: "triangle", ~base: 4.25, ~height: 11) ~is 23.375
  shape_area(~type: "triangle", ~side1: 5, ~side2: 5, ~side3: 6) ~is 12
  shape_area(~type: "triangle", ~side1: 13, ~side2: 13, ~side3: 10) ~is 60
  shape_area(~type: "triangle", ~side1: 17, ~side2: 17, ~side3: 16) ~is 120

// ---------------------------
// Repetition Rest with ...

block:
  def [x, ...] = [2, 3]
  check math.expt(x, ...) ~is 8
  check List(x, ...) ~is [2, 3]

fun rrlist(x, ...):
  [x, ...]

check:
  rrlist(1, 2, 3)
  ~is [1, 2, 3]

fun
| altrrlist(y, ...): [y, ...]

check:
  altrrlist(4, 5, 6)
  ~is [4, 5, 6]

fun
| add(): 0
| add(x): x
| add(x, y, ...): x + add(y, ...)

check:
  add(1, 2, 3)
  ~is 6

def [n :: Int, ...] = [10, 20, 30]
check:
  add(1, n, ...)
  ~is 61

check:
  add(1, List.repet([10, 20, 30]), ...)
  ~is 61

check:
  match '(1 10) (2 3 4 10) (5 6 10)'
  | '($a ... 10) ...': [[a, ...], ...]
  ~prints_like [['1'], ['2', '3', '4'], ['5', '6']]

check:
  def [s, ...] = ["a", "b", "c"]
  '(hi $s) ...'
  ~prints_like '(hi "a") (hi "b") (hi "c")'
  
check:
  '(hi $(List.repet(["a", "b", "c"]))) ...'
  ~prints_like '(hi "a") (hi "b") (hi "c")'

class Posn(x, y)

def List(p :: Posn, ...) = [Posn(1, 2), Posn(3, 4)]
check:
  [p, ...][0].x
  ~is 1

fun posns_y1(& rst):
  def List(p :: Posn, ...) = rst
  [p, ...][1].y

check:
  posns_y1(Posn(1, 2), Posn(3, 4), Posn(5, 6))
  ~is 4

fun posns_y2(& List(p :: Posn, ...)):
  [p, ...][1].y
     
check:
  posns_y2(Posn(1, 2), Posn(3, 4), Posn(5, 6))
  ~is 4

fun posns_y(p :: Posn, ...):
  [p, ...][1].y
     
check:
  posns_y(Posn(1, 2), Posn(3, 4), Posn(5, 6))
  ~is 4

// ---------------------------
// Mixing `...` and `&` and not at end

check:
  add(1, 2, &[3, 4], 5)
  ~is 15

check:
  def [x, ...] = [3, 4]
  add(1, 2, x, ..., 5)
  ~is 15

check:
  add(&[-1, 1], 2, &[3, 4], 5)
  ~is 14

check:
  def [x, ...] = [3, 4]
  add(&[-1, 1], 2, x, ..., 5)
  ~is 14

check:
  def mutable s = 0
  [add(&(block: s := [1, s]; [-1, 1]),
       (block: s := [2, s]; 2),
       &(block: s := [3, s]; [3, 4]),
       (block: s := [4, s]; 5)),
   s]
  ~is [14, [4, [3, [2, [1, 0]]]]]

// ---------------------------
// `~&` not at end

check:
  def mutable s = 0
  [triangle_area(~base: (block: s := [1, s]; 1), ~& (block: s := [2, s]; { #'~height: 10 })),
   s]
  ~is [5, [2, [1, 0]]]

check:
  def mutable s = 0
  [triangle_area(~& (block: s := [2, s]; { #'~height: 10 }), ~base: (block: s := [1, s]; 1)), 
   s]
  ~is [5, [1, [2, 0]]]

check:
  def mutable s = 0
  [anyargs(~& (block: s := [1, s]; { #'~height: 10 }),
           & (block: s := [2, s]; [9, 10, 11]),
           ~base: (block: s := [3, s]; 1),
           (block: s := [4, s]; 8)),
   s]
  ~is [[[9, 10, 11, 8], {#'~base: 1, #'~height: 10}], [4, [3, [2, [1, 0]]]]]

check:
  def mutable s = 0
  [anyargs(& (block: s := [1, s]; [9, 10, 11]),
           ~& (block: s := [2, s]; { #'~height: 10 }),
           ~base: (block: s := [3, s]; 1),
           List.repet(block: s := [4, s]; [8, 88]), ...),
   s]
  ~is [[[9, 10, 11, 8, 88], {#'~base: 1, #'~height: 10}], [4, [3, [2, [1, 0]]]]]

check:
  def mutable s = 0
  [anyargs(& (block: s := [1, s]; [9, 10, 11]),
           ~& (block: s := [2, s]; { #'~height: 10 }),
           ~base: (block: s := [3, s]; 1),
           ~& (block: s := [4, s]; { #'~width: 20 }),
           List.repet(block: s := [5, s]; [8, 88]), ...),
   s]
  ~is [[[9, 10, 11, 8, 88], {#'~base: 1, #'~height: 10, #'~width: 20}],
       [5, [4, [3, [2, [1, 0]]]]]]

check:
  anyargs(~x: 10, ~&{#'~x: 10})
  ~raises "duplicate keyword"

check:
  anyargs(~&{#'~x: 10}, ~x: 10)
  ~raises "duplicate keyword"

check:
  anyargs(~&{#'~x: 10}, ~&{#'~x: 10})
  ~raises "duplicate keyword"

check:
  anyargs(~&{#'~x: 10}, ~&{#'~y: 10}, ~&{#'~x: 10})
  ~raises "duplicate keyword"

// ---------------------------
// Combinations of Positional and Keyword Rest

// Positional rest can be either `&` rest or `...` repetition rest.
// `~&` keyword rest is compatible with either kind of positional rest,
// so `~&` and `...` are compatible even though `&` and `...` are not.
// Positional and keyword rest can be in either order.
fun anyargs_lm(& l, ~& m): [l, m]
fun anyargs_ml(~& m, & l): [l, m]
fun anyargs_rm(r, ..., ~& m): [[r, ...], m]
fun anyargs_mr(~& m, r, ...): [[r, ...], m]

for:
  each anyargs: [anyargs_lm, anyargs_ml, anyargs_rm, anyargs_mr]
  check:
    anyargs("a", "b", ~c: "do", ~d: "re", ~e: "mi")
    ~is [["a", "b"], {#'~c: "do", #'~d: "re", #'~e: "mi"}]

// ---------------------------
// Old demo tests - probably redundant, but keeping in case

block:

  fun f_rest(x, & ys :: List):
    ys

  fun f_elrest(x, y :: Int, ...):
    [y, ...]

  check:
    f_rest(10, 11, 12, 13)
    ~is [11, 12, 13]
  check:
    f_elrest(10, 11, 12, 13)
    ~is [11, 12, 13]

  fun
  | g_rest(): "no"
  | g_rest(x :: Int): "simple"
  | g_rest(x :: Int, y :: Int, ...):
     [y, ...]
  | g_rest(x): x

  check:
    g_rest()
    ~is "no"
  check:
    g_rest(1)
    ~is "simple"
  check:
    g_rest(1, 2, 3)
    ~is [2, 3]
  check:
    g_rest("hello")
    ~is "hello"

  fun
  | posns_y(p :: Posn, ...):
      [p, ...][1].y
  | posns_y(x):
      x

  check:
    posns_y(Posn(1, 2), Posn(3, 4), Posn(5, 6))
    ~is 4
  check:
    posns_y(10)
    ~is 10

// maps and sets with `...` binding

block:
  def {x: y, ...} = {1: "a", 2: "b"}
  check:
    {[x, y], ...}
    ~is {[1, "a"], [2, "b"]}
  check:
    {x, ...}
    ~is {1, 2}    
  check:
    {y, ...}
    ~is {"a", "b"}
  check:
    {y: x, ...}
    ~is {"a": 1, "b": 2}

block:
  def {2: two, x: y, ...} = {1: "a", 2: "b"}
  check:
    two
    ~is "b"
  check:
    [[x, ...], [y, ...]]
    ~is [[1], ["a"]]

block:
  def {1: one, 2: two, x: y, ...} = {1: "a", 2: "b"}
  check:
    one
    ~is "a"
  check:
    two
    ~is "b"
  check:
    [[x, ...], [y, ...]]
    ~is [[], []]

check:
  ~eval
  def {2: two, x: y, ...} = {1: "a"}
  ~raises "value does not satisfy annotation"

block:
  def {x, ...} = {1, 2}
  check:
    {[x], ...}
    ~is {[1], [2]}
  check:
    {x, ...}
    ~is {1, 2}    
  check:
    {x: "a", ...}
    ~is {1: "a", 2: "a"}

block:
  def {2, x, ...} = {1, 2}
  check:
    [x, ...]
    ~is [1]

block:
  def {1, 2, x, ...} = {1, 2}
  check:
    [x, ...]
    ~is []

check:
  ~eval
  def {2, x, ...} = {1}
  ~raises "value does not satisfy annotation"
