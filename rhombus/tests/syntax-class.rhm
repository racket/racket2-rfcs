#lang rhombus

block:
  syntax_class Arithmetic
  | '$x + $y'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.y
    ~prints_like '2'

  check:
    match '1+2'
    | '$(_ :: Arithmetic: y)': y
    ~prints_like '2'

  check:
    match '1+2'
    | '$(_ :: Arithmetic: y as expy)': expy
    ~prints_like '2'

  check:
    match '1+2'
    | '$(_ :: Arithmetic: open)': y
    ~prints_like '2'

check:
  ~eval
  syntax_class Arithmetic
  | '$x + $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp
  ~prints_like '1 + 2'

block:
  syntax_class Arithmetic
  | '$x + $y'
  | '$x - $y'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1-2'
    | '$(exp :: Arithmetic)': exp.y
    ~prints_like '2'

check:
  syntax_class Arithmetic:
    fields:
      x: kind ~term
      y
  | '$x $op $y'
  match '1+2'
  | '$(exp :: Arithmetic)': [exp.x, exp.y]
  ~prints_like ['1', '2']

check:
  ~eval
  syntax_class Arithmetic:
    fields: x y
  | '$x $op $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp.op
  ~raises "no such field"

check:
  ~eval
  syntax_class Arithmetic:
    fields x y
  | '$x $op $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp.op
  ~raises "no such field"

check:
  ~eval
  syntax_class Any:
    fields
  | '$x'
  match '1'
  | '$(any :: Any)': any.x
  ~raises "no such field"

check:
  ~eval
  syntax_class Arithmetic:
    fields: [x, ...] y
  | '$x $op $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp.op
  ~raises "field implementation does not match declared depth"

check:
  ~eval
  syntax_class Arithmetic:
    fields: y x: kind ~group
  | '$x $op $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp.op
  ~raises "field implementation does not match declared kind"

check:
  syntax_class Arithmetic:
    kind: ~group
    fields: x y: kind ~group
  | '$x $op $(y :: Group)'
  ~completes

block:
  syntax_class Arithmetic
  | '$x + $y':
      field sum: Syntax.make(Syntax.unwrap(x) + Syntax.unwrap(y))
      field [num, ...]: [x, y]

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': exp.sum
    ~prints_like '3'

  check:
    match '1+2'
    | '$(exp :: Arithmetic)': [exp.num, ...]
    ~prints_like ['1', '2']

block:
  syntax_class Foo
  | 'a ($x, ...) z'

  check:
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ~prints_like ['1', '2', '3']

  check:
    match '[a (1, 2, 3) z, a () z, a ("x", "y") z]'
    | '[$(f :: Foo), ...]': [[f.x, ...], ...]
    ~prints_like [['1', '2', '3'], [], ['"x"', '"y"']]

  check:
    match 'a (1, 2, 3) z'
    | '$(whole :: Foo: x as f)': [f, ...]
    ~prints_like ['1', '2', '3']

block:
  syntax_class Foo
  | 'a $x ...'

  check:
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ~prints_like ['(1, 2, 3)', 'z']

// check that right-hand side of pattern
// is in a more nested scope than pattern variables
block:
  syntax_class Foo
  | 'a $x':
      def x = "whatever"
  check:
    match 'a 1'
    | '$(f :: Foo)': f.x
    ~prints_like '1'

// check that syntax class description appears in match error
block:
  check:
    ~eval
    import:
      rhombus/meta open
    meta:
      syntax_class Arithmetic:
        description: "an expression with addition or subtraction"
      | '$x + $y'
      | '$x - $y'
    expr.macro 'right_operand $(e :: Arithmetic)':
      values(e.y, '')
    right_operand 1 +
    ~raises "expression with addition or subtraction"

block:
  syntax_class Foo
  | '$x + $y'
  | '$x + $y + $z'
  check:
    match '1 + 2'
    | '$(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']
  check:
    match '10 + 20 + 30'
    | '$(f :: Foo)': [f.x, f.y]
    ~prints_like ['10', '20']

check:
  ~eval
  import:
    rhombus/meta open
  syntax_class Foo
  | '$x + $y'
  | '$x + $y + $z'
  match '10 + 20 + 30'
  | '$(f :: Foo)': f.z
  ~raises "no such field or method"

block:
  syntax_class Foo:
    kind: ~sequence
  | '$x + $y'
  check:
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']

block:
  syntax_class Foo:
    kind: ~term
  | '($x + $y)'
  check:
    match '0 + (1 + 2)'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']

check:
  ~eval
  syntax_class Foo:
    kind: ~term
  | '$x + $y'
  ~raises "not a single-term pattern"

block:
  syntax_class Foo:
    kind: ~group
  | '$x + $y'
  check:
    match '(1 + 2)'
    | '($(f :: Foo))': [f.x, f.y]
    ~prints_like ['1', '2']

block:
  syntax_class Foo:
    kind: ~group
  | '$g'
  check:
    match '(1 + 2)'
    | '($(f :: Foo))': f.g
    ~prints_like '1 + 2'

block:
  check:
    syntax_class Foo:
      kind: ~group
    | '$x + $y'
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ~prints_like ['1', '2']

block:
  check:
    ~eval
    syntax_class Foo:
      kind: ~group
    | '$x + $y'
    match '0 + 1 + 2 + 3'
    | '0 + $(f :: Foo) + 3': [f.x, f.y]
    ~raises "syntax class incompatible with this context"

block:
  syntax_class Foo:
    kind: ~multi
  | '$x + $y
     $z - $w'
  check:
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', '1 + 2; 3 - 4']
  check:
    match '(1 + 2,
            3 - 4)'
    | '($(f :: Foo))': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', '1 + 2; 3 - 4']

block:
  syntax_class Foo:
    kind: ~block
  | ': $x + $y
       $z - $w'
  check:
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ~prints_like ['1', '2', '3', '4', ': 1 + 2; 3 - 4']

check:
  ~eval
  syntax_class Foo:
    kind: ~block
  | '($x + $y,
      $z - $w)'
  ~raises "not a block pattern"

block:
  syntax_class Foo:
    kind: ~multi
  | '($x, $y)'
  check:
    match '((1 + 2, 3 - 4))'
    | '($(f :: Foo))': f
    ~prints_like '(1 + 2, 3 - 4)'
  check:
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    | ~else: "no"
    ~is "no"
  check:
    match '(1 + 2, 3 - 4)'
    | '$(f :: Foo)': f
    | ~else: "no"
    ~prints_like '(1 + 2, 3 - 4)'

block:
  syntax_class Foo:
    kind: ~multi
  | '$x'
  check:
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    ~prints_like '1 + 2; 3 - 4'
  check:
    match ': 1 + 2; 3 - 4; 5 / 6'
    | ': $(f :: Foo)': f
    ~prints_like '1 + 2; 3 - 4; 5 / 6'

block:
  syntax_class Foo
  | '$x $y':
      match_when y.unwrap() == 1
      field case: '1'
  | '$x $y':
      match_unless y.unwrap() == 5
      field case: '2'
  | '$x $y':
      field case: '3'
  check:
    def '$(f :: Foo)': 'a 1'
    [f.x, f.y, f.case]
    ~prints_like ['a', '1', '1']
  check:
    def '$(f :: Foo)': 'b 100'
    [f.x, f.y, f.case]
    ~prints_like ['b', '100', '2']
  check:
    def '$(f :: Foo)': 'c 5'
    [f.x, f.y, f.case]
    ~prints_like ['c', '5', '3']
   
block:
  syntax_class Foo
  | '$x $y':
      match_def '(1 + 1)': y
      field case: '1'
      field z: '0'
  | '$x $y':
      match_def '(1 + $z)': y
      field case: '2'
  | '$x $y':
      field case: '3'
      field z: 'no'
  check:
    def '$(f :: Foo)': 'a 1'
    [f.x, f.y, f.case, f.z]
    ~prints_like ['a', '1', '3', 'no']
  check:
    def '$(f :: Foo)': 'b (1 * 1)'
    [f.x, f.y, f.case, f.z]
    ~prints_like ['b', '(1 * 1)', '3', 'no']
  check:
    def '$(f :: Foo)': 'b (1 + 4)'
    [f.x, f.y, f.case, f.z]
    ~prints_like ['b', '(1 + 4)', '2', '4']
   
check:
  syntax_class Option:
    kind: ~term
  | '~lang':
      field form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form, ...]
  ~prints_like ['~lang', '~lang']

check:
  syntax_class Option
  | '~lang':
      field form: '~lang'
  | '~lang ~and':
      field form: '~and'
  match '(~lang, ~lang ~and)'
  | '($(o :: Option), ...)': [o.form, ...]
  ~prints_like ['~lang', '~and']

check:
  ~eval
  syntax_class Option:
    kind: ~term
  | '~lang':
      field form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  ~raises "field is a repetition"

check:
  ~eval
  syntax_class Option
  | '~lang':
      field form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  ~raises "field is a repetition"

block:
  syntax_class NTerms
  | '~one $a':
      field b = '0'
      field c = '0'
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      field average:
        '$(sum / 2)'
  | '~two $a $b':
      field c:
        '0'
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      field average:
        '$(sum / 2)'
  | '~three $a $b $c':
      def sum:
        Syntax.unwrap(a) + Syntax.unwrap(b) + Syntax.unwrap(c)
      field average:
        '$(sum / 2)'

  def '$(two_terms :: NTerms)' = '~two 24 42'
  check:
    two_terms.a
    ~prints_like '24'
  check:
    two_terms.c
    ~prints_like '0'
  check:
    two_terms.average
    ~prints_like '33'

// check that dotted syntax-class names work
block:
  namespace N:
    export Arithmetic
    syntax_class Arithmetic
    | '$x + $y'

  check:
    match '1+2'
    | '$(exp :: N.Arithmetic)': exp.x
    ~prints_like '1'

  check:
    match '1+2'
    | '$(exp :: N.Arithmetic)': exp.y
    ~prints_like '2'

// empty pattern is a special case
block:
  syntax_class Maybe
  | '1'
  | ''

  check:
    def '$(x :: Maybe) 2' = '2'
    x
    ~prints_like ''

  check:
    def '$(x :: Maybe) 2' = '1 2'
    x
    ~prints_like '1'

block:
  syntax_class House(material)
  | '< < > >':
      field stuff: Syntax.make(material +& "!")
  check:
    def '$(x :: House("straw"))' = '< < > >'
    x.stuff
    ~prints_like '"straw!"'

check:
  ~eval
  syntax_class House(material) | '< < > >'
  def '$(x :: House)' = #false
  ~raises "syntax class expects arguments"

check:
  ~eval
  syntax_class Horse | '!!!'
  def '$(x :: Horse(1))' = #false
  ~raises "syntax class does not expect arguments"

// field value does not have to be syntax
check:
  syntax_class Foo
  | '$x':
      field [y, ...] = [1, #'~q, 3]
  match 'x'
  | '$(f :: Foo)': [f.y, ...]
  ~is [1, #'~q, 3]    

// a field used both as a non-syntax and a sytax field
block:
  syntax_class Foo
  | '$x':
      field [y, ...] = [1, #'~q, 3]
  | '$x $y ...'
  check:
    match 'x'
    | '$(f :: Foo)': [f.y, ...]
    ~is [1, #'~q, 3]
  check:
    match 'x 1 2 3'
    | '$(f :: Foo)': [f.y, ...]
    ~prints_like ['1', '2', '3']
  check:
    match 'x'
    | '$(f :: Foo)': '($f.y, ...)'
    ~prints_like '(1, ~q, 3)'

// mixing tail and non-tail modes for a field is allowed,
// even though it disables optimization for the tail case
block:
  syntax_class Foo:
    kind: ~group
  | '$x ($y + 1) ...'
  | '$x $y ...'
  check:
    match 'x (1 + 1) (2 + 1) 3'
    | '$(f :: Foo)': [f.y, ...]
    ~prints_like ['(1 + 1)', '(2 + 1)', '3']
  check:
    match 'x (1 + 1) (2 + 1) (3 + 1)'
    | '$(f :: Foo)': [f.y, ...]
    ~prints_like ['1', '2', '3']

// inline syntax class
block:
  fun m(stx):
    def '$(f2 :: (syntax_class:
                  | '9 $x $_'
                  | '8 $x':
                      match_when #true)); ...' = stx
    [f2.x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 8 2')
    ~prints_like ['1', '2']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']
  check:
    m('9 1')
    ~raises "value does not satisfy annotation"

// opening an inline syntax class
block:
  fun m(stx):
    def '$(f2 :: (syntax_class:
                  | '9 $x $_'
                  | '8 $x':
                      match_when #true):
             open); ...' = stx  
    [x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']

// pattern shorthand unquote
block:
  fun m(stx):
    def '$(pattern
           | '9 $x $_'
           | '8 $x':
               match_when #true); ...' = stx
    [x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']

block:
  fun m(stx):
    def '$(pattern:
             kind ~sequence
           | '9 $x $_'
           | '8 $x':
               match_when #true); ...' = stx
    [x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']

block:
  fun m(stx):
    def '$(pattern match
           | '9 $x $_'
           | '8 $x':
               match_when #true); ...' = stx
    [match.x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']

block:
  fun m(stx):
    def '$(pattern match:
             kind ~sequence
           | '9 $x $_'
           | '8 $x':
               match_when #true); ...' = stx
    [match.x, ...]
  check:
    m('8 1')
    ~prints_like ['1']
  check:
    m('8 1; 9 2 3')
    ~prints_like ['1', '2']

// pattern shorthand binding
block:
  fun m(stx):
    def [pattern
         | '9 $x $_'
         | '8 $x':
             match_when #true, ...] = stx
    [x, ...]
  check:
    m(['8 1'])
    ~prints_like ['1']
  check:
    m(['8 1', '9 2 3'])
    ~prints_like ['1', '2']

block:
  fun m(stx):
    def [pattern:
           kind ~sequence
         | '9 $x $_'
         | '8 $x':
             match_when #true, ...] = stx
    [x, ...]
  check:
    m(['8 1'])
    ~prints_like ['1']
  check:
    m(['8 1', '9 2 3'])
    ~prints_like ['1', '2']

// The following two tests currently do not work due to how
// repetitions are handled.  If these are to be fixed, the
// corresponding `::` forms should also be fixed.
#//
block:
  fun m(stx):
    def [pattern match
         | '9 $x $_'
         | '8 $x':
             match_when #true, ...] = stx
    [match.x, ...]
  check:
    m(['8 1'])
    ~prints_like ['1']
  check:
    m(['8 1', '9 2 3'])
    ~prints_like ['1', '2']

#//
block:
  fun m(stx):
    def [pattern match:
           kind ~sequence
         | '9 $x $_'
         | '8 $x':
             match_when #true, ...] = stx
    [match.x, ...]
  check:
    m(['8 1'])
    ~prints_like ['1']
  check:
    m(['8 1', '9 2 3'])
    ~prints_like ['1', '2']

// check interaction of macro introduction and pattern variables
block:
  import rhombus/meta open
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern | '$('$')x $('$')$ex'): x»'
    matcher x
    ~prints_like '1'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern | '$('$')x $('$')$ex'): $ex»'
    matcher x
    ~prints_like '2'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern | '$('$')$ex $('$')x'): x»'
    matcher x
    ~prints_like '2'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern | '$('$')$ex $('$')x'): $ex»'
    matcher x
    ~prints_like '1'

// field names are recognized symbolically
// Is this the expected behavior?  I think it is.
block:
  import rhombus/meta open
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern who | '$('$')x $('$')$ex'): who.x»'
    matcher x
    ~prints_like '2'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern who | '$('$')x $('$')$ex'): who . $ex»'
    matcher x
    ~prints_like '2'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern who | '$('$')$ex $('$')x'): who.x»'
    matcher x
    ~prints_like '2'
  check:
    expr.macro 'matcher $(ex :: Term)':
      '«match '1 2'
        | (pattern who | '$('$')$ex $('$')x'): who . $ex»'
    matcher x
    ~prints_like '2'

// infer ~multi mode
check:
  syntax_class C
  | '$a; $b'
  def '$(c :: C)': '1; 2'
  [c.a, c.b]
  ~prints_like ['1', '2']

// should infer ~term mode, but is there a way to tell?
check:
  syntax_class C
  | 'a'
  def '1 $(c :: C) 3': '1 a 3'
  ~completes

// root_swap
check:
  syntax_class C:
    root_swap: second terms
  | '$_ $second'
  match '1 2'
  | '$(c :: C)':
      [c, c.terms]
  ~prints_like ['2', '1 2']

check:
  ~eval
  syntax_class C:
    root_swap: unknown terms
  | '$_ $second'
  ~raises "field to swap as root not found"

check:
  ~eval
  syntax_class C:
    root_swap: second first
  | '$first $second'
  ~raises "field for root already exists"


check:
  syntax_class.together:
    syntax_class ModPath:
      fields:
        [elem, ...]
    | '$head':
        field [elem, ...]: [head]
    | '$head / $(mp :: ModPath)':
        field [elem, ...] = [head, mp.elem, ...]
  match 'a / b / c'
  | '$(mp :: ModPath)':
      [mp.elem, ...]
  ~prints_like ['a', 'b', 'c']


// field name in root-swapped syntax class should not be
// confused with a pattern variable using the syntax
check:
  syntax_class C:
    root_swap: a term
  | '$(a :: Term)'
  syntax_class D
  | '$(c :: C) $a' // `c :: C` doesn;t bind `a`
  ~completes
