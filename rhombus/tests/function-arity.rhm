#lang rhombus/and_meta

defn.macro 'static $check: $form; ...; $raises $msg':
  '$check:
     ~eval
     use_static
     $form; ...
     $raises values($msg, "static")
   $check:
     ~eval
     $form; ...
     $(Syntax.make(#'~completes, raises))'

static check:
  fun f(x): x
  fun (): f()
  ~throws "wrong number of arguments"

static check:
  fun f(x): x
  fun (): f(1, 2)
  ~throws "wrong number of arguments"

static check:
  fun f(x): x
  fun (): f(1, ~flavor: "vanilla")
  ~throws "keyword argument not recognized"

static check:
  fun f(x, ~flavor): x
  fun (): f(1)
  ~throws "missing keyword argument in function call"

static check:
  fun f(x, & y): x
  fun (): f()
  ~throws "wrong number of arguments"

static check:
  fun f(x, ~flavor, ~& kws): x
  fun (): f(1, ~color: "red")
  ~throws "missing keyword argument in function call"

static check:
  class Posn(x, y):
    method m(): x
  fun (): Posn.m()
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    nonfinal
    method m(): x
  fun (): Posn.m()
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    nonfinal
    method m(): x
  fun (): Posn.m(1, 2)
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    method m(): x
  fun (): Posn(1, 2).m(0)
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    method m(): x
    method n(): m(1)
  ~throws "wrong number of arguments"
  
static check:
  class Posn(x, y):
    nonfinal
    method m(): x
  fun (): Posn(1, 2).m(0)
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    nonfinal
    method m(): x
  class Posn3D(z):
    extends Posn
  fun (): Posn3D(1, 2, 3).m(0)
  ~throws "wrong number of arguments"

static check:
  interface Pointy:
    method m(): 0
    method n(): m(1)
  ~throws "wrong number of arguments"

static check:
  interface Pointy:
    method m(): 0
  class Posn(x, y):
    implements Pointy
  fun (): Posn(1, 2).m(0)
  ~throws "wrong number of arguments"

static check:
  class Posn(x, y):
    property | p: 10
  fun (): Posn(1, 2).p := 11
  ~throws "property does not support assignment"
  
static check:
  class Posn(x, y):
    property | p: 10
  fun (): Posn.p(Posn(1, 2), 11)
  ~throws "wrong number of arguments in function call"

check:
  ~eval
  class Posn(x, y):
    property | p: 10
    method m(): p := 11
  ~throws "property does not support assignment"
  
static check:
  class Posn(x, y):
    nonfinal
    property | p: 10
  fun (): Posn(1, 2).p := 11
  ~throws "property does not support assignment"
  
static check:
  class Posn(x, y):
    nonfinal
    property | p: 10
  fun (): Posn.p(Posn(1, 2), 11)
  ~throws "wrong number of arguments in function call"

static check:
  class Posn(x, y):
    nonfinal
    method m(): 0
  class Posn3D(z):
    extends Posn
    method n(): super.m(1)
  ~throws "wrong number of arguments in method call"

static check:
  class Posn(x, y):
    nonfinal
    property | p: 0
  class Posn3D(z):
    extends Posn
    method n(): super.p := 1
  ~throws "property does not support assignment"

static check:
  class Posn(x, y):
    nonfinal
    abstract property | p
  class Posn3D(z):
    extends Posn
    nonfinal
    method n(): this.p := 1
  ~throws "property does not support assignment"

static check:
  class Posn(x, y):
    constructor (z):
      super(z+1, z-1)
  fun (): Posn(1, 2)
  ~throws "wrong number of arguments in function call"
