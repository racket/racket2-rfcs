#lang rhombus

import:
  "check.rhm" open
  racket/math.sqr
  racket/base.#{object-name} as object_name
  racket/base.#{procedure-arity} as procedure_arity
  racket/base.#{procedure-keywords} as procedure_keywords

begin:
  fun
  | f([]): 0
  | f(a): 1
  | f(): 2
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2

begin:
  fun
  | f([]): 0
  | f(): 2
  check:
    ~exn
    f([1])
    "fun: no matching case for arguments"

begin:
  fun f([] = [1]): 0
  check:
    ~exn
    f()
    // TODO: fix error message to be about pattern matching
    "fun: argument does not satisfy annotation"

begin:
  fun f([] = [], & rst): rst
  check:
    ~exn
    f("a")
    // TODO: fix error message to be about pattern matching
    "fun: argument does not satisfy annotation"

begin:
  /*
  fun
  | f([] = [1]): 0
  | f(a): 1
  | f(): 2
  */
  val f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0()
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2

begin:
  /*
  fun
  | f([] = []): 0
  | f(a): 1
  */
  val f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0()
        | _: c2()
  check: f([]); 0
  check: f(); 0
  check: f("a"); 1

begin:
  /*
  fun
  | ([] = [1], & rst): 0
  | (a): 1
  | (): 2
  */
  val f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0([])
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2
  check: f([], [1]); 0

begin:
  /*
  fun
  | ([] = [], & rst): 0
  | (a): 1
  */
  val f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0([])
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 0
  check: f([], [1]); 0

// ---------------------------------------------------------
// Alt Functions with Keywords

fun
| pythag(~a: a, ~b: b): sqrt(sqr(a) + (sqr(b)))
| pythag(~a: a, ~c: c): sqrt(sqr(c) - (sqr(a)))
| pythag(~b: b, ~c: c): sqrt(sqr(c) - (sqr(b)))
| pythag(~a: a, ~b: b, ~c: c): sqr(a) + sqr(b) == sqr(c)

check: pythag(~a: 3, ~b: 4); 5
check: pythag(~c: 5, ~a: 3); 4
check: pythag(~c: 5, ~b: 4); 3
check: pythag(~a: 3, ~b: 4, ~c: 5); #true
check: pythag(~a: 3, ~b: 4, ~c: 6); #false
begin:
  check: object_name(pythag); symbol(pythag)
  check: procedure_arity(pythag); 0
  val values(req_kws, all_kws): procedure_keywords(pythag)
  check: req_kws; []
  check: all_kws; [keyword(~a), keyword(~b), keyword(~c)]

