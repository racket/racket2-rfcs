#lang rhombus

import:
  "check.rhm" open
  racket/math.sqr
  racket/base.#{object-name} as object_name
  racket/base.#{procedure-arity} as procedure_arity
  racket/base.#{procedure-keywords} as procedure_keywords
  math

class Posn(x, y)

fun map(f, l):
  for List:
    ~each e: l
    f(e)

begin:
  fun
  | f([]): 0
  | f(a): 1
  | f(): 2
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2

begin:
  fun
  | f([]): 0
  | f(): 2
  check:
    ~exn
    f([1])
    "fun: no matching case for arguments"

begin:
  fun f([] = [1]): 0
  check:
    ~exn
    f()
    // TODO: fix error message to be about pattern matching
    "fun: argument does not satisfy annotation"

begin:
  fun f([] = [], & rst): rst
  check:
    ~exn
    f("a")
    // TODO: fix error message to be about pattern matching
    "fun: argument does not satisfy annotation"

begin:
  /*
  fun
  | f([] = [1]): 0
  | f(a): 1
  | f(): 2
  */
  val f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0()
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2

begin:
  /*
  fun
  | f([] = []): 0
  | f(a): 1
  */
  val f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0()
        | _: c2()
  check: f([]); 0
  check: f(); 0
  check: f("a"); 1

begin:
  /*
  fun
  | ([] = [1], & rst): 0
  | (a): 1
  | (): 2
  */
  val f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0([])
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 2
  check: f([], [1]); 0

begin:
  /*
  fun
  | ([] = [], & rst): 0
  | (a): 1
  */
  val f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0([])
        | _: c2()
  check: f([]); 0
  check: f([1]); 1
  check: f(); 0
  check: f([], [1]); 0

fun
| distance(x, y): sqrt(x*x + y*y)
| distance(x1, y1, x2, y2): distance(x2 - x1, y2 - y1)

check: distance(3, 4); 5
check: distance(10, 5, 18, 20); 17

fun
| avg(a :: Number, & bs -: List.of(Number)):
    (a + math.sum(bs)) / (1 + List.length(bs))
| avg(a :: Posn, & bs -: List.of(Posn)):
    Posn(avg(a.x, & map(Posn.x, bs)),
         avg(a.y, & map(Posn.y, bs)))

check: avg(1, 2, 5); 8/3
check: avg(-8, 5, 6, 7); 5/2
check: avg(Posn(1, 7), Posn(5, 9)); Posn(3, 8)
check: avg(Posn(0, 0), Posn(1, 3), Posn(2, 0)); Posn(1, 1)

// ---------------------------------------------------------
// Alt Functions with Keywords

fun
| pythag(~a: a, ~b: b): sqrt(sqr(a) + (sqr(b)))
| pythag(~a: a, ~c: c): sqrt(sqr(c) - (sqr(a)))
| pythag(~b: b, ~c: c): sqrt(sqr(c) - (sqr(b)))
| pythag(~a: a, ~b: b, ~c: c): sqr(a) + sqr(b) == sqr(c)

check: pythag(~a: 3, ~b: 4); 5
check: pythag(~c: 5, ~a: 3); 4
check: pythag(~c: 5, ~b: 4); 3
check: pythag(~a: 3, ~b: 4, ~c: 5); #true
check: pythag(~a: 3, ~b: 4, ~c: 6); #false
begin:
  check: object_name(pythag); symbol(pythag)
  check: procedure_arity(pythag); 0
  val values(req_kws, all_kws): procedure_keywords(pythag)
  check: req_kws; []
  check: all_kws; [keyword(~a), keyword(~b), keyword(~c)]

fun
| rectangle_area(~width, ~height): width * height
| rectangle_area(~diagonal, ~aspect_ratio):
    // height^2 * (aspect_ratio^2 + 1) = diagonal^2
    // width * height = aspect_ratio * height^2
    (aspect_ratio / (aspect_ratio*aspect_ratio + 1)) * diagonal * diagonal

check: rectangle_area(~width: 8.5, ~height: 11); 93.5
check: rectangle_area(~diagonal: 10, ~aspect_ratio: 4/3); 48
check: rectangle_area(~diagonal: 17, ~aspect_ratio: 15/8); 120

