#lang rhombus

import:
  lib("racket/math.rkt").sqr
  lib("racket/base.rkt").#{object-name} as object_name
  lib("racket/base.rkt").#{procedure-arity} as procedure_arity
  lib("racket/base.rkt").#{procedure-keywords} as procedure_keywords
  lib("math/main.rkt") as more_math

class Posn(x, y)

fun map(f, l):
  for List:
    each e: l
    f(e)

block:
  fun
  | f([]): 0
  | f(a): 1
  | f(): 2
  check f([]) ~is 0
  check f([1]) ~is 1
  check f() ~is 2

block:
  fun
  | f([]): 0
  | f(): 2
  check:
    f([1]) ~throws "f: no matching case for arguments"

block:
  fun f([] = [1]): 0
  check:
    f() ~throws "f: argument does not satisfy annotation"

block:
  fun f([] = [], & rst): rst
  check:
    f("a") ~throws "f: argument does not satisfy annotation"

block:
  /*
  fun
  | f([] = [1]): 0
  | f(a): 1
  | f(): 2
  */
  def f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0()
        | _: c2()
  check f([]) ~is 0
  check f([1]) ~is 1
  check f() ~is 2

block:
  /*
  fun
  | f([] = []): 0
  | f(a): 1
  */
  def f:
    let c0: fun(): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1):
        match tmp1
        | []: c0()
        | _: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0()
        | _: c2()
  check f([]) ~is 0
  check f() ~is 0
  check f("a") ~is 1

block:
  /*
  fun
  | ([] = [1], & rst): 0
  | (a): 1
  | (): 2
  */
  def f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: [1]
        match tmp2
        | []: c0([])
        | _: c2()
  check f([]) ~is 0
  check f([1]) ~is 1
  check f() ~is 2
  check f([], [1]) ~is 0

block:
  /*
  fun
  | ([] = [], & rst): 0
  | (a): 1
  */
  def f:
    let c0: fun(rst): 0
    let c1: fun(a): 1
    let c2: fun(): 2
    fun
    | (tmp1, & rst):
        match [tmp1, rst]
        | [[], _]: c0(rst)
        | [_, []]: c1(tmp1)
    | ():
        let tmp2: []
        match tmp2
        | []: c0([])
        | _: c2()
  check f([]) ~is 0
  check f([1]) ~is 1
  check f() ~is 0
  check f([], [1]) ~is 0

fun
| distance(x, y): math.sqrt(x*x + y*y)
| distance(x1, y1, x2, y2): distance(x2 - x1, y2 - y1)

check: distance(3, 4); ~is 5
check: distance(10, 5, 18, 20); ~is 17

fun
| avg(a :: Number, & bs :~ List.of(Number)):
    (a + more_math.sum(bs)) / (1 + List.length(bs))
| avg(a :: Posn, & bs :~ List.of(Posn)):
    Posn(avg(a.x, & map(Posn.x, bs)),
         avg(a.y, & map(Posn.y, bs)))

check: avg(1, 2, 5); ~is 8/3
check: avg(-8, 5, 6, 7); ~is 5/2
check: avg(Posn(1, 7), Posn(5, 9)); ~is Posn(3, 8)
check: avg(Posn(0, 0), Posn(1, 3), Posn(2, 0)); ~is Posn(1, 1)

// ---------------------------------------------------------
// Alt Functions with Keywords

fun
| pythag(~a: a, ~b: b): math.sqrt(sqr(a) + (sqr(b)))
| pythag(~a: a, ~c: c): math.sqrt(sqr(c) - (sqr(a)))
| pythag(~b: b, ~c: c): math.sqrt(sqr(c) - (sqr(b)))
| pythag(~a: a, ~b: b, ~c: c): sqr(a) + sqr(b) == sqr(c)

check pythag(~a: 3, ~b: 4) ~is 5
check pythag(~c: 5, ~a: 3) ~is 4
check pythag(~c: 5, ~b: 4) ~is 3
check pythag(~a: 3, ~b: 4, ~c: 5) ~is #true
check pythag(~a: 3, ~b: 4, ~c: 6) ~is #false
block:
  check object_name(pythag) ~is #'pythag
  check procedure_arity(pythag) ~is 0
  def values(req_kws, all_kws) = procedure_keywords(pythag)
  check req_kws ~is []
  check all_kws ~is [#'~a, #'~b, #'~c]

fun
| rectangle_area(~width, ~height): width * height
| rectangle_area(~diagonal, ~aspect_ratio):
    // height^2 * (aspect_ratio^2 + 1) = diagonal^2
    // width * height = aspect_ratio * height^2
    (aspect_ratio / (aspect_ratio*aspect_ratio + 1)) * diagonal * diagonal

check rectangle_area(~width: 8.5, ~height: 11) ~is 93.5
check rectangle_area(~diagonal: 10, ~aspect_ratio: 4/3) ~is 48
check rectangle_area(~diagonal: 17, ~aspect_ratio: 15/8) ~is 120

