#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    List(v, ...)
    List.length(lst) ~method
    List.cons(a, d)
    List.add(lst, a) ~method
    List.get(lst, i) ~method
    List.set(lst, i, v) ~method
    List.first(lst)
    List.last(lst)
    List.rest(lst)
    List.map(lst, proc) ~method
    List.for_each(lst, proc) ~method
    List.has_element(lst, val, [eql]) ~method
    List.find(lst, pred) ~method
    List.remove(lst, val) ~method
    List.delete(lst, i) ~method
    List.insert(lst, i, val) ~method
    List.reverse(lst) ~method
    List.append(lst, ...) ~method
    List.drop(lst, n) ~method
    List.drop_last(lst, n) ~method
    List.take(lst, n) ~method
    List.take_last(lst, n) ~method
    List.sublist(lst, n, m) ~method
    List.sort(lst, [is_less]) ~method
    List.iota(n)
    List.to_list(lst) ~method
    List.to_sequence(lst) ~method

check:
  List.length([1, 2, 3])
  ~is 3

check:
  List.length({1, 2, 3})
  ~throws values("contract violation", "expected: List")

check:
  [1] :: NonemptyList
  ~is [1]

check:
  [] :: NonemptyList
  ~throws "does not satisfy annotation"

block:
  use_static
  check:
    [1, 2, 3].length()
    ~is 3
  check:
    [1, 2, 3][0]
    ~is 1
  check:
    [1, 2, 3].get(0)
    ~is 1
  check:
    [1, 2, 3].set(1, "two")
    ~is [1, "two", 3]
  check:
    [1, 2, 3] ++ [4, 5]
    ~is [1, 2, 3, 4, 5]
  check:
    [1, 2, 3] ++ PairList[4, 5]
    ~throws values("contract violation", "expected: List")
  check:
    [1, 2, 3] ++ "oops"
    ~throws values("contract violation", "expected: List")
  check:
    [1, 2, 3].append([4, 5])
    ~is [1, 2, 3, 4, 5]
  check:
    [1, 2, 3].first
    ~is 1
  check:
    [1, 2, 3].rest
    ~is [2, 3]
  check:
    List(1, 2, 3).length()
    ~is 3
  check:
    def lst = [1, 2, 3]
    lst.length()
    ~is 3
  check:
    def lst :: List = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :~ List = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :: List.of(Int) = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def [v, ...] = dynamic([1, 2, 3])
    [v, ...].length()
    ~is 3
  check:
    def lst :: List.of(List) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    def lst :: List.of(Int) = dynamic([1, 2, 3])
    lst.rest.length()
    ~is 2
  check:
    def lst :: NonemptyList.of(List) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    List.cons(1, [2, 3])
    ~is [1, 2, 3]
  check:
    List.cons(1, [2, 3]).length()
    ~is 3

block:
  check:
    1 :: List
    ~throws "does not satisfy annotation"
  check:
    1 :: List.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: List.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    [1, 2, 3] :: List.of(converting(fun (n :: Int): n+1))
    ~is [2, 3, 4]
  check:
    1 :: NonemptyList
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyList.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyList.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    [1, 2, 3] :: NonemptyList.of(converting(fun (n :: Int): n+1))
    ~is [2, 3, 4]

block:
  use_static
  def lst :: List.later_of(String) = ["a", "b", 3]
  check lst[0] ~is "a"
  check lst[1] ~is "b"
  check lst[2] ~throws "current element does not satisfy annotation"
  check (lst ++ ["d", "e"])[3] ~is "d"
  check (["z"] ++ lst)[0] ~is "z"
  check (["z"] ++ lst)[3] ~throws "current element does not satisfy annotation"
  check lst ++ ["d", 5] ~throws "appended element does not satisfy annotation"
  check [0] ++ lst ~throws "appended element does not satisfy annotation"
  check lst.add("z")[3] ~is "z"
  check lst.add(100) ~throws "new element does not satisfy annotation"

check:
  ~eval
  [] :: List.later_of(ReadableString.to_string)
  ~throws "converter annotation not supported for elements"

block:
  check:
    dynamic([1, 2, 3]).length()
    ~is 3
  check:
    dynamic([1, 2, 3]).first
    ~is 1
  check:
    dynamic([1, 2, 3]).rest
    ~is [2, 3]
  check:
    dynamic([1, 2, 3])[0]
    ~is 1
  check:
    dynamic([1, 2, 3]).get(0)
    ~is 1
  check:
    dynamic([1, 2, 3]) ++ [4, 5]
    ~is [1, 2, 3, 4, 5]
  check:
    dynamic([1, 2, 3]) ++ PairList[4, 5]
    ~throws "cannot append a list and other value"
  check:
    dynamic([1, 2, 3]) ++ "oops"
    ~throws "cannot append a list and other value"
  check:
    dynamic([1, 2, 3]).append([4, 5])
    ~is [1, 2, 3, 4, 5]

check:
  match []
  | List.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match [1]
  | List.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  use_static
  [1, 2].reverse().reverse()
  ~is [1, 2]

block:
  check [1, 2].map(fun (x): x + 1).reverse() ~is [3, 2]
  block:
    def mutable sum = 0
    check [1, 2].for_each(fun (x): sum := sum + x) ~is #void
    check sum ~is 3

check:
  List.append(& [[1, 2], [3], [4, 5]]) ~is [1, 2, 3, 4, 5]
  [1, 2].append() ~is [1, 2]
  [1, 2].append([3]) ~is [1, 2, 3]
  [1, 2].append([3], [4, 5]) ~is [1, 2, 3, 4, 5]
  [1, 2].append(3) ~throws "contract violation"

check:
  match []
  | List.cons(hd,tl): "no"
  | []: "empty"
  ~is "empty"

check:
  [1, 2, 3].has_element(2) ~is #true
  [1, 2, 3].has_element(4) ~is #false
  [1, 2, 3].has_element(-3, fun (x, y): x == -y) ~is #true
  [1, 2, 3].has_element(-4, fun (x, y): x == -y) ~is #false
  dynamic([1, 2, 3]).has_element(1) ~is #true
  dynamic([1, 2, 3]).has_element(-1, fun (x, y): x == -y) ~is #true

check:
  [1, 2, 3].find(fun (x): x > 1) ~is 2
  [1, 2, 3].find(fun (x): x > 10) ~is #false
  dynamic([1, 2, 3]).find(fun (x): x > 1) ~is 2

check:
  [1, 2, 3].remove(2) ~is [1, 3]
  [1, 2, 3].remove(4) ~is [1, 2, 3]
  [1, 2, 2, 3].remove(4) ~is [1, 2, 2, 3]
  dynamic([1, 2, 3]).remove(1) ~is [2, 3]

check:
  [1, 2, 3].insert(2, "x") ~is [1, 2, "x", 3]
  [1, 2, 3].insert(3, "x") ~is [1, 2, 3, "x"]
  [1, 2, 3].insert(0, "x") ~is ["x", 1, 2, 3]
  dynamic([1, 2, 3]).insert(1, "x") ~is [1, "x", 2, 3]

check:
  [1, 2, 3].delete(2) ~is [1, 2]
  [1, 2, 3].delete(0) ~is [2, 3]
  dynamic([1, 2, 3]).delete(1) ~is [1, 3]

check:
  [1, 2, 3].drop(2) ~is [3]
  List.drop([1, 2, 3], 2) ~is [3]
  [1, 2, 3].drop_last(2) ~is [1]
  List.drop_last([1, 2, 3], 2) ~is [1]
  [1, 2, 3].take(2) ~is [1, 2]
  List.take([1, 2, 3], 2) ~is [1, 2]
  [1, 2, 3].take_last(2) ~is [2, 3]
  List.take_last([1, 2, 3], 2) ~is [2, 3]
  [1, 2, 3, 4, 5, 6].sublist(2, 5) ~is [3, 4, 5]
  List.sublist([1, 2, 3, 4, 5, 6], 2, 5) ~is [3, 4, 5]

check:
  [1, 2, 3].sort() ~is [1, 2, 3]
  List.sort([1, 2, 3]) ~is [1, 2, 3]
  [1, 2, 3].sort(fun (x, y): x > y) ~is [3, 2, 1]
  List.sort([1, 2, 3], fun (x, y): x > y) ~is [3, 2, 1]
  ["", "a", "ab"].sort() ~is ["", "a", "ab"]
  List.sort(["", "a", "ab"]) ~is ["", "a", "ab"]
  ["", "a", "ab"].sort(fun (x, y): x > y) ~is ["ab", "a", ""]
  List.sort(["", "a", "ab"], fun (x, y): x > y) ~is ["ab", "a", ""]

check:
  use_static
  List.rest([1, 2, 3]).map(math.abs)
  ~is [2, 3]

check:
  use_static
  List.empty.has_element("no such thing")
  ~is #false

check:
  use_static
  def List.empty && empty = dynamic([])
  empty.has_element("no such thing")
  ~is #false

block:
  def l = [1, 2, 3]
  def l2 = l ++ l
  check l.to_list() === l ~is #true
  check l2.to_list() === l2 ~is #true

block:
  use_static
  def lst = ["a", "b", "c"]
  check:
    for List (x: List.to_sequence(lst)):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x: lst.to_sequence()):
      x
    ~is ["a", "b", "c"]

version_guard.at_least "8.13.0.1":
  check:
    List.to_sequence("oops")
    ~throws values(
      "contract violation",
      "expected: List",
      "given: \"oops\"",
    )
  check:
    ("oops" :~ List).to_sequence()
    ~throws values(
      "contract violation",
      "expected: List",
      "given: \"oops\"",
    )
  check:
    for List (x: List.to_sequence("oops")):
      x
    ~throws values(
      "contract violation",
      "expected: List",
      "given: \"oops\"",
    )
  check:
    for List (x: ("oops" :~ List).to_sequence()):
      x
    ~throws values(
      "contract violation",
      "expected: List",
      "given: \"oops\"",
    )

check:
  to_string([]) ~is "[]"
  to_string([1, 2, 3]) ~is "[1, 2, 3]"

check:
  let [a, b, ...] = [1, 2, 3]
  [a, [b, ...]]
  ~is [1, [2, 3]]

check:
  let [a, ..., b] = [1, 2, 3]
  [[a, ...], b]
  ~is [[1, 2], 3]

check:
  let [a, b, ...] = [1]
  let [c, ..., d] = [2]
  [a, [b, ...], [c, ...], d]
  ~is [1, [], [], 2]

check:
  let [a, b, ..., c, d] = [1, 2, 3, 4, 5, 6]
  [a, [b, ...], c, d]
  ~is [1, [2, 3, 4], 5, 6]

check:
  let [a, & b, c, d] = [1, 2, 3, 4, 5, 6]
  [a, b, c, d]
  ~is [1, [2, 3, 4], 5, 6]

block:
  fun f(x, ...):
    match [x, ...]
    | [1, a, ...]: {a, ...}
    | [2, a, ...]: [a, ...]
    | [3, a, ..., 4]: [a, ...]
    | [x, & y, z]: [x, y, z]
  check f(1, 2, 3) ~is {2, 3}
  check f(2, 3, 4, 5) ~is [3, 4, 5]
  check f(3, 4, 5, 6, 4) ~is [4, 5, 6]
  check f(3, 4) ~is []
  check f(3, 4, 5, 6) ~is [3, [4, 5], 6]

check:
  ~eval
  def [x, ..., y, ...] = [1, 2]
  ~throws "second splice or repetition not allowed"

check:
  ~eval
  def [& x, y, ...] = [1, 2]
  ~throws "second splice or repetition not allowed"

check:
  ~eval
  def [x, ..., & y, z] = [1, 2]
  ~throws "second splice or repetition not allowed"
