#lang rhombus

use_static

class O(v):
  nonfinal

class A():
  nonfinal
  implements Indexable
  override method get(index) :: O:
    O(index)
  method get_self(index):
    this[index].v

class B():
  nonfinal
  extends A
  implements MutableIndexable
  field saved = #false
  override method set(index, val):
    saved := [index, val]
    #void

class C():
  extends B

class A2():
  implements MutableIndexable
  field saved = #false
  override method get(index) :: O:
    O(index)
  override method set(index, val):
    saved := [index, val]
    if index == "bad"
    | "bad"
    | #void

interface I3:
  extends MutableIndexable

class A3():
  implements I3
  field saved = #false
  override method get(index) :: O:
    O(index)
  override method set(index, val):
    saved := [index, val]
    if index == "bad"
    | "bad"
    | #void

class A4():
  private implements Indexable
  private override method get(index) :: O:
    O(index)

check:
  A()[0].v ~is 0
  A().get_self(7) ~is 7
  B()[2].v ~is 2
  C()[4].v ~is 4
  A2()[3].v ~is 3
  A2()["good"] := #'ok ~is #void
  A2()["bad"] := #'no ~throws values(
    "result does not satisfy annotation",
    "Void",
  )
  A3()[0].v ~is 0
  (A3() :: I3)[0] ~is O(0)
  A4()[10].v ~is 10

block:
  def b = B()
  check:
    b[0] := 1 ~is #void
    b.saved ~is [0, 1]

block:
  def c = C()
  check:
    c[0] := 1 ~is #void
    c.saved ~is [0, 1]

check:
  A() is_a Indexable ~is #true
  B() is_a Indexable ~is #true
  C() is_a Indexable ~is #true
  A4() is_a Indexable ~is #true
  4 is_a Indexable ~is #false
  A() is_a MutableIndexable ~is #false
  A2() is_a MutableIndexable ~is #true
  A4() is_a MutableIndexable ~is #false

  { 1: 2 } is_a Indexable ~is #true
  { 1, 2 } is_a Indexable ~is #true
  Array(1, 2) is_a Indexable ~is #true
  [1, 2] is_a Indexable ~is #true
  "apple" is_a Indexable ~is #true
  #"apple" is_a Indexable ~is #true

  #'apple is_a Indexable ~is #false

  { 1: 2 } is_a MutableIndexable ~is #false
  { 1, 2 } is_a MutableIndexable ~is #false
  Array(1, 2) is_a MutableIndexable ~is #true
  [1, 2] is_a MutableIndexable ~is #false
  "apple" is_a MutableIndexable ~is #false
  #"apple" is_a MutableIndexable ~is #false

  { 1: 2 }.copy() is_a MutableIndexable ~is #true
  { 1, 2 }.copy() is_a MutableIndexable ~is #true
  #"apple".copy() is_a MutableIndexable ~is #true
