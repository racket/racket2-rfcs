#lang rhombus/and_meta

block:
  import "static_arity.rhm"
  static_arity.check:
    Syntax.make(t, [ctx])
    Syntax.make_group(t, [ctx])
    Syntax.make_sequence(t, [ctx])
    Syntax.unwrap(stx)
    Syntax.unwrap_sequence(stx)
    Syntax.make_id(t, [ctx])
    Syntax.make_temp_id([t])

check:
  Syntax.make(1) ~prints_like '1'
  Syntax.make([1, 2]) ~throws "invalid as a shrubbery term"
  Syntax.make([#'parens, [#'group, 1, "a", #'z]]) ~prints_like '(1 "a" z)'
  Syntax.make([#'parens,
               [#'group, 1],
               [#'group, "a"],
               [#'group, [#'op, #'#{+}]]]) ~prints_like '(1, "a", +)'
  Syntax.make([#'parens, '1', '"a"', '+']) ~prints_like '(1, "a", +)'
  Syntax.make([#'parens, '1 2 3', '"a"', '4 + 5']) ~prints_like '(1 2 3, "a", 4 + 5)'
  Syntax.make(['block', '1 2', '3']) ~prints_like ': 1 2; 3'
  Syntax.make(['block']) ~prints_like ':«»'

check:
  Syntax.make_group([1, 2]) ~prints_like '1 2'
  Syntax.make_group(['block', ['block', '1 2', '3']]) ~prints_like 'block: 1 2; 3'
  Syntax.make_group([': a', ': b']) ~throws "invalid as a shrubbery non-tail term representation"
  Syntax.make_group(['any', ['block', '1 2', '3'], 'more']) ~throws "invalid as a shrubbery non-tail term"
  Syntax.make_group(['any', ['alts', ['block', '1 2', '3']], 'more']) ~throws "invalid as a shrubbery non-tail term"
  Syntax.make_group([': a', '| b']) ~prints_like ':« a » | b'
  Syntax.make_group([['block', 'a'], ['alts', ['block', '1 2', '3']]]) ~prints_like ':« a » | 1 2 ; 3'

check:
  Syntax.make_group([]) ~throws "NonemptyList"

check:
  Syntax.make_temp_id("hello", ~keep_name: #true) ~prints_like 'hello'

check:
  Syntax.make([#'parens, Syntax.make_group([1])])
  ~prints_like '(1)'

check:
  Syntax.make_sequence(['a', 'b c', 'd e f'])
  ~prints_like 'a; b c; d e f'

check:
  Syntax.unwrap('x') ~is #'x
  Syntax.unwrap('1 1') ~throws "multi-term syntax not allowed in term context"
  Syntax.unwrap('(1 2 3)') ~prints_like ['parens', '1 2 3']
  Syntax.unwrap('(1, 2, 3)') ~prints_like ['parens', '1', '2', '3']
  Syntax.unwrap_group('1 2 3') ~prints_like ['1', '2', '3']
  Syntax.unwrap_group('1 2; 3 4') ~throws "multi-group syntax not allowed in group context"
  Syntax.unwrap_sequence('1 2; 3 4 5') ~prints_like ['1 2', '3 4 5']
  Syntax.unwrap_sequence('1 2') ~prints_like ['1 2']
  Syntax.unwrap_sequence('1') ~prints_like ['1']
  Syntax.unwrap_all('(1 2, 3 4)') ~is [#'parens, [#'group, 1, 2], [#'group, 3, 4]]

block:
  import:
    lib("shrubbery/parse.rkt")
    lib("racket/base.rkt")
  def orig_x = Syntax.unwrap(parse.#{parse-all}(base.#{open-input-string}("x")))[1]
  check:
    Syntax.is_original(orig_x) ~is #true
    orig_x.is_original() ~is #true
    Syntax.make_temp_id("x").is_original() ~is #false

block:
  def x = 'x'
  def xy =  'x y'
  def xyz =  'x y
              z'
  check x.srcloc().span ~is 1
  check xy.srcloc().span ~is 3
  check xy.srcloc().line ~is x.srcloc().line + 1
  check xy.srcloc().column ~is x.srcloc().column + 2
  check xyz.srcloc().line ~is x.srcloc().line + 2
  check xyz.srcloc().column ~is x.srcloc().column + 3
  
check:
  match 'a: *'
  | 'a: $b': b is_a Operator
  ~is #true

check:
  match 'a: b'
  | 'a: $b': b is_a Identifier
  ~is #true

check:
  ~eval
  module m ~lang rhombus/and_meta:
    meta:
      import: rhombus.check
      check:
        syntax_meta.equal_binding('check', 'check') ~is #true
        syntax_meta.equal_binding('check', 'def') ~is #false
        syntax_meta.equal_binding('check', 'check', expr_meta.space, 0, 2) ~is #false
        syntax_meta.equal_name_and_scopes('check', 'check') ~is #true
        syntax_meta.equal_name_and_scopes('check', 'check', 0) ~is #true
        syntax_meta.expanding_phase() ~is 0
  ~completes

check:
  ~eval
  module m ~lang rhombus/and_meta:
    meta:
      import: rhombus.check
      namespace ns1:
        import rhombus.Pair.cons
        export x
        def x = 'cons'
      namespace ns2:
        import rhombus.List.cons
        export x
        def x = 'cons'
      namespace ns3:
        import rhombus.List.cons
        export x
        def x = 'cons'
      check:
        syntax_meta.equal_binding(ns1.x, ns2.x, expr_meta.space, 1) ~is #false
        syntax_meta.equal_binding(ns3.x, ns2.x, expr_meta.space, 1) ~is #true
        syntax_meta.equal_name_and_scopes(ns1.x, ns2.x, 1) ~is #false
        syntax_meta.equal_name_and_scopes(ns3.x, ns2.x, 1) ~is #false
      check:
        syntax_meta.equal_binding('+', '+') ~is #true
        syntax_meta.equal_binding('*', '+') ~is #false
        syntax_meta.equal_binding('List.cons', 'List.cons') ~is #true
        syntax_meta.equal_binding('List.cons', 'Pair.cons') ~is #false
        syntax_meta.equal_binding('List.cons', 'List.first') ~is #false
        syntax_meta.equal_binding('List.(+)', 'List.(+)') ~is #true
        syntax_meta.equal_binding('List.(+)', 'Pair.(+)') ~is #false
        syntax_meta.equal_binding('List.(+)', '+') ~is #false
  ~completes

check:
  ~eval
  module m ~lang rhombus/and_meta:
    import: rhombus.check
    expr.macro 'with_y: $expr':
      ~op_stx h
      def y: 'y'.replace_scopes('$h')
      'block:
         def $y: 2
         $expr'
    check: (with_y: y) ~is 2
  ~completes

// check some static information
check:
  use_static
  Syntax.unwrap_group('x y z')[1].unwrap()
  'x y z'.unwrap_group()[1].unwrap()
  Syntax.srcloc('x').line
  'x'.srcloc().line
  ~completes
