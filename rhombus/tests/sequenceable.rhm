#lang rhombus/static/and_meta

class Posn(x, y):
  nonfinal
  implements Sequenceable
  override method to_sequence():
    Sequence.make(~initial_position: 0,
                  ~continue_at_position: fun (i): i < 2,
                  ~position_to_next: fun (i): i + 1,
                  ~position_to_element: fun (i):
                                          if i == 0
                                          | y
                                          | x)
  sequence '$lhs: $rhs':
    '(~outer_binds:
        p = $rhs,
      ~recur_binds:
        pos = 0,
      ~head_guard:
        pos < 2,
      ~inner_binds:
        $lhs = if pos == 0 | Posn.y(p) | Posn.x(p),
      ~recur_args:
        (pos + 1))'
  method self_iterate():
    for (x: this):
      x

class Posn3D(z):
  extends Posn

check:
  for List:
    each j: Posn(1, 2)
    j
  ~is [2, 1]

check:
  for List:
    each j: Posn3D(1, 2, 3)
    j
  ~is [2, 1]

interface Sql:
  extends Sequenceable
  internal _Sql
  property ex
  property why
  sequence '$lhs: $rhs':
    '(~outer_binds:
        p = $rhs,
      ~recur_binds:
        pos = 0,
      ~head_guard:
        pos < 2,
      ~inner_binds:
        $lhs = if pos == 0 | (p :~ _Sql).why | (p :~ _Sql).ex,
      ~recur_args:
        (pos + 1))'

class Posn2(x, y):
  implements Sql
  override method to_sequence():
    error("don't use this")
  override property ex: -x
  override property why: -y

check:
  for List:
    each j: Posn2(1, 2)
    j
  ~is [-2, -1]


class Posn3(x, y):
  internal _Posn3
  private implements Sql
  private override method to_sequence():
    error("don't use this")
  private override property ex: -x
  private override property why: -y

check:
  for List:
    each j: (Posn3(1, 2) :: _Posn3)
    j
  ~is [-2, -1]

class Posn4(x, y):
  nonfinal
  implements Sequenceable
  override method to_sequence():
    Sequence.make(~initial_position: 0,
                  ~continue_at_position: fun (i): i < 2,
                  ~position_to_next: fun (i): i + 1,
                  ~position_to_element: fun (i):
                                          if i == 0
                                          | y*10
                                          | x*10)
  sequence '$lhs: $rhs':
    #false

check:
  for List:
    each j: Posn4(1, 2)
    j
  ~is [20, 10]

// make sure static info is propagated from `~outer_binds`
// and `~inner_binds`, at least when the `each` binding
// is immediate
check:
  class Posn(x, y):
    sequence '$lhs: $rhs':
      '(~outer_binds:
          df0 = $rhs
          df = [[df0.x, df0.y]]
          nr :: List = df[0],
        ~outer_check:
          "ok",
        ~recur_binds:
          i = 0,
        ~head_guard:
          i < nr[0],
        ~inner_binds:
          $lhs = df[i], // :~ List here would not propagate to body
        ~recur_args:
          (i + 1))'
    static_info:
      let list_info:
        let '$(a :: annot_meta.Parsed)': 'List.of(String)'
        let values(_, _, si) = annot_meta.unpack_converter(a)
        si
      '(($statinfo_meta.index_result_key, $(statinfo_meta.pack(list_info))))'
  for List:
    each elem: Posn(1, 2)
    elem[0]
  ~is [1]
