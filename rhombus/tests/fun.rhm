#lang rhombus

class Posn(x, y)

fun
| size(n :: Int):
    n
| size(p :: Posn):
    p.x + p.y
| size(a, b):
    a+b

check:
  size(Posn(8, 6))
  ~is 14

check:
  size(1, 2)
  ~is 3

def Posn(px, py) :~ Posn = Posn(1, 2)

check:
  List(px, py)
  ~is [1, 2]

def identity = fun (x): x
check:
  identity(1 + (fun (x): x) (99) )
  ~is 100
check:
  identity(1+(fun (x): x)(99))
  ~is 100

// function result contracts

fun add1(x) :: Int:
  match x
  | n :: Int : x + 1
  | ~else: x

check:
  add1(100)
  ~is 101

check:
  add1("oops")
  ~raises "result does not satisfy annotation"

fun
| add_two(x) :: Number:
    x + 2.0
| add_two(x, y) :: String:
    x +& " and " +& y

check:
  add_two(7) .= 9.0
  ~is #true

check:
  add_two(6, 7)
  ~is "6 and 7"

check:
  block:
    def f = fun (x) :: Int: x
    f(10)
  ~is 10

fun on_diag(n :: Int) :: Posn:
  Posn(n, n)

check:
  use_static
  on_diag(1).x
  ~is 1

check:
  use_static
  def known_posn = on_diag(2)
  known_posn.x
  ~is 2

// `match` variant

fun size2 :: Int:
| size2("wrong"):
    "oops"
| size2(n :: Int):
    n
| size2(p :: Posn):
    p.x + p.y
| size2(a, b):
    a+b

check:
  size2(10) ~is 10
  size2(Posn(1, 2)) ~is 3
  size2("wrong") ~raises "does not satisfy annotation"

block:
  use_static
  fun flip :: Posn:
  | flip(Posn(x, y)):
      Posn(y,x)
  | flip(x):
      Posn(0, x)
  check:
    flip(Posn(1, 2)) ~is Posn(2, 1)
    flip(Posn(1, 2)).y ~is 1
    flip(9) ~is Posn(0, 9)

check:
  fun size3:
  | size3(_): "not yet implemented"
  size3(10)
  ~is "not yet implemented"

block:
  def long_form_one = (fun
                       | (): 1)
  def longer_form_one = (fun :: Int
                         | (): 1)
  check:
    long_form_one() ~is 1
    longer_form_one() ~is 1

block:
  check:
    fun f() :: values(Int, Int):
      values(0, 1)
    def (x, y) = f()
    [x, y]
    ~is [0, 1]
  check:
    fun f() :: (Int, Int):
      values(0, 1)
    def (x, y) = f()
    [x, y]
    ~is [0, 1]
  check:
    use_static
    fun f() :: (Int, List):
      values(0, [1, 2])
    def (x, y) = f()
    y[0]
    ~is 1

block:
  check:
    fun f() :: (Int, Int):
      values(0, "oops")
    def (x, y) = f()
    10
    ~raises "results do not satisfy annotation"
  check:
    fun f() :: (Int, Int):
      0
    f()
    ~raises "results do not satisfy annotation"
  check:
    ~eval
    fun oops():
      use_static

      // make sure values are not propagated through a single-value context
      fun f():: (Int, List):
        values(1, [2])

      def x = f()
      def (a, b) = x
      b[0]
    ~raises "specialization not known"
