#lang rhombus/and_meta

// postfix as a macro "infix" operator;

fun
| factorial(0): 1
| factorial(n): n*factorial(n-1)

expr.macro '$a *!':
  '(factorial($a))'

check:
  10*!
  ~is 3628800

check:
  10*! + 1
  ~is 3628801


// a macro with an identifier name that does a weird
// thing with the result tail

expr.macro 'prefix_plus $a $b $c ...':
  values(a, '+ $b $c ...')

check:
  prefix_plus 7 9
  ~is 16

// another way to write that

expr.macro 'also_prefix_plus $e ...':
  match '$e ...'
  | '$a $b $c ...':
      values(a, '+ $b $c ...')
  | ~else:
      syntax_meta.error("bad syntax", '$e ...')

check:
  also_prefix_plus 7 9
  ~is 16

// an identifier macro

expr.macro 'just_five': '"five"'

check:
  just_five ++ " is the result"
  ~is "five is the result"

// mixin infix and prefix with multiple matching cases

block:
  macro
  | 'weirdly coconut':
      ~stronger_than: +
      '"donut"'
  | 'weirdly':
      '"banana"'
  | '$a weirdly $b + $c':
      '$a + $b - $c'
  | '$a weirdly $(b :: Term)':
      '$a + $b'

  check:
    weirdly
    ~is "banana"
  check:
    weirdly coconut
    ~is "donut"
  check:
    weirdly coconut ++ "tree"
    ~is "donuttree"
  check:
    weirdly ++ "none"
    ~is "banananone"
  check:
    1 weirdly 5
    ~is 6
  check:
    1 weirdly 5 + 7
    ~is -1
  check:
    1 weirdly 5 * 7
    ~is 42

block:
  macro listly:
    ~stronger_than: +&
  | '$a listly $b':
      '[$a, $b]'
  | 'listly $c':
      '[$c]'

  check:
    1 listly 5 +& 7
    ~is "[1, 5]7"
  check:
    listly 1
    ~is [1]

check:
  ~eval
  macro listly:
    ~stronger_than: +&
  | '$a listly $b':
      ~all_stx stx
      '[$a, $b, '$stx'.to_source_string()]'
  | 'listly $c':
      ~all_stx stx
      '[$c, '$stx'.to_source_string()]'

  [1 listly 5 +& 7,
   listly 1]
  ~is ["[1, 5, \"1 listly 5\"]7",
       [1, "listly 1"]]

block:
  expr.macro 'go ($(right :: expr_meta.AfterInfixParsed('*'): tail))':
    '$([tail, ...]
         +& '[$tail ...]'
         +& [right.tail, ...]
         +& '$right.tail ...')'
  check:
    go(3 + 4)
    ~is ("['+', '4']"
           +& "[+ 4]"
           +& "['+', '4']"
           +& "+ 4")

block:
  expr.macro 'go ($(right :: expr_meta.AfterInfixParsed('*'): tail), ...)':
    '$([[tail, ...], ...]
         +& '[[$tail ...], ...]'
         +& [[right.tail, ...], ...]
         +& '[[$right.tail ...], ...]')'
  check:
    go(3 + 4, 5 + 8)
    ~is ("[['+', '4'], ['+', '8']]"
           +& "[[+ 4], [+ 8]]"
           +& "[['+', '4'], ['+', '8']]"
           +& "[[+ 4], [+ 8]]")


block:
  expr.macro '$left ignored $tail ...':
    ~weaker_than: *
    ~stronger_than: +
    match '$tail ...'
    | '$(right :: expr_meta.AfterInfixParsed('ignored'))':
        values('$right',
               '$right.tail ...')

  check:
    5 ignored 2
    ~is 2
  check:
    5 ignored 2*2
    ~is 4
  check:
    5 ignored 2 + 3
    ~is 5

check:
  expr.macro 'quote $(x :: Group) $()': '('$x')'
  quote 1 + 2
  ~prints_like '1 + 2'

check:
  expr.macro 'quote $(x :: Group) $()':
    ~all_stx stx
    '$(stx.to_source_string())'
  quote  1 + 2
  ~is "quote  1 + 2"

check:
  expr.macro 'quote $(x :: Group) $()': '($x)'
  quote 1 + 2
  ~is 3

check:
  expr.macro 'quote $x $tail ...':
    ~all_stx stx
    values('$(stx.to_source_string())', '$tail ...')
  quote 1  +&  200
  ~is "quote 1  +&  200200"

check:
  expr.macro 'quote $(x :: Term)':
    ~all_stx stx
    '$(stx.to_source_string())'
  quote 1  +&  200
  ~is "quote 1200"

check:
  expr.macro 'quote $x $(y :: Term)':
    ~all_stx stx
    '$(stx.to_source_string())'
  quote 1 3  +&  200
  ~is "quote 1 3200"


// check pattern forms that should match parsed arguments
block:
  check:
    macro '$((a)) op $b':
      ~weaker_than *
      '$a + $b'
    1 op 2 * 4
    ~is 9
  check:
    macro '$a op $(((b)))':
      ~weaker_than *
      '$a + $b'
    1 op 2 * 4
    ~is 9
  check:
    // not parsed
    macro '$a op $(b :: Term)':
      ~weaker_than *
      '$a + $b'
    1 op 2 * 4
    ~is 12

check:
  ~eval
  macro
  | 'prefix': 'ok'
  | 'preeefix': 'oops'
  ~throws "case operator does not match the initial case operator"

check:
  ~eval
  macro prefix
  | 'prefix': 'ok'
  | 'preeefix': 'oops'
  ~throws "case operator does not match the declared operator"

check:
  ~eval
  macro prefix:
    ~associativity: ~left
  | 'prefix': 'ok'
  ~throws "associativity specified without infix cases"

check:
  def f = (macro '() $x':
             ~op_stx: id
             '$id')
  f('apple 10')
  ~prints_like 'apple'

check:
  // precedence not allowed for `macro` expression form
  ~eval
  (macro '() $x':
     ~weaker_than: +
     '$x')
  ~throws "unexpected term"

check:
  expr.macro 'two_of $(n :: Name)':
    '[$n, $n]'
  two_of List.empty
  ~is [[], []]

check:
  import rhombus.List.cons
  expr.macro 'go':
    match 'cons'
    | '$(bound_as expr_meta.space: 'List.cons')': '"ok"'
  go
  ~is "ok"

check:
  import rhombus.List.cons
  expr.macro 'go':
    match 'List.cons'
    | '$(bound_as expr_meta.space: 'List.cons')': '"also ok"'
  go
  ~is "also ok"

check:
  expr.macro 'ex: $(v :: expr_meta.Parsed)':
    def (e, o) = expr_meta.parse_all(v)
    o
  ex:
    block:
      ex:
        "ok"
  ~completes
