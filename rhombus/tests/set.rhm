#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    Set(k, ...)
    Set.length(st) ~method
    Set.get(st, val) ~method
    Set.copy(st) ~method
    Set.snapshot(st) ~method
    Set.append(st, ...) ~method
    Set.union(st, ...) ~method
    Set.intersect(st, ...) ~method
    Set.remove(st, v) ~method
    MutableSet.set(st, v, in) ~method
    MutableSet.delete(st, v) ~method
    Set.to_list(st, [try_sort]) ~method
    Set.to_sequence(st) ~method
    Set.by(==)(p, ...)
    Set.by(===)(p, ...)
    Set.by(is_now)(p, ...)
    Set.by(is_same_number_or_object)(p, ...)

check:
  Set.length({10, 20})
  ~is 2

check:
  Set.length([1, 2, 3])
  ~throws values("contract violation", "expected: ReadableSet")

block:
  use_static
  check:
    {1, 2}.length()
    ~is 2
  check:
    {"a", "b"}["a"]
    ~is #true
  check:
    {"a", "b"}.get("a")
    ~is #true
  check:
    {1, 2, 3} ++ {4, 5} ~is {1, 2, 3, 4, 5}
    {1, 2, 3}.append({4, 5}) ~is {1, 2, 3, 4, 5}
    {1, 2, 3} ++ "oops" ~throws values("contract violation", "expected: Set")
    {1, 2, 3} ++ MutableSet{4, 5} ~throws values("contract violation", "expected: Set")
  check:
    Set("a", "b").length()
    ~is 2
  check:
    MutableSet("a", "b").length()
    ~is 2
  check:
    def set = {1, 2}
    set.length()
    ~is 2
  check:
    def set :: Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set :~ Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set :: Set.of(String) = dynamic({"a", "b"})
    set.length()
    ~is 2

block:
  check:
    1 :: Set
    ~throws "does not satisfy annotation"
  check:
    1 :: Set.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: Set.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    {1, 2, 3} :: Set.of(converting(fun (n :: Int): n+1))
    ~is {2, 3, 4}

block:
  check:
    dynamic({"a", "b"}).length()
    ~is 2
  check:
    dynamic({"a", "b"})["a"]
    ~is #true
  check:
    dynamic({"a", "b"}).get("a")
    ~is #true
  check:
    dynamic({1, 2, 3}) ++ {4, 5} ~is {1, 2, 3, 4, 5}
    dynamic({1, 2, 3}).append({4, 5}) ~is {1, 2, 3, 4, 5}
    dynamic({1, 2, 3}) ++ "oops" ~throws "cannot append an immutable set and other value"
    dynamic({1, 2, 3}) ++ MutableSet{4, 5} ~throws "cannot append an immutable set and other value"

// See also tests in "rest-args.rhm"
block:
  check:
    {"a", "b", & {"c"}}
    ~is {"a", "b", "c"}
  check:
    {"a", & {"b", "c"}}
    ~is {"a", "b", "c"}
  check:
    {& {"b", "c"}, "a"}
    ~is {"a", "b", "c"}
  check:
    {& {"b"}, "a", & {"c"}}
    ~is {"a", "b", "c"}
  check:
    {"c", "b", & {"b"}, "a", & {"c"}}
    ~is {"a", "b", "c"}
  check:
    {"b", & {"b"}, "c", "a", & {"c"}}
    ~is {"a", "b", "c"}
  check:
    def mutable x = []
    [{&(block: x := [1, x]; {"b"}), (block: x:= [2, x]; "a"), &(block: x:= [3, x]; {"c"})},
     x]
    ~is [{"a", "b", "c"},
         [3, [2, [1, []]]]]
  check:
    Set{& "oops"}
    ~throws "not a set"

block:
  def [x, ...] = [1, 2, 3]
  check:
    {x, ...}
    ~is {1, 2, 3}
  check:
    {x, ..., 0}
    ~is {0, 1, 2, 3}
  check:
    {0, x, ...}
    ~is {0, 1, 2, 3}
  check:
    {& {10, 11}, x, ..., 0}
    ~is {0, 1, 2, 3, 10, 11}
  check:
    [{x}, ...]
    ~is [{1}, {2}, {3}]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [{z, ...}, ...]
    ~is [{1, 2, 3}, {4, 5}]

check:
  def {"x"}  = {"x"}
  ~completes

check:
  def Set{"x"}  = {"x"}
  ~completes

check:
  def Set("x")  = {"x"}
  ~completes

check:
  def {"x"}  = {"x", "y"}
  ~completes

check:
  def Set{"x"}  = {"x", "y"}
  ~completes

check:
  def ex = "x"
  def {ex +& "y"}  = {"xy"}
  ~completes

check:
  def Set{"x", "y"}  = {"x", "y"}
  ~completes

check:
  def {"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}

check:
  def Set{"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}

check:
  match Set{}
  | Set.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match MutableSet{}
  | Set.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  match Set{1}
  | Set.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  match MutableSet{1}
  | Set.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  match Set{}
  | ReadableSet.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match MutableSet{}
  | ReadableSet.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match Set{1}
  | ReadableSet.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  match MutableSet{1}
  | ReadableSet.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  Set.append() ~is Set{}
  Set.append({1}) ~is {1}
  Set.append({1}, {2}) ~is {1, 2}
  Set.append({1}, {2}, {1}) ~is {1, 2}
  Set.append({1}, {2}, {1}, {2}) ~is {1, 2}

check:
  {1, 2, 3}.append({4}, {5, 6}).remove(2) ~is {1, 3, 4, 5, 6}
  {1, 2, 3}.to_list().length() ~is 3
  {1, 2, 3}.to_list(#true) ~is [1, 2, 3]
  Set.append({1}, {3, 5}, {2, 4, 6}) ~is {1, 2, 3, 4, 5, 6}
  {1}.copy().remove(2) ~throws "no such field or method"
  {1, 3}.intersect() ~is {1, 3}
  {1, 3}.intersect({2, 3}) ~is {3}
  {1, 3}.intersect({2, 3}, {3, 4}) ~is {3}
  {1, 3}.union() ~is {1, 3}
  {1, 3}.union({2, 3}) ~is {1, 2, 3}
  {1, 3}.union({2, 3}, {3, 4}) ~is {1, 2, 3, 4}

block:
  check:
    Set.append(MutableSet{1, 2, 3}, {4}, {5, 6})
    ~throws values("contract violation", "expected: Set")
  check:
    Set.intersect(MutableSet{1, 3}, {2, 3}, {3, 4})
    ~throws values("contract violation", "expected: Set")
  check:
    Set.union(MutableSet{1, 3}, {2, 3}, {3, 4})
    ~throws values("contract violation", "expected: Set")

block:
  use_static
  check {1, 2}.remove(1) ~is {2}
  check {1, 2}.remove(3) ~is {1, 2}
  check {1, 2}.remove(1)[2] ~is #true
  check Set.remove({1, 2}, 1) ~is {2}
  check Set.remove({1, 2}, 3) ~is {1, 2}
  check Set.remove({1, 2}, 1)[2] ~is #true
  block:
    use_dynamic
    check dynamic({1, 2}).remove(1) ~is {2}
    check dynamic({1, 2}).remove(3) ~is {1, 2}
    check MutableSet{1, 2}.remove ~throws "no such field or method"
    check MutableSet{1, 2}.remove(1) ~throws "no such field or method"

block:
  use_static
  let m = MutableSet{1, 2}
  m.delete(1)
  check m ~is_now MutableSet{2}
  m.delete(3)
  check m ~is_now MutableSet{2}
  m[1] := "a"
  check m ~is_now MutableSet{1, 2}
  check MutableSet.delete(m, 1) ~is #void
  check m ~is_now MutableSet{2}
  check MutableSet.delete(m, 3) ~is #void
  check m ~is_now MutableSet{2}
  m.set(1, "a")
  check m ~is_now MutableSet{1, 2}
  block:
    use_dynamic
    check dynamic(m).delete(1) ~is #void
    check m ~is_now MutableSet{2}
    check dynamic(m)[1] := "a" ~is #void
    check m ~is_now MutableSet{1, 2}
    check dynamic(m).delete(1) ~is #void
    check m ~is_now MutableSet{2}
    check dynamic(m).set(1, "a") ~is #void
    check m ~is_now MutableSet{1, 2}

check:
  {1, 2}.delete ~throws "no such field or method"
  {1, 2}.delete(1) ~throws "no such field or method"

block:
  let m = MutableSet{1, 2}
  let n = m.copy()
  check m is_now n ~is #true
  check m == n ~is #false
  m[2] := #false
  n[1] := #false
  check m ~is_now MutableSet{1}
  check n ~is_now MutableSet{2}

block:
  let m = {1, 2}
  let n = m.snapshot()
  check m === n ~is #true

block:
  let m = MutableSet{1, 2}
  let n = m.snapshot()
  check m == n ~is #false
  check m.snapshot() == n ~is #true
  check m.snapshot() === n ~is #false

block:
  use_static
  def st = {"a", "b", "c"}
  check:
    for Set (x: Set.to_sequence(st)):
      x
    ~is {"a", "b", "c"}
  check:
    for Set (x: st.to_sequence()):
      x
    ~is {"a", "b", "c"}

block:
  use_static
  def st = MutableSet{"a", "b", "c"}
  check:
    for Set (x: Set.to_sequence(st)):
      x
    ~is {"a", "b", "c"}
  check:
    for Set (x: st.to_sequence()):
      x
    ~is {"a", "b", "c"}

version_guard.at_least "8.13.0.1":
  check:
    Set.to_sequence("oops")
    ~throws values(
      "contract violation",
      "expected: ReadableSet",
      "given: \"oops\"",
    )
  check:
    ("oops" :~ Set).to_sequence()
    ~throws values(
      "contract violation",
      "expected: ReadableSet",
      "given: \"oops\"",
    )
  check:
    for Set (x: Set.to_sequence("oops")):
      x
    ~throws values(
      "contract violation",
      "expected: ReadableSet",
      "given: \"oops\"",
    )
  check:
    for Set (x: ("oops" :~ Set).to_sequence()):
      x
    ~throws values(
      "contract violation",
      "expected: ReadableSet",
      "given: \"oops\"",
    )

check:
  use_static
  class Posn(x, y)
  def set :: Set.of(Posn) = {Posn(1, 2), Posn(3, 4), Posn(4, 5)}
  for Set (val: set):
    val.x + val.y
  ~is {3, 7, 9}

check:
  ~eval
  use_static
  // make sure sequence element static info isn't confused for index
  def set :: Set.of(String) = {"foo", "1", "Box(2)"}
  set["foo"].length()
  ~throws "no such field or method (based on static information)"

check:
  use_static
  Set.empty["no such thing"]
  ~is #false

check:
  use_static
  def Set.empty && empty = dynamic(Set{})
  empty["no such thing"]
  ~is #false

check:
  use_static
  Set.empty.remove("no such thing")
  ~is Set{}

check:
  use_static
  def Set.empty && empty = dynamic(Set{})
  empty.remove("no such thing")
  ~is Set{}

check:
  use_static
  ReadableSet.empty["no such thing"]
  ~is #false

check:
  use_static
  def ReadableSet.empty && empty = dynamic(Set{})
  empty["no such thing"]
  ~is #false

check:
  ~eval
  use_static
  ReadableSet.empty.remove("no such thing")
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  def ReadableSet.empty && empty = dynamic(Set{})
  empty.remove("no such thing")
  ~throws "no such field or method (based on static information)"

check:
  to_string(Set{}) ~is "Set{}"
  to_string(Set{1, 2, 3}) ~is "{1, 2, 3}"
  to_string(MutableSet{}) ~is "MutableSet{}"
  to_string(MutableSet{1, 2, 3}) ~is "MutableSet{1, 2, 3}"

check:
  def s = MutableSet{}
  s[s] := #true
  to_string(s)
  ~is "#0=MutableSet{#0#}"

block:
  class Posn(x, y)
  let a = Posn(1, 2)
  let b = Posn(1, 2)
  let ab = Box(1)
  let bb = Box(1)
  check a === b ~is #false
  def s1 = Set.by(===){ a, b }
  def s2 = Set.by(is_same_number_or_object){ a, b, 1 / 2, 2 / 4 }
  def s3 = Set.by(is_now){ ab, bb }
  check s1[a] ~is #true
  check s1[b] ~is #true
  check s2[a] ~is #true
  check s2[b] ~is #true
  check s2[1/2] ~is #true
  check s2.length() ~is 3
  check s3[ab] ~is #true
  check s3.length() ~is 1
  let str = to_string(s1)
  check str ~is "Set.by(===){Posn(1, 2), Posn(1, 2)}"
  check to_string(s2).substring(0, 33) ~is "Set.by(is_same_number_or_object){"
  check to_string(s3).substring(0, 15) ~is "Set.by(is_now){"
  check s1 is_a Set ~is #true
  check s1 is_a Set.by(===) ~is #true
  check s1 is_a Set.by(==) ~is #false
  check Set{} is_a Set.by(==) ~is #true
  check s2 is_a Set.by(===) ~is #false
  check s2 is_a Set.by(is_same_number_or_object) ~is #true
  check s3 is_a Set.by(===) ~is #false
  check s3 is_a Set.by(is_now) ~is #true
  check (for Set.by(===) (i: 0..1): i) ~is Set.by(===){ 0 }
  check (for Set.by(is_now) (i: 0..1): i) ~is Set.by(is_now){ 0 }
  check (for Set.by(is_same_number_or_object) (i: 0..1): i) ~is Set.by(is_same_number_or_object){ 0 }
  let [x, ...] = [1, 2, 3]
  check Set.by(===){ x, ... } ~is Set.by(===){ 1, 2, 3 }

  import rhombus/meta open
  expr.macro 'check_set_by $(key_comp :: Term)':
    'block:
       use_static
       check Set.by($key_comp){} ~is Set.by($key_comp){}
       check Set.by($key_comp){} ~is_a Set.by($key_comp)
       check Set.by($key_comp)(1) ~is Set.by($key_comp){ 1 }
       check Set.by($key_comp){} ~is_a Set.by($key_comp).of(String)
       check Set.by($key_comp){ "x" } ~is_a Set.by($key_comp).of(String)
       check Set.by($key_comp){ "x" } is_a Set.by($key_comp).of(String) ~is #true
       check Set.by($key_comp){ "x" } is_a Set.by($key_comp).of(Number) ~is #false
       check Set.by($key_comp){} ++ { 0 } ~is Set.by($key_comp){ 0 }
       check Set.by($key_comp){} ++ { 0, 2 } ~is Set.by($key_comp){ 0, 2 }
       check Set.by($key_comp){ x, $('...')} ~is Set.by($key_comp){ 1, 2, 3 }
       check Set.by($key_comp){ x, $('...')}.length() ~is 3
       check [Set.by($key_comp){ x }, $('...')] ~is [Set.by($key_comp){ 1 },
                                                     Set.by($key_comp){ 2 },
                                                     Set.by($key_comp){ 3 }]

       check (for Set.by($key_comp) (i: 0..1): i) ~is Set.by($key_comp){ 0 }
       block:
         let Set.by($key_comp){ v, $('...') } = Set.by($key_comp){ "x" }
         check [v, $('...')] ~is ["x"]
       block:
         let Set.by($key_comp){ 1, & rest } = Set.by($key_comp){ 1, 2 }
         check rest ~is_a Set.by($key_comp)
         check rest[2] ~is #true
       let m4 = MutableSet.by($key_comp){}
       m4[0] := #true
       check m4[0] ~is #true
       check m4 ~is_now MutableSet.by($key_comp){ 0 }
       check m4 ~is_now MutableSet.by($key_comp)(0)
       check m4 ~is_a MutableSet.by($key_comp)
       check [MutableSet.by($key_comp){ x }, $('...')] ~is_now [MutableSet.by($key_comp){ 1 },
                                                                MutableSet.by($key_comp){ 2 },
                                                                MutableSet.by($key_comp){ 3 }]'
  check_set_by ==
  check_set_by ===
  check_set_by is_now
  check_set_by is_same_number_or_object

  version_guard.at_least "8.13.0.99":
    key_comp.def 'is_anything':
      ~equals: fun (a, b, recur): #true
      ~hash_code: fun (a, recur): 1
    let m = Set.by(is_anything){ 1, 3 }
    check m.length() ~is 1
    check m["any value at all"] ~is #true
    check m.to_list() ~is [3]

    key_comp.def 'both_42_or_both_other':
      ~equals: fun (a, b, recur): if (a == 42) | (b == 42) | (b != 42)
      ~hash_code: fun (a, recur): if (a == 42) | 42 | 1
    let m2 = Set.by(both_42_or_both_other){ 1, 42, 3 }
    check m2.length() ~is 2
    check m2["any non-42 value"] ~is #true
    check m2[42] ~is #true
    check m2.to_list().sort(math.less) ~is [3, 42]

    key_comp.def 'equals':
      ~equals: fun (a, b, recur): a == b
      ~hash_code: fun (a, recur): Equatable.hash(a)
    check_set_by equals

  #void
