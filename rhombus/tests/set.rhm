#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Set(k, ...)
    Set.length(m)

check:
  Set.length({10, 20})
  ~is 2

check:
  Set.length([1, 2, 3])
  ~raises values("contract violation", "expected: ReadableSet")

block:
  use_static
  check:
    {1, 2}.length()
    ~is 2
  check:
    {"a", "b"}["a"]
    ~is #true
  check:
    Set("a", "b").length()
    ~is 2
  check:
    MutableSet("a", "b").length()
    ~is 2
  check:
    def set = {1, 2}
    set.length()
    ~is 2
  check:
    def set :: Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set :~ Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set :: Set.of(String) = dynamic({"a", "b"})
    set.length()
    ~is 2

block:
  check:
    {1, 2, 3} :: Set.of(converting (fun (n :: Int): n+1))
    ~is {2, 3, 4}

block:
  check:
    dynamic({"a", "b"}).length()
    ~is 2
  check:
    dynamic({"a", "b"})["a"]
    ~is #true

// See also tests in "rest-args.rhm"
block:
  check:
    {"a", "b", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"a", &{"b", "c"}}
    ~is {"a", "b", "c"}
  check:
    {&{"b", "c"}, "a"}
    ~is {"a", "b", "c"}
  check:
    {&{"b"}, "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"c", "b", &{"b"}, "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"b", &{"b"}, "c", "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    def mutable x = []
    [{&(block: x := [1, x]; {"b"}), (block: x:= [2, x]; "a"), &(block: x:= [3, x]; {"c"})},
     x]
    ~is [{"a", "b", "c"},
         [3, [2, [1, []]]]]
  check:
    Set{&"oops"}
    ~raises "not a set"

block:
  def [x, ...] = [1, 2, 3]
  check:
    {x, ...}
    ~is {1, 2, 3}
  check:
    {x, ..., 0}
    ~is {0, 1, 2, 3}
  check:
    {0, x, ...}
    ~is {0, 1, 2, 3}
  check:
    {&{10, 11}, x, ..., 0}
    ~is {0, 1, 2, 3, 10, 11}
  check:
    [{x}, ...]
    ~is [{1}, {2}, {3}]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [{z, ...}, ...]
    ~is [{1, 2, 3}, {4, 5}]

check:
  def {"x"}  = {"x"}
  ~completes

check:
  def Set{"x"}  = {"x"}
  ~completes

check:
  def Set("x")  = {"x"}
  ~completes

check:
  def {"x"}  = {"x", "y"}
  ~completes

check:
  def Set{"x"}  = {"x", "y"}
  ~completes

check:
  def ex = "x"
  def {ex +& "y"}  = {"xy"}
  ~completes

check:
  def Set{"x", "y"}  = {"x", "y"}
  ~completes

check:
  def {"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}

check:
  def Set{"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}

check:
  {1, 2, 3}.append({4}, {5, 6}).remove(2) ~is {1, 3, 4, 5, 6}
  {1, 2, 3}.to_list().length() ~is 3
  {1, 2, 3}.to_list(#true) ~is [1, 2, 3]
  Set.append({1}, {3, 5}, {2, 4, 6}) ~is {1, 2, 3, 4, 5, 6}
  {1}.copy().remove(2) ~raises "no such field or method"
  {1, 3}.intersect() ~is {1, 3}
  {1, 3}.intersect({2, 3}) ~is {3}
  {1, 3}.intersect({2, 3}, {3, 4}) ~is {3}
  {1, 3}.union() ~is {1, 3}
  {1, 3}.union({2, 3}) ~is {1, 2, 3}
  {1, 3}.union({2, 3}, {3, 4}) ~is {1, 2, 3, 4}

block:
  check:
    Set.append(MutableSet{1, 2, 3}, {4}, {5, 6})
    ~raises values("contract violation", "expected: Set")
  check:
    Set.intersect(MutableSet{1, 3}, {2, 3}, {3, 4})
    ~raises values("contract violation", "expected: Set")
  check:
    Set.union(MutableSet{1, 3}, {2, 3}, {3, 4})
    ~raises values("contract violation", "expected: Set")

block:
  use_static
  check {1, 2}.remove(1) ~is {2}
  check {1, 2}.remove(3) ~is {1, 2}
  check {1, 2}.remove(1)[2] ~is #true
  check Set.remove({1, 2}, 1) ~is {2}
  check Set.remove({1, 2}, 3) ~is {1, 2}
  check Set.remove({1, 2}, 1)[2] ~is #true
  block:
    use_dynamic
    check dynamic({1, 2}).remove(1) ~is {2}
    check dynamic({1, 2}).remove(3) ~is {1, 2}
    check MutableSet{1, 2}.remove ~raises "no such field or method"
    check MutableSet{1, 2}.remove(1) ~raises "no such field or method"
    
block:
  use_static
  let m = MutableSet{1, 2}
  m.delete(1)
  check m ~is_now MutableSet{2}
  m.delete(3)
  check m ~is_now MutableSet{2}
  m[1] := "a"
  check m ~is_now MutableSet{1, 2}  
  check MutableSet.delete(m, 1) ~is #void
  check m ~is_now MutableSet{2}
  check MutableSet.delete(m, 3) ~is #void
  check m ~is_now MutableSet{2}
  m[1] := "a"
  check m ~is_now MutableSet{1, 2}  
  block:
    use_dynamic
    check dynamic(m).delete(1) ~is #void
    check m ~is_now MutableSet{2}
    check {1, 2}.delete ~raises "no such field or method"
    check {1, 2}.delete(1) ~raises "no such field or method"

block:
  let m = MutableSet{1, 2}
  let n = m.copy()
  check m is_now n ~is #true
  check m == n ~is #false
  m[2] := #false
  n[1] := #false
  check m ~is_now MutableSet{1}
  check n ~is_now MutableSet{2}

block:
  let m = {1, 2}
  let n = m.snapshot()
  check m === n ~is #true

block:
  let m = MutableSet{1, 2}
  let n = m.snapshot()
  check m == n ~is #false
  check m.snapshot() == n ~is #true
  check m.snapshot() === n ~is #false

check:
  use_static
  class Posn(x, y)
  def set :: Set.of(Posn) = {Posn(1, 2), Posn(3, 4), Posn(4, 5)}
  for Set (val: set):
    val.x + val.y
  ~is {3, 7, 9}

check:
  ~eval
  use_static
  // make sure sequence element static info isn't confused for index
  def set :: Set.of(String) = {"foo", "1", "Box(2)"}
  set["foo"].length()
  ~raises "no such field or method (based on static information)"
