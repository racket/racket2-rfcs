#lang rhombus/and_meta
import:
  lib("racket/base.rkt").atan

class Posn(x, y)

annot.macro 'AlsoPosn': 'Posn'
check:
  Posn(1, 2) :: AlsoPosn
  ~is Posn(1, 2)

check:
  "no" :: AlsoPosn
  ~throws "value does not satisfy annotation"

bind.macro 'AlsoPosn ($x, $y)':
  'Posn($x, $y)'

def AlsoPosn(also_x, also_y) = Posn(10, 20)
check:
  also_x +& "," +& also_y
  ~is "10,20"

block:
  annot.delayed_declare Forward
  check:
    10 :: Forward
    ~throws "delayed annoation is not yet completed"
  annot.delayed_complete Forward: Int
  check:
    10 :: Forward
    ~is 10

block:
  namespace f:
    export: Forward
            f
    annot.delayed_declare Forward
    fun f(v): v :: Forward
  check:
    f.f(10)
    ~throws "delayed annoation is not yet completed"
  annot.delayed_complete f.Forward: Int
  check:
    f.f(10)
    ~is 10

check:
  ~eval
  use_static
  import: rhombus/meta open
  annot.delayed_declare Forward
  fun (): (10 :: Forward).x
  ~throws "static information needed before completed"

check:
  ~eval
  use_static
  import: rhombus/meta open
  annot.delayed_declare Forward
  class Posn(x, y)
  annot.delayed_complete Forward: Posn
  fun (): (10 :: Forward).x
  ~completes

check:
  use_static
  annot.macro 'BoxOf($(ann :: annot_meta.Parsed))':
    def (pred, infos) = annot_meta.unpack_predicate(ann)
    annot_meta.pack_predicate('block:
                                 let content_pred = $pred
                                 fun | (Array(v)): content_pred(v)
                                     | (_): #false',
                              '((#%box_ref_info, $infos),
                                ($(statinfo_meta.dot_provider_key),
                                 boxof_dot_provider))')
  fun box_content(Array(v)): v

  dot.macro 'boxof_dot_provider $left $dot $right':
    let infos = statinfo_meta.lookup(left, '#%box_ref_info') || '()'
    match right
    | 'content': statinfo_meta.wrap('box_content($left)', infos)

  def v :: BoxOf(List) = Array([1, 2, 3])
  v.content[0]
  ~is 1
