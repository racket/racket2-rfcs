#lang rhombus

block:
  def mutable accum = []
  check:
    for:
      each i: 0..2
      accum := List.cons(i, accum)
    accum
    ~is [1, 0]
  check:
    for (i: 0..2):
      accum := List.cons(i + 10, accum)
    accum
    ~is [11, 10, 1, 0]

check:
  for List:
    each i: 0..2
    i
  ~is [0, 1]

check:
  for List (i: 0..2):
    i
  ~is [0, 1]

check:
  for Map:
    each i: 0..2
    values(i, "" +& i)
  ~is {0: "0", 1: "1"}

check:
  for Map (i: 0..2):
    values(i, "" +& i)
  ~is {0: "0", 1: "1"}

check:
  for:
    each i: 0..2
    i
    ~into List
  ~is [0, 1]

check:
  for (i: 0..2):
    i
    ~into List
  ~is [0, 1]

check:
  for List:
    each i: 0..2
    each j: 0..2
    [i, -j-1]
  ~is [[0, -1], [0, -2], [1, -1], [1, -2]]

check:
  for List:
    each:
      i: 0..2
      j: 0..2
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List (i: 0..2,
            j: 0..2):
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    def len = 2
    each:
      i: 0..len
      j: 0..len
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    each i: 0..2
    def i_plus = i+1
    each j: 0..2
    [i_plus, -j-1]
  ~is [[1, -1], [1, -2], [2, -1], [2, -2]]

check:
  for List (i: 0..2):
    def i_plus = i+1
    each j: 0..2
    [i_plus, -j-1]
  ~is [[1, -1], [1, -2], [2, -1], [2, -2]]

check:
  for List:
    each i: 0..2
    def i_len = i+1
    each j: 0..i_len
    [i, -j-1]
  ~is [[0, -1], [1, -1], [1, -2]]

check:
  for values(sum = 0):
    each i: 0..4
    sum + i
  ~is 6

check:
  for values(sum = 0) (i: 0..4):
    sum + i
  ~is 6

check:
  for values(sum = 0, parity = #true):
    each i: 0..4
    values(sum + i, !parity)
  ~is values(6, #true)

check:
  for values(sum = 0):
    each i: 0..4
    keep_when i != 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..4
    skip_when i == 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..8
    break_when i == 4
    sum + i
  ~is 6

check:
  for values(sum = 0):
    each i: 0..8
    final_when i == 4
    sum + i
  ~is 10

check:
  for values(sum = 0):
    each i: 0..8
    def new_sum = sum + i
    final_when i == 4
    def result = new_sum + 1
    result
  ~is 15

check:
  use_static
  class Posn(x, y)
  fun point_xs(l :~ List.of(List.of(Posn))):
    for:
      each ll: l
      each p: ll
      p.x
      ~into List
  point_xs([[Posn(1, 2), Posn(0, 5)], [], [Posn(3, 3)]])
  ~is [1, 0, 3]

check:
  for Set:
    each values(key, val): {1: "a", 2: "b"}
    key +& " -> " +& val
  ~is {"1 -> a", "2 -> b"}

check:
  for Set:
    each (key, val): {3: "c", 4: "d"}
    key +& " -> " +& val
  ~is {"3 -> c", "4 -> d"}

check:
  for Set ((key, val): {3: "c", 4: "d"}):
    key +& " -> " +& val
  ~is {"3 -> c", "4 -> d"}

check:
  for Map:
    each key: {3, 4}
    values(key, key+1)
  ~is {3: 4, 4: 5}

check:
  for Array:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6)

check:
  for Array ~length 6:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length (1 + 5):
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length 6 (i: 3..7):
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length 2:
    each i: 3..7
    i
  ~raises "index is out of range"

check:
  def mutable accum = []
  [for all:
     each i: 0..10
     accum := List.cons(i, accum)
     i > -1 && i,
   accum]
  ~is [9, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]
  
check:
  def mutable accum = []
  [for all:
     each i: 0..10
     accum := List.cons(i, accum)
     i < 6,
   accum]
  ~is [#false, [6, 5, 4, 3, 2, 1, 0]]

check:
  def mutable accum = []
  [for any:
     each i: 0..10
     accum := List.cons(i, accum)
     i > 9,
   accum]
  ~is [#false, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]
  
check:
  def mutable accum = []
  [for any:
     each i: 0..10
     accum := List.cons(i, accum)
     i > 5 && i,
   accum]
  ~is [6, [6, 5, 4, 3, 2, 1, 0]]

check:
  ~eval
  use_static
  for:
    each x: dynamic([1])
    x
  ~raises "no specific iteration implementation available"

check:
  for Set:
    each:
      values(key, [x, ...]): { "x": [1, 2, 3],
                               "y": [4, 5] }
    [x, ...].reverse()
  ~is {[3, 2, 1], [5, 4]}

check:
  for values() ():
    each i: 1..2
    values()
  ~is values()

check:
  for values():
    each i: 1..2
    values()
  ~is values()

check:
  for values() ():
    values()
  ~is values()

check:
  for values():
    values()
  ~is values()

check:
  for values() ():
    each:«»
    values()
  ~is values()

check:
  for List (val: dynamic([1, 2, 3])):
    val
  ~is [1, 2, 3]

check:
  for Array (val: dynamic(Array(1, 2, 3))):
    val
  ~is_now Array(1, 2, 3)

check:
  for Map ((key, val): {1: 2, 2: 3, 3: 4}):
    values(key, val)
  ~is {1: 2, 2: 3, 3: 4}

check:
  for Set (val: dynamic({1, 2, 3})):
    val
  ~is {1, 2, 3}

check:
  ~eval
  use_static
  for ((key, val): ([Box(1), Box(2), Box(3)] :: List.of(Box))):
    key.value
  ~raises "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ([Box(1), Box(2), Box(3)] :: List.of(Box))):
    val.value
  ~raises "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ({Box(1), Box(2), Box(3)} :: Set.of(Box))):
    key.value
  ~raises "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ({Box(1), Box(2), Box(3)} :: Set.of(Box))):
    val.value
  ~raises "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for (val: ({Box(1): "1", Box(2): "2", Box(3): "3"} :: Map.of(Box, String))):
    val.value
  ~raises "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for (val: ({Box(1): "1", Box(2): "2", Box(3): "3"} :: Map.of(Box, String))):
    val.length()
  ~raises "no such field or method (based on static information)"
