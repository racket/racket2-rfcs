#lang rhombus/and_meta
import:
  "version_guard.rhm"

block:
  def mutable accum = []
  check:
    for:
      each i: 0..2
      accum := List.cons(i, accum)
    accum
    ~is [1, 0]
  check:
    for (i: 0..2):
      accum := List.cons(i + 10, accum)
    accum
    ~is [11, 10, 1, 0]

check:
  for List:
    each i: 0..2
    i
  ~is [0, 1]

check:
  for List (i: 0..2):
    i
  ~is [0, 1]

check:
  for Map:
    each i: 0..2
    values(i, "" +& i)
  ~is {0: "0", 1: "1"}

check:
  for Map (i: 0..2):
    values(i, "" +& i)
  ~is {0: "0", 1: "1"}

check:
  for:
    each i: 0..2
    i
    ~into List
  ~is [0, 1]

check:
  for (i: 0..2):
    i
    ~into List
  ~is [0, 1]

check:
  for List:
    each i: 0..2
    each j: 0..2
    [i, -j-1]
  ~is [[0, -1], [0, -2], [1, -1], [1, -2]]

check:
  for List:
    each:
      i: 0..2
      j: 0..2
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List (i: 0..2,
            j: 0..2):
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    def len = 2
    each:
      i: 0..len
      j: 0..len
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    each i: 0..2
    def i_plus = i+1
    each j: 0..2
    [i_plus, -j-1]
  ~is [[1, -1], [1, -2], [2, -1], [2, -2]]

check:
  for List (i: 0..2):
    def i_plus = i+1
    each j: 0..2
    [i_plus, -j-1]
  ~is [[1, -1], [1, -2], [2, -1], [2, -2]]

check:
  for List:
    each i: 0..2
    def i_len = i+1
    each j: 0..i_len
    [i, -j-1]
  ~is [[0, -1], [1, -1], [1, -2]]

check:
  for values(sum = 0):
    each i: 0..4
    sum + i
  ~is 6

check:
  for values(sum = 0) (i: 0..4):
    sum + i
  ~is 6

check:
  for values(sum = 0, parity = #true):
    each i: 0..4
    values(sum + i, !parity)
  ~is values(6, #true)

check:
  for values(sum = 0):
    each i: 0..4
    keep_when i != 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..4
    skip_when i == 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..8
    break_when i == 4
    sum + i
  ~is 6

check:
  for values(sum = 0):
    each i: 0..8
    final_when i == 4
    sum + i
  ~is 10

check:
  for values(sum = 0):
    each i: 0..8
    def new_sum = sum + i
    final_when i == 4
    def result = new_sum + 1
    result
  ~is 15

check:
  use_static
  def set:
    for values(set :~ Set = dynamic({1, 4, 9, 16, 25})):
      each i: 0..8
      if set[i] | set.remove(i) | set
  set ++ {36}
  ~is {9, 16, 25, 36}

check:
  use_static
  def set:
    for values(set :: Set = dynamic({1, 4, 9, 16, 25})):
      each i: 0..8
      if set[i] | set.remove(i) | set
  set ++ {36}
  ~is {9, 16, 25, 36}

check:
  use_static
  for values(set :~ Set = dynamic({1, 4, 9, 16, 25})):
    each i: 0..8
    keep_when set[i]
    set.remove(i)
  ~is {9, 16, 25}

check:
  use_static
  for values(set :: Set = dynamic({1, 4, 9, 16, 25})):
    each i: 0..8
    keep_when set[i]
    set.remove(i)
  ~is {9, 16, 25}

check:
  for values(_ = 0, _ = 0+1):
    each i: 0..8
    values(i, i+1)
  ~is values(7, 8)

check:
  for values(_ :~ Int = 0, _ :~ Int = 0+1):
    each i: 0..8
    values(i, i+1)
  ~is values(7, 8)

check:
  for values(_ :: Int = 0, _ :: Int = 0+1):
     each i: 0..8
     values(i, i+1)
  ~is values(7, 8)

check:
  for values(_ :~ Int = 0, _ :~ Int = 0+1):
    each _: 0..8
    values("oops", "oh no")
  ~is values("oops", "oh no")

check:
  for values(_ :~ Int = 0, _ :: Int = 0+1):
    each _: 0..8
    values("oops", "oh no")
  ~throws values(
    "value does not satisfy annotation",
    "\"oh no\"",
    "Int",
  )

check:
  for values(_ :: Int = 0, _ :: Int = 0+1):
    each _: 0..8
    values("oops", "oh no")
  ~throws values(
    "value does not satisfy annotation",
    "\"oops\"",
    "Int",
  )

check:
  for values(_ :~ Int = "oops", _ :~ Int = "oh no"):
    each i: 0..8
    values(i, i+1)
  ~is values(7, 8)

check:
  for values(_ :~ Int = "oops", _ :: Int = "oh no"):
    each i: 0..8
    values(i, i+1)
  ~throws values(
    "value does not satisfy annotation",
    "\"oh no\"",
    "Int",
  )

check:
  for values(_ :: Int = "oops", _ :: Int = "oh no"):
    each i: 0..8
    values(i, i+1)
  ~throws values(
    "value does not satisfy annotation",
    "\"oops\"",
    "Int",
  )

check:
  for values(_: println("first"); 0, _: println("second"); 0+1):
    each i: 0..8
    println(i)
    values(i, i+1)
  ~prints "first\nsecond\n0\n1\n2\n3\n4\n5\n6\n7\n"

check:
  use_static
  class Posn(x, y)
  fun point_xs(l :~ List.of(List.of(Posn))):
    for:
      each ll: l
      each p: ll
      p.x
      ~into List
  point_xs([[Posn(1, 2), Posn(0, 5)], [], [Posn(3, 3)]])
  ~is [1, 0, 3]

check:
  for Set:
    each values(key, val): {1: "a", 2: "b"}
    key +& " -> " +& val
  ~is {"1 -> a", "2 -> b"}

check:
  for Set:
    each (key, val): {3: "c", 4: "d"}
    key +& " -> " +& val
  ~is {"3 -> c", "4 -> d"}

check:
  for Set ((key, val): {3: "c", 4: "d"}):
    key +& " -> " +& val
  ~is {"3 -> c", "4 -> d"}

check:
  for Map:
    each key: {3, 4}
    values(key, key+1)
  ~is {3: 4, 4: 5}

check:
  for Array:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6)

check:
  for Array ~length 6:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length (1 + 5):
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length 6 (i: 3..7):
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length 2:
    each i: 3..7
    i
  ~throws "index is out of range"

check:
  def mutable accum = []
  [for all:
     each i: 0..10
     accum := List.cons(i, accum)
     i > -1 && i,
   accum]
  ~is [9, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]

check:
  def mutable accum = []
  [for all:
     each i: 0..10
     accum := List.cons(i, accum)
     i < 6,
   accum]
  ~is [#false, [6, 5, 4, 3, 2, 1, 0]]

check:
  for all (i: 0..10):
    i < 10
  ~is #true

check:
  def mutable accum = []
  [for any:
     each i: 0..10
     accum := List.cons(i, accum)
     i > 9,
   accum]
  ~is [#false, [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]

check:
  def mutable accum = []
  [for any:
     each i: 0..10
     accum := List.cons(i, accum)
     i > 5 && i,
   accum]
  ~is [6, [6, 5, 4, 3, 2, 1, 0]]

check:
  for any (i: 0..10):
    i == 5
  ~is #true

check:
  ~eval
  use_static
  for:
    each x: dynamic([1])
    x
  ~throws "no specific iteration implementation available"

check:
  for Set:
    each:
      values(key, [x, ...]): { "x": [1, 2, 3],
                               "y": [4, 5] }
    [x, ...].reverse()
  ~is {[3, 2, 1], [5, 4]}

check:
  for values() ():
    each i: 1..2
    values()
  ~is values()

check:
  for values():
    each i: 1..2
    values()
  ~is values()

check:
  for values() ():
    values()
  ~is values()

check:
  for values():
    values()
  ~is values()

check:
  for values() ():
    each:«»
    values()
  ~is values()

check:
  ~eval
  for List (i: 0..2):
    i
    ~into List
  ~throws "both `~into` and reducer"

check:
  ~eval
  for (i: 0..2):
    i
    ~into List (i: 0..2)
  ~throws "misplaced term"

check:
  for List (val: dynamic([1, 2, 3])):
    val
  ~is [1, 2, 3]

check:
  for Array (val: dynamic(Array(1, 2, 3))):
    val
  ~is_now Array(1, 2, 3)

check:
  for Map ((key, val): {1: 2, 2: 3, 3: 4}):
    values(key, val)
  ~is {1: 2, 2: 3, 3: 4}

check:
  for Set (val: dynamic({1, 2, 3})):
    val
  ~is {1, 2, 3}

check:
  ~eval
  use_static
  for ((key, val): ([Box(1), Box(2), Box(3)] :: List.of(Box))):
    key.value
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ([Box(1), Box(2), Box(3)] :: List.of(Box))):
    val.value
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ({Box(1), Box(2), Box(3)} :: Set.of(Box))):
    key.value
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for ((key, val): ({Box(1), Box(2), Box(3)} :: Set.of(Box))):
    val.value
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for (val: ({Box(1): "1", Box(2): "2", Box(3): "3"} :: Map.of(Box, String))):
    val.value
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  for (val: ({Box(1): "1", Box(2): "2", Box(3): "3"} :: Map.of(Box, String))):
    val.length()
  ~throws "no such field or method (based on static information)"

// check that `each` goes through `#%body`
block:
  macro '#%body: $_':
    '["everything", "is", "this", "list"]'
  check:
    for List:
      each i: ["this", "is", "my", "list"]
      i
    ~is ["everything", "is", "this", "list"]
  check:
    for List (i: ["where", "is", "my", "list?"]):
      i
    ~is ["everything", "is", "this", "list"]

// check `let` across clause boundary
check:
  for List:
    each num_str: ["1","2","3","4","5", "a"]
    let num = String.to_number(num_str)
    skip_when !num
    num
  ~is [1, 2, 3, 4, 5]

version_guard.at_least "8.11.1.4":
  // check `import` across clause boundary
  check:
    for List:
      each num_str: ["1","2","3","4","5"]
      import: rhombus.List as L
      skip_when !num_str
      L(num_str)
    ~is [["1"], ["2"], ["3"], ["4"], ["5"]]

  // combine `import` and `let` across clause boundary
  check:
    for List:
      each num_str: ["1","2","3","4","5", "a"]
      import: rhombus.List as L
      let num = String.to_number(num_str)
      skip_when !num
      L(num)
    ~is [[1], [2], [3], [4], [5]]

  syntax_parameter.bridge today_name:
    "Thursday"
  expr.macro 'today':
    '$(syntax_parameter_meta.lookup('today_name'))'

  // check syntax parameter withn body
  check:
    for List:
      each num_str: ["1","2","3"]
      skip_when !num_str
      syntax_parameter.relet today_name:
        "Friday"
      [num_str, today]
    ~is [["1", "Friday"], ["2", "Friday"], ["3", "Friday"]]

  // check syntax parameter across clause boundary
  check:
    def mutable accum = []
    [for List:
       each num_str: ["1","2","3"]
       syntax_parameter.relet today_name:
         "Friday"
       def now = today
       accum := List.cons(today, accum)
       skip_when !num_str
       accum := List.cons(today, accum)
       [num_str, now],
     accum]
    ~is [[["1", "Friday"], ["2", "Friday"], ["3", "Friday"]],
         ["Friday", "Friday", "Friday", "Friday", "Friday", "Friday"]]

  // check syntax parameter used in sequence expression
  check:
    for List:
      syntax_parameter.relet today_name:
        "Friday"
      each day_str: [today, today]
      [day_str, today]
    ~is [["Friday", "Friday"], ["Friday", "Friday"]]

  // check syntax parameter used sequence expression, but delayed
  check:
    for List:
      syntax_parameter.relet today_name:
        "Friday"
      each day_str: [fun (): today, fun (): today]
      [day_str(), today]
    ~is [["Friday", "Friday"], ["Friday", "Friday"]]
