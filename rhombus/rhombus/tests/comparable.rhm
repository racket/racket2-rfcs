#lang rhombus/static

check 1 < 2 ~is #true
check 1 <= 2 ~is #true
check 1 compares_equal 2 ~is #false
check 1 compares_unequal 2 ~is #true
check 1 >= 2 ~is #false
check 2 >= 2 ~is #true
check 1 > 2 ~is #false
check 10 < 2 ~is #false
check 10 <= 2 ~is #false
check 10 <= 10 ~is #true
check 10 compares_equal 10 ~is #true
check 10 compares_unequal 10 ~is #false
check 10 >= 2 ~is #true
check 10 > 2 ~is #true

check 1/2 < 2 ~is #true
check 1/2 <= 2 ~is #true
check 1/2 compares_equal 2 ~is #false
check 1/2 compares_unequal 2 ~is #true
check 1/2 >= 2 ~is #false
check 1/2 > 2 ~is #false

check Char"a" < Char"b" ~is #true
check Char"a" <= Char"b" ~is #true
check Char"a" compares_equal Char"b" ~is #false
check Char"a" compares_unequal Char"b" ~is #true
check Char"a" >= Char"b" ~is #false
check Char"a" >= Char"a" ~is #true
check Char"a" > Char"b" ~is #false
check Char"a" < Char"B" ~is #false
check Char"a" <= Char"B" ~is #false
check Char"a" <= Char"a" ~is #true
check Char"a" compares_equal Char"a" ~is #true
check Char"a" compares_unequal Char"a" ~is #false
check Char"a" >= Char"B" ~is #true
check Char"a" > Char"B" ~is #true

check Byte#"a" < Byte#"b" ~is #true
check Byte#"a" <= Byte#"b" ~is #true
check Byte#"a" compares_equal Byte#"b" ~is #false
check Byte#"a" compares_unequal Byte#"b" ~is #true
check Byte#"a" >= Byte#"b" ~is #false
check Byte#"a" >= Byte#"a" ~is #true
check Byte#"a" > Byte#"b" ~is #false
check Byte#"a" < Byte#"B" ~is #false
check Byte#"a" <= Byte#"B" ~is #false
check Byte#"a" <= Byte#"a" ~is #true
check Byte#"a" compares_equal Byte#"a" ~is #true
check Byte#"a" compares_unequal Byte#"a" ~is #false
check Byte#"a" >= Byte#"B" ~is #true
check Byte#"a" > Byte#"B" ~is #true

check "a" < "b" ~is #true
check "a" <= "b" ~is #true
check "a" compares_equal "b" ~is #false
check "a" compares_unequal "b" ~is #true
check "a" >= "b" ~is #false
check "a" >= "a" ~is #true
check "a" > "b" ~is #false
check "a" < "B" ~is #false
check "a" <= "B" ~is #false
check "a" <= "a" ~is #true
check "a" compares_equal "a" ~is #true
check "a" compares_unequal "a" ~is #false
check "a" >= "B" ~is #true
check "a" > "B" ~is #true

check #"a" < #"b" ~is #true
check #"a" <= #"b" ~is #true
check #"a" compares_equal #"b" ~is #false
check #"a" >= #"b" ~is #false
check #"a" >= #"a" ~is #true
check #"a" > #"b" ~is #false
check #"a" < #"B" ~is #false
check #"a" <= #"B" ~is #false
check #"a" <= #"a" ~is #true
check #"a" compares_equal #"a" ~is #true
check #"a" >= #"B" ~is #true
check #"a" > #"B" ~is #true

check #'a < #'b ~is #true
check #'a <= #'b ~is #true
check #'a compares_equal #'b ~is #false
check #'a compares_unequal #'b ~is #true
check #'a >= #'b ~is #false
check #'a >= #'a ~is #true
check #'a > #'b ~is #false
check #'a < #'B ~is #false
check #'a <= #'B ~is #false
check #'a <= #'a ~is #true
check #'a compares_equal #'a ~is #true
check #'a compares_unequal #'a ~is #false
check #'a >= #'B ~is #true
check #'a > #'B ~is #true

check #'~a < #'~b ~is #true
check #'~a <= #'~b ~is #true
check #'~a compares_equal #'~b ~is #false
check #'~a compares_unequal #'~b ~is #true
check #'~a >= #'~b ~is #false
check #'~a >= #'~a ~is #true
check #'~a > #'~b ~is #false
check #'~a < #'~B ~is #false
check #'~a <= #'~B ~is #false
check #'~a <= #'~a ~is #true
check #'~a compares_equal #'~a ~is #true
check #'~a compares_unequal #'~a ~is #false
check #'~a >= #'~B ~is #true
check #'~a > #'~B ~is #true

// checks static-info intersection:
check (if #true | 1 | 2.0) < (if #false | 3/2 | 4+5) ~is #true
// checks static-info union:
block:
  let a :: Real = 5
  check a <= a ~is #true

block:
  use_dynamic
  check dynamic(1) < dynamic(2) ~is #true
  check dynamic(Char"a") < dynamic(Char"b") ~is #true
  check dynamic(Byte#"a") < dynamic(Byte#"b") ~is #true
  check dynamic("a") < dynamic("b") ~is #true
  check dynamic(#"a") < dynamic(#"b") ~is #true
  check dynamic(#'a) < dynamic(#'b) ~is #true
  check dynamic(#'~a) < dynamic(#'~b) ~is #true

  check dynamic(1) <= dynamic(2) ~is #true
  check dynamic(Char"a") <= dynamic(Char"b") ~is #true
  check dynamic(Byte#"a") <= dynamic(Byte#"b") ~is #true
  check dynamic("a") <= dynamic("b") ~is #true
  check dynamic(#"a") <= dynamic(#"b") ~is #true
  check dynamic(#'a) <= dynamic(#'b) ~is #true
  check dynamic(#'~a) <= dynamic(#'~b) ~is #true

  check dynamic(1) >= dynamic(2) ~is #false
  check dynamic(Char"a") >= dynamic(Char"b") ~is #false
  check dynamic(Byte#"a") >= dynamic(Byte#"b") ~is #false
  check dynamic("a") >= dynamic("b") ~is #false
  check dynamic(#"a") >= dynamic(#"b") ~is #false
  check dynamic(#'a) >= dynamic(#'b) ~is #false
  check dynamic(#'~a) >= dynamic(#'~b) ~is #false

  check dynamic(1) > dynamic(2) ~is #false
  check dynamic(Char"a") > dynamic(Char"b") ~is #false
  check dynamic(Byte#"a") > dynamic(Byte#"b") ~is #false
  check dynamic("a") > dynamic("b") ~is #false
  check dynamic(#"a") > dynamic(#"b") ~is #false
  check dynamic(#'a) > dynamic(#'b) ~is #false
  check dynamic(#'~a) > dynamic(#'~b) ~is #false

  check dynamic(1) compares_equal dynamic(2) ~is #false
  check dynamic(Char"a") compares_equal dynamic(Char"b") ~is #false
  check dynamic(Byte#"a") compares_equal dynamic(Byte#"b") ~is #false
  check dynamic("a") compares_equal dynamic("b") ~is #false
  check dynamic(#"a") compares_equal dynamic(#"b") ~is #false
  check dynamic(#'a) compares_equal dynamic(#'b) ~is #false
  check dynamic(#'~a) compares_equal dynamic(#'~b) ~is #false

  check dynamic(1) compares_unequal dynamic(2) ~is #true
  check dynamic(Char"a") compares_unequal dynamic(Char"b") ~is #true
  check dynamic(Byte#"a") compares_unequal dynamic(Byte#"b") ~is #true
  check dynamic("a") compares_unequal dynamic("b") ~is #true
  check dynamic(#"a") compares_unequal dynamic(#"b") ~is #true
  check dynamic(#'a) compares_unequal dynamic(#'b) ~is #true
  check dynamic(#'~a) compares_unequal dynamic(#'~b) ~is #true

class A(v):
  nonfinal
  implements Comparable
  override method compare_to(other :~ A):
    v - other.v

class B():
  nonfinal
  extends A
  override method compare_to(other :~ A):
    other.v - v

class C():
  extends B

interface I3:
  extends Comparable

class A3(v):
  implements I3
  override method compare_to(other :~ A3):
    v - other.v

class A4(v):
  private implements Comparable
  private override method compare_to(other :~ A4):
    v - 2 * other.v

veneer S(this :: Flonum):
  private implements Comparable
  private override method compare_to(other :~ Flonum):
    math.exact(math.round(this - 2 * other))

check:
  A(1) < A(2) ~is #true
  A(1) < A(1) ~is #false
  A(1) < A(-1) ~is #false
  A(1) <= A(2) ~is #true
  A(1) <= A(1) ~is #true
  A(1) <= A(-1) ~is #false
  A(1) compares_equal A(1) ~is #true
  A(1) compares_equal A(2) ~is #false
  A(1) compares_unequal A(2) ~is #true
  A(1) compares_unequal A(1) ~is #false
  A(2) >= A(1) ~is #true
  A(1) >= A(1) ~is #true
  A(-1) >= A(1) ~is #false
  A(2) > A(1) ~is #true
  A(1) > A(1) ~is #false
  A(-1) > A(1) ~is #false

  B(2) < B(1) ~is #true
  B(2) > B(1) ~is #false

  C(2) < C(1) ~is #true
  C(2) > C(1) ~is #false

  C(2) < B(1) ~is #true
  B(2) > C(1) ~is #false

  A3(2) < A3(4) ~is #true
  A3(2) > A3(4) ~is #false

  A4(2) < A4(2) ~is #true
  A4(2) > A4(2) ~is #false

  S(2.0) < S(2.0) ~is #true
  S(2.0) > S(2.0) ~is #false

  (if #true | C(2) | B(2)) < B(1) ~is #true

  A(1).compare_to(A(2)) compares_equal A(1).compare_to(A(2)) ~is #true

block:
  use_dynamic
  check:
    dynamic(A(1)) < B(1) ~throws values(
      "cannot compare a comparable object and other comparable object",
      "two comparable objects must share the same `compare_to` implementation",
    )

check:
  A(1) is_a Comparable ~is #true
  B(1) is_a Comparable ~is #true
  C(1) is_a Comparable ~is #true
  A4(1) is_a Comparable ~is #true

  { 1: 2 } is_a Comparable ~is #false
  { 1, 2 } is_a Comparable ~is #false
  [1, 2] is_a Comparable ~is #false
  1 is_a Comparable ~is #true
  1/2 is_a Comparable ~is #true
  1.0 is_a Comparable ~is #true
  #inf is_a Comparable ~is #true
  math.sqrt(-1) is_a Comparable ~is #false
  "apple" is_a Comparable ~is #true
  #"apple" is_a Comparable ~is #true
  #'apple is_a Comparable ~is #true
  #'~apple is_a Comparable ~is #true

check:
  class NotComparable()
  (NotComparable() :~ Comparable) < NotComparable()
  ~throws values(
    "Comparable.compare_to: contract violation",
    "expected: Comparable",
    "given: NotComparable()",
  )

block:
  use_dynamic
  fun gen():
    // check that generated `compare_to` method is fresh
    class A():
      implements Comparable
      override method compare_to(other):
        0
    A()
  check:
    gen() < gen() ~throws values(
      "cannot compare a comparable object and other comparable object",
      "two comparable objects must share the same `compare_to` implementation",
    )
    dynamic(1) < 2 ~is #true
    dynamic(#'a) > #'z ~is #false

block:
  class Broken():
    implements Comparable
    override method compare_to(other):
      "no"
  check Broken() < Broken() ~throws values(
    "result does not satisfy annotation",
    "Int",
    "\"no\"",
  )

block:
  class Broken():
    implements Comparable
    override method compare_to(other):
      values("oops", "wow")
  check Broken() < Broken() ~throws values(
    "results do not satisfy annotation",
    "Int",
    "\"oops\"", "\"wow\"",
  )
  check (Broken() :: Comparable) < Broken() ~throws values(
    "results do not satisfy annotation",
    "Int",
    "\"oops\"", "\"wow\"",
  )
  check Broken() < (Broken() :: Comparable) ~throws values(
    "results do not satisfy annotation",
    "Int",
    "\"oops\"", "\"wow\"",
  )

check:
  ~eval
  use_static
  1 < "a"
  ~throws "incompatible specializations from arguments"

check:
  ~eval
  use_static
  "a" < 1
  ~throws "incompatible specializations from arguments"

check:
  class A(v):
    implements Comparable
    override method compare_to(other :~ A):
      v - other.v
  class A2(v):
    implements Comparable
    override method compare_to(other :~ A2):
      v - other.v
  A(0) < A2(1)
  ~throws "cannot compare a comparable object and other comparable object"

check:
  ~eval
  use_static
  class A(v):
    implements Comparable
    override method compare_to(other :~ A):
      v - other.v
  class A2(v):
    implements Comparable
    override method compare_to(other :~ A2):
      v - other.v
  fun (x): (if x | A(0) | A2(1)) < x
  ~throws "specialization not known"

check:
  class A(v):
    nonfinal
    implements Comparable
    override method compare_to(other :~ A):
      v - other.v
  class B():
    nonfinal
    extends A
    override method compare_to(other :~ A):
      other.v - v
  A(0) < B(1)
  ~throws "cannot compare a comparable object and other comparable object"

block:
  // says that 1 is < and > anything
  class Weird(v):
    implements Comparable
    override method compare_to(other :~ Weird):
      v - other.v
    override method less(other):
      if v == 1 | #true | compare_to(other) < 0
    override method greater(other):
      if v == 10 | #true | compare_to(other) > 0
  check Weird(1) < Weird(0) ~is #true
  check Weird(10) > Weird(20) ~is #true
  check Weird(2) < Weird(0) ~is #false
  check Weird(0) > Weird(20) ~is #false
  check Weird(1) <= Weird(0) ~is #false
  check Weird(1) >= Weird(2) ~is #false
  check Weird(1) compares_equal Weird(0) ~is #false
  check Weird(1) compares_unequal Weird(0) ~is #true

block:
  // says that 1 is <=, >=, =, and !=  anything
  class Weird(v):
    implements Comparable
    override method compare_to(other :~ Weird):
      v - other.v
    override method less_or_equal(other):
      if v == 1 | #true | compare_to(other) < 0
    override method greater_or_equal(other):
      if v == 10 | #true | compare_to(other) > 0
    override method compares_equal(other):
      if v == 100 | #true | compare_to(other) == 0
    override method compares_unequal(other):
      if v == 1000 | #true | compare_to(other) != 0
  check Weird(1) <= Weird(0) ~is #true
  check Weird(10) >= Weird(20) ~is #true
  check Weird(100) compares_equal Weird(0) ~is #true
  check Weird(1000) compares_unequal Weird(0) ~is #true
  check Weird(1) < Weird(0) ~is #false
  check Weird(1) > Weird(2) ~is #false
  check Weird(2) <= Weird(0) ~is #false
  check Weird(0) >= Weird(20) ~is #false
  check Weird(200) compares_equal Weird(0) ~is #false
  check Weird(0) compares_unequal Weird(0) ~is #false

block:
  // says that 1 is < and > anything, veneer variant
  veneer Weird(this :: Int):
    implements Comparable
    override method compare_to(other :~ Weird):
      this - other
    override method less(other):
      if this == 1 | #true | compare_to(other) < 0
    override method greater(other):
      if this == 10 | #true | compare_to(other) > 0
  check Weird(1) < Weird(0) ~is #true
  check Weird(10) > Weird(20) ~is #true
  check Weird(2) < Weird(0) ~is #false
  check Weird(0) > Weird(20) ~is #false
  check Weird(1) <= Weird(0) ~is #false
  check Weird(1) >= Weird(2) ~is #false
  check Weird(1) compares_equal Weird(0) ~is #false
  check Weird(1) compares_unequal Weird(0) ~is #true

block:
  // says that 1 is <=, >=, =, and !=  anything, veneer variant
  veneer Weird(this :: Int):
    implements Comparable
    override method compare_to(other :~ Weird):
      this - other
    override method less_or_equal(other):
      if this == 1 | #true | compare_to(other) < 0
    override method greater_or_equal(other):
      if this == 10 | #true | compare_to(other) > 0
    override method compares_equal(other):
      if this == 100 | #true | compare_to(other) == 0
    override method compares_unequal(other):
      if this == 1000 | #true | compare_to(other) != 0
  check Weird(1) <= Weird(0) ~is #true
  check Weird(10) >= Weird(20) ~is #true
  check Weird(100) compares_equal Weird(0) ~is #true
  check Weird(1000) compares_unequal Weird(0) ~is #true
  check Weird(1) < Weird(0) ~is #false
  check Weird(1) > Weird(2) ~is #false
  check Weird(2) <= Weird(0) ~is #false
  check Weird(0) >= Weird(20) ~is #false
  check Weird(200) compares_equal Weird(0) ~is #false
  check Weird(0) compares_unequal Weird(0) ~is #false
