#lang rhombus

// different repetition depths at same template depth
block:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  def [y, ...] = ["a", "b", "c"]
  def one = 1

  check:
    '([$x, $y] ... $0) ...
     {$y, $one} ...'
    ~matches '([1, "a"] [2, "b"] [3, "c"] 0) ([4, "a"] [5, "b"] [6, "c"] 0) ([7, "a"] [8, "b"] [9, "c"] 0)
              {"a", 1} {"b", 1} {"c", 1}'
  check:
    ['$y', ...]
    ~matches ['"a"', '"b"', '"c"']
  check:
    ['x: $x; ...', ...]
    ~matches ['x: 1; 2; 3', 'x: 4; 5; 6', 'x: 7; 8; 9']

block:
  check:
    '$[1, 2] 3'
    ~matches '1 2 3'
  check:
    '$('1 2') 3'
    ~matches '1 2 3'
  check:
    '$('1') 3'
    ~matches '1 3'
  check:
    '0 $[1, 2]'
    ~matches '0 1 2'
  check:
    '0 $[1, 2] 3'
    ~matches '0 1 2 3'

  def [x, ...] = [1, 2, 3]
  check:
    '0 $[x, ...]'
    ~matches '0 1 2 3'
  check:
    '0 $['+', x] ...'
    ~matches '0 + 1 + 2 + 3'
  check:
    '0 $('+ $x') ...'
    ~matches '0 + 1 + 2 + 3'

  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    '0 $[z, ...] ...'
    ~matches '0 1 2 3 4 5'

check:
  def '...': '...'
  ~completes

check:
  def '$('...')': '...'
  ~completes

check:
  def '1 $x 3' = '1 2 3'
  x
  ~matches '2'

check:
  def '1 $('$x') 3' = '1 2 3'
  x
  ~matches '2'

check:
  def '1 $('$x 3') 4' = '1 2 3 4'
  x
  ~matches '2'

check:
  def '1 $('$x ...') 4' = '1 2 3 4'
  [x, ...]
  ~matches ['2', '3']

check:
  def '$('a b $x')' = 'a b c'
  x
  ~matches 'c'

check:
  def '$('a b $x'); ...' = 'a b c; a b d'
  [x, ...]
  ~matches ['c', 'd']

check:
  ~eval
  'x $'
  ~throws "misplaced escape"

check:
  ~eval
  'x
   $'
  ~throws "misplaced escape"

check:
  ~eval
  '... x'
  ~throws "misplaced repetition"

check:
  ~eval
  '...
   x'
  ~throws "misplaced repetition"

check:
  ~eval
  def '0 $('1; 2') 3' = '0 1; 2'
  ~throws "multi-group pattern incompatible with term context"

check:
  ~eval
  def '0 $('1; 2')' = '0 1; 2'
  ~throws "multi-group pattern incompatible with group context"

check:
  ~eval
  def '(0, $('1; 2'))' = '(0, 1, 2)'
  ~throws "multi-group pattern incompatible with group context"

check:
  '1 $('')'
  ~matches '1'

check:
  def g = ''
  '3 + (1, $g $g)'
  ~throws "generated an empty group"

check:
  def ['(($b_var_id), ...)', ...]: ['((1), (2 2), (3))', '((4))']
  [b_var_id, ..., ...]
  ~matches ['1', '2 2', '3', '4']

block:
  // check that pattern bindings work with `let`
  check:
    let x = "no"
    fun f(): x
    let '$x' = '6'
    [x, f()]
    ~matches ['6', "no"]
  check:
    let [x, ...] = ["yes", "no"]
    fun f(): [x, ...]
    let '$x ...' = '6 7 8'
    [[x, ...], f()]
    ~matches [['6', '7', '8'], ["yes", "no"]]

check:
  match #void
  | '#void': "ok"
  ~is "ok"

check:
  '#void'.unwrap() ~is #void

// prevent construction of ill-formed groups
block:
  def a = '| 12 | 13'
  def b = ': 1'
  let [ts, ...] = [b, b]
  check:
    '$b $a' ~matches ':« 1 » | 12 | 13'
    'head $b $a' ~matches 'head:« 1 » | 12 | 13'
    'apple $[a, '8']' ~throws "alternatives not allowed in non-tail position of a group"
    'apple $[b, '8']' ~throws "block not allowed in non-tail position of a group"
    '$b $b' ~throws "block not allowed in non-tail position of a group"
    'head $b $b' ~throws "block not allowed in non-tail position of a group"
    '$a $a' ~throws "alternatives not allowed in non-tail position of a group"
    'head $a $a' ~throws "alternatives not allowed in non-tail position of a group"
    '$[b, b]' ~throws "block not allowed in non-tail"
    'head $[b, b]' ~throws "block not allowed in non-tail"
    'head $[a, a]' ~throws "alternatives not allowed in non-tail position of a group"
    '$ts ...' ~throws "block not allowed in non-tail position of a group"
    'head $ts ...' ~throws "block not allowed in non-tail position of a group"
    '$[ts] ...' ~throws "block not allowed in non-tail position of a group"


check:
  match '1 2: a b'
  | '$_ ...: a': "ok"
  ~throws "unexpected term" // not "expected more terms"
check:
  match '1 2: a b'
  | '$_ ... $_ ...: a': "ok"
  ~throws "unexpected term" // not "expected more terms"
check:
  match '1 2: a b'
  | '$_ ... 1 ...: a': "ok"
  ~throws "unexpected term" // not "expected more terms"
check:
  match '1 2 | a b'
  | '$_ ... | a': "ok"
  ~throws "unexpected term" // not "expected more terms"
check:
  match '1 2 | a b'
  | '$_ ...: a': "ok"
  ~throws "expected a `:` block"

check:
  match '(1)':
  | '(1 $y)':
      match y
      | '': "ok"
  ~is "ok"

// Make sure multi-element syntax can be replicated for a repetition
check:
  def [x, ...] = [1, 2, 3]
  def body = '1 2'
  '$x: $body
   ...'
  ~prints_like '1: 1 2
                2: 1 2
                3: 1 2'

// regression check for an error message
check:
  match 'hi 1'
  | 'hi $('$')': "ok"
  ~throws "expected the operator `$`"

// check group-sequence splicing
block:
  // tail
  check:
    match 'a 1 b 2 c 3 d 4'
    | '$('$a $something_a $b $something_b') ...':
        'block:
           $('let $a = $something_a
              let $b = $something_b')
           ...'
    ~matches 'block:
                let a = 1
                let b = 2
                let c = 3
                let d = 4'
  // non-tail
  check:
    match 'a 1 b 2 c 3 d 4'
    | '$('$a $something_a $b $something_b') ...':
        'block:
           $('let $a = $something_a
              let $b = $something_b')
           ...
           done'
    ~matches 'block:
                let a = 1
                let b = 2
                let c = 3
                let d = 4
                done'
  // non-tail, empty sequence after
  check:
    match 'a 1 b 2 c 3 d 4'
    | '$('$a $something_a $b $something_b') ...':
        'block:
           $('let $a = $something_a
              let $b = $something_b')
           ...
           $('')'
    ~matches 'block:
                let a = 1
                let b = 2
                let c = 3
                let d = 4'
