#lang rhombus

block:
  def π = 3.14
  check:
    π
    ~is 3.14
  check:
    def (((ππ))) = π * π
    ππ
    ~is math.expt(3.14, 2)

check:
  def (ma, mb, mc):
    values("1", "2", "3")
  [ma, mb, mc]
  ~is ["1", "2", "3"]

check:
  def values(ma, mb, mc):
    values("1", "2", "3")
  [ma, mb, mc]
  ~is ["1", "2", "3"]

check:
  def values(x, [y, ...]): values(0, [1, 2, 3])
  [y, ..., x]
  ~is [1, 2, 3, 0]

check:
  ~eval
  def x where x = 1 = 2
  ~throws "multiple immediate equals not allowed in this group"

check:
  ~eval
  def | x = 2
  ~throws "alternatives are not supported here"

check:
  def (1, 2) = values(1, 1)
  #void
  ~throws values(
    "value does not satisfy annotation",
    "1",
    "2nd",
    "matching(2)",
  )

check:
  def (1, 2) = values(2, 2)
  #void
  ~throws values(
    "value does not satisfy annotation",
    "2",
    "1st",
    "matching(1)",
  )

check:
  use_static
  def str = (fun () :: String: "a string")()
  str.length()
  ~is 8

check:
  use_static
  def str = (fun () :: (String): "a string")()
  str.length()
  ~is 8

check:
  use_static
  def (str) = (fun () :: String: "a string")()
  str.length()
  ~is 8

check:
  use_static
  def (str) = (fun () :: (String): "a string")()
  str.length()
  ~is 8

check:
  ~eval
  use_static
  def str = (fun () :~ (String, String): "a string")()
  str.length()
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  def (str) = (fun () :~ (String, String): "a string")()
  str.length()
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  def (str, _) = (fun () :~ String: values("a string", "another"))()
  str.length()
  ~throws "no such field or method (based on static information)"

// check that expansion of `def` does not end with an expression
check:
  ~eval
  block:
    def [1, 2] = [1, 2]
  ~throws "block does not end with an expression"
