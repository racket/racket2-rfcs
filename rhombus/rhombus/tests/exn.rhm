#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    error(msg, clause, ...)

block:
  use_static
  def v:
    try:
      parameterize { Evaluator.current: Evaluator.make_rhombus() }:
        eval('fun')
      ~catch x:
        x
  check:
    (v :: Exn.Fail.Syntax).exprs[0].unwrap()
    ~matches ['fun']
  check:
    def e :: Exn.Fail.Syntax = v
    e.exprs[0].unwrap()
    ~matches ['fun']
  check:
    Exn.Fail.Syntax.exprs(v)[0].unwrap()
    ~matches ['fun']
  check:
    use_dynamic
    v.exprs[0].unwrap()
    ~matches ['fun']

  check:
    def v = Exn.Fail.Read("hi", Continuation.Marks.current(), PairList[Srcloc(1, 2, 3, 4, 5)])
    match v
    | Exn.Fail.Read(a, b, srcs): srcs[0].line
    ~is 2
  check:
    String.substring((v :: Exn).message, 0, 63) ~is "fun: expected dotted identifier sequence or expected more terms"
    String.substring(Exn.message(v), 0, 63) ~is "fun: expected dotted identifier sequence or expected more terms"
  block:
    use_dynamic
    check:
      String.substring(v.message, 0, 63) ~is "fun: expected dotted identifier sequence or expected more terms"

block:
  use_static
  class ExExn(index):
    extends Exn.Fail.Syntax
  def v = ExExn("oops", Continuation.Marks.current(), PairList['bad'], 75)
  check:
    v.message ~is "oops"
    v.index ~is 75
    v is_a Exn ~is #true

block:
  def v = Exn.Fail.Annot("annot", Continuation.Marks.current(), PairList[Srcloc(1, 2, 3, 4, 5)])
  check:
    match v
    | Exn.Fail.Annot(a, b, srcs): srcs[0].line
    ~is 2
  check:
    use_static
    v.srclocs[0].line
    ~is 2
  check:
    dynamic(v).srclocs[0].line
    ~is 2

check:
  repr(Exn.Fail.Annot("annot", Continuation.Marks.current(), PairList[Srcloc(1, 2, 3, 4, 5)]))
  ~is "Exn.Fail.Annot(\"annot\", #<continuation-marks>, PairList[Srcloc(1, 2, 3, 4, 5)])"

check:
  error(~who: #'example, "~a oops")
  ~throws "~a oops"

block:
  check:
    error(~who: "who-str", "message")
    ~throws values("who-str: ", "message")
  check:
    error(~who: #'who_sym, "message")
    ~throws values("who_sym: ", "message")
  check:
    error(~who: Syntax.make(#'who_id), "message")
    ~throws values("who_id: ", "message")
  check:
    error(~who: Syntax.make_op(#'who_op), "message")
    ~throws values("who_op: ", "message")
  check:
    error(~who: Syntax.make_op(#'who_op).source_properties("PREFIX", "the who", "!", "SUFFIX"), "message")
    ~throws values("the who!: ", "message")
  check:
    error(~who: 'some.namespace.function', "message")
    ~throws values("some.namespace.function: ", "message")
  check:
    error(~who: 'some .  namespace .function', "message")
    ~throws values("some .  namespace .function: ", "message")
  check:
    error(~who: '+++', "message")
    ~throws values("+++: ", "message")
  check:
    error(~who: 'some.namespace.(+++)', "message")
    ~throws values("some.namespace.(+++): ", "message")

block:
  check:
    error(~srcloc: Srcloc("file", 1, 2, 3, 4), "message")
    ~throws values("file:1:2", "message")
  check:
    error(~srcloc: Srcloc("file", 1, #false, 3, 4), "message")
    ~throws values("file::3", "message")

block:
  import:
    meta -1: rhombus/meta open
    lib("racket/base.rkt")
  parameterize { base.#{error-print-source-location}: #true }:
    check:
      syntax_meta.error("wrong form")
      ~throws "wrong form"
    version_guard.at_least "8.15.0.2":
      check:
        syntax_meta.error('garbage + 2')
        ~throws values("garbage: ",  "bad syntax", "garbage + 2")
      check:
        syntax_meta.error("all wrong", 'garbage + 2')
        ~throws values("garbage: ", "all wrong", "garbage + 2")
      check:
        syntax_meta.error("all wrong", 'garbage + 2', 'extra1')
        ~throws values("garbage: ", "all wrong", "garbage + 2", "extra1")
    check:
      syntax_meta.error(~who: "my_form", 'garbage + 2')
      ~throws values("my_form: ", "bad syntax", "garbage + 2")
    check:
      syntax_meta.error(~who: "my_form", "all wrong", 'garbage + 2')
      ~throws values("my_form: ", "all wrong", "garbage + 2")
    check:
      syntax_meta.error(~who: "my_form", "all wrong", 'garbage + 2', 'extra1')
      ~throws values("my_form: ", "all wrong", "garbage + 2", "extra1")
    check:
      syntax_meta.error(~who: "my_form", "all wrong", 'garbage + 2', ['extra1', 'extra2'])
      ~throws values("my_form: ", "all wrong", "garbage + 2", "extra1")
    check:
      syntax_meta.error(~who: #'my_form, 'garbage + 2')
      ~throws values("my_form: ", "bad syntax", "garbage + 2")
    check:
      syntax_meta.error(~who: 'my_form', 'garbage + 2')
      ~throws values("my_form: ", "bad syntax", "garbage + 2")
    check:
      syntax_meta.error(~who: '+++', 'garbage + 2')
      ~throws values("+++: ", "bad syntax", "garbage + 2")
    check:
      syntax_meta.error(~who: 'my_ns.my_form', 'garbage + 2')
      ~throws values("my_ns.my_form: ", "bad syntax", "garbage + 2")
    check:
      syntax_meta.error(~who: 'my_ns.(++)', 'garbage + 2')
      ~throws values("my_ns.(++): ", "bad syntax", "garbage + 2")
