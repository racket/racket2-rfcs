#lang rhombus/static/and_meta
import:
  "path.rhm"!path_help open
  rhombus/runtime_path
  "version_guard.rhm"

runtime_path.def path_rhm: "path.rhm"

def windows: system.type() == #'windows

fun current_seconds():
  import lib("racket/base.rkt")
  base.#{current-seconds}()

block:
  import "static_arity.rhm"
  static_arity.check:
    filesystem.simplify_path(p)
    filesystem.normalize_path(p)
    filesystem.resolve_path(p)
    filesystem.expand_user_path(p)
    filesystem.file_exists(p)
    filesystem.directory_exists(p)
    filesystem.link_exists(p)

block:
  // assuming "x" in the current directory is not a link!
  check filesystem.simplify_path(Path("x")) ~is Path("x")
  check filesystem.simplify_path("x") ~is Path("x")
  check filesystem.simplify_path(Path("x")).string() ~is "x"
  check_annot filesystem.simplify_path(cross_p)

block:
  // assuming "x" in the current directory is not a link!
  check filesystem.normalize_path(Path("x")) ~is Path("x").to_absolute_path()
  check filesystem.normalize_path("x") ~is Path("x").to_absolute_path()
  check filesystem.normalize_path(Path("x")).string() ~is Path("x").to_absolute_path().string()
  check_annot filesystem.normalize_path(cross_p)

block:
  // assuming "x" in the current directory is not a link!
  check filesystem.resolve_path(Path("x")) ~is Path("x")
  check filesystem.resolve_path("x") ~is Path("x")
  check filesystem.resolve_path(Path("x")).string() ~is "x"
  check_annot filesystem.resolve_path(cross_p)

block:
  // assuming "x" in the current directory is not a link!
  check filesystem.expand_user_path(Path("x")) ~is_a Path
  check filesystem.expand_user_path("x") ~is_a Path
  check filesystem.expand_user_path(Path("x")).string() ~is_a String
  when CrossPath.Convention.current() == #'unix
  | check filesystem.expand_user_path(Path("~no_such_user")) ~throws "bad username"
    check filesystem.expand_user_path(Path("~no_such_user")).string() ~throws "bad username"
  check_annot filesystem.expand_user_path(#'same)
  check_annot filesystem.expand_user_path(cross_p)

block:
  check filesystem.file_exists(Path(path_rhm)) ~is #true
  check filesystem.directory_exists(Path(path_rhm)) ~is #false
  check filesystem.directory_exists(Path(path_rhm).to_absolute_path().parent()) ~is #true
  check filesystem.link_exists(Path(path_rhm)) ~is #false
  check_annot filesystem.file_exists(cross_p)
  check_annot filesystem.directory_exists(cross_p)
  check_annot filesystem.link_exists(cross_p)

block:
  let tmp_obj = filesystem.make_temporary(~as: #'directory)
  check tmp_obj ~is_a filesystem.Temporary
  let tmp = tmp_obj.path
  check tmp.parent() ~is system.path(#'temp_dir)
  check filesystem.directory_exists(tmp) ~is #true

  block:
    let x:
      Closeable.let x = filesystem.make_temporary(~in: tmp)
      check filesystem.file_exists(x.path) ~is #true
      x.path
    check filesystem.file_exists(x) ~is #false

  block:
    let x:
      Closeable.let x = filesystem.make_temporary(~as: #'directory, ~in: tmp)
      check filesystem.directory_exists(x.path) ~is #true
      Port.Output.open_file(x.path.add("y")).close()
      x.path
    check filesystem.directory_exists(x) ~is #false

  let x = tmp.add("x")
  block:
    Closeable.let f = Port.Output.open_file(x)
    f.write_bytes(#"hello world")
  check filesystem.file_exists(x) ~is #true

  let d = tmp.add("d")
  check filesystem.make_directory(d) ~is #void
  check filesystem.directory_exists(d) ~is #true

  let y = d.add("y")
  fun make_y():
    Port.Output.open_file(y).close()
  make_y()
  check filesystem.file_exists(y) ~is #true

  let nonesuch = tmp.add("nonesuch")

  let link = !windows && tmp.add("link")
  let link2 = !windows && tmp.add("link2")
  let dlink = !windows && tmp.add("dlink")
  fun make_link2():
    filesystem.make_link("nonesuch", link2)
  unless windows
  | filesystem.make_link("x", link)
    make_link2()
    filesystem.make_link("d", dlink)

  check filesystem.link_exists(tmp) ~is #false
  check filesystem.link_exists(x) ~is #false
  check filesystem.link_exists(d) ~is #false
  unless windows
  | check filesystem.link_exists(link) ~is #true
    check filesystem.link_exists(link2) ~is #true
    check filesystem.file_exists(link) ~is #true
    check filesystem.directory_exists(link) ~is #false
    check filesystem.file_exists(link2) ~is #false
    check filesystem.directory_exists(link2) ~is #false
    check filesystem.file_exists(dlink) ~is #false
    check filesystem.directory_exists(dlink) ~is #true

  check filesystem.type(x) ~is #'file
  check filesystem.type(tmp) ~is #'directory
  check filesystem.type(d) ~is #'directory
  check filesystem.type(link) ~is !windows && #'link
  check filesystem.type(link2) ~is !windows && #'link
  check filesystem.type(dlink) ~is !windows && #'link

  check filesystem.files(d) ~is [Path("y")]
  check filesystem.files(d, ~recur: #true) ~is [Path("y")]
  check filesystem.files(x) ~throws "filesystem.files:"
  check filesystem.files(nonesuch) ~throws "filesystem.files:"

  let all_files = (["d", Path("d").add("y")] ++ (if windows | [] | ["dlink", "link", "link2"]) ++ ["x"]).map(Path)
  let all_immediate_files = all_files.remove(Path("d").add("y"))
  check filesystem.files(tmp) ~is all_immediate_files
  check filesystem.files(tmp, ~add_path: #true) ~is all_immediate_files.map(Path.add(tmp, _))
  check filesystem.files(tmp, ~recur: #true) ~is all_files
  check filesystem.files(tmp, ~recur: #true, ~add_path: #true) ~is all_files.map(Path.add(tmp, _))
  check:
    filesystem.files(tmp, ~recur: #true, ~follow_links: #true)
    ~is List.append(& for List(f: all_files):
                      if f == Path("dlink")
                      | [Path("dlink"), Path("dlink").add("y")]
                      | [f])
  check:
    filesystem.files(tmp, ~skip: fun (x): x == Path("d"))
    ~is all_immediate_files.remove(Path("d"))
  check:
    filesystem.files(tmp, ~keep: fun (x): x != Path("d"))
    ~is all_immediate_files.remove(Path("d"))
  check:
    filesystem.files(tmp, ~skip: fun (x): x == Path("x"))
    ~is all_immediate_files.remove(Path("x"))
  check:
    filesystem.files(tmp, ~keep: fun (x): x != Path("x"))
    ~is all_immediate_files.remove(Path("x"))
  check:
    filesystem.files(tmp, ~recur: #true, ~skip: fun (x): x == Path("d"))
    ~is all_immediate_files.remove(Path("d"))
  check:
    filesystem.files(tmp,
                     ~keep: fun (x): x != Path("d"),
                     ~skip: fun (x): x == Path("x"))
    ~is all_immediate_files.remove(Path("d")).remove(Path("x"))
  check:
    filesystem.files(tmp,
                     ~keep: fun (x): x == Path("d"),
                     ~skip: fun (x): x != Path("x"))
    ~is []
  check:
    filesystem.files(tmp,
                     ~keep: fun (x): x == Path("d"),
                     ~skip: fun (x): x != Path("d"))
    ~is [Path("d")]

  check filesystem.roots() ~is_a List
  when !windows
  | check filesystem.roots() ~is [Path("/")]

  check filesystem.rename(x, tmp.add("x_new")) ~is #void
  check filesystem.files(tmp) ~is (for List (f in all_immediate_files):
                                     if f == Path("x")
                                     | Path("x_new")
                                     | f)
  check filesystem.rename(tmp.add("x_new"), x) ~is #void
  check filesystem.rename(x, y) ~throws "filesystem.rename"
  check filesystem.rename(x, y, ~exists_ok: #true) ~is #void
  check filesystem.files(tmp) ~is all_immediate_files.remove(Path("x"))
  check filesystem.rename(y, x) ~is #void
  make_y()

  check filesystem.delete(y) ~is #void
  check filesystem.files(tmp) ~is all_immediate_files.remove(Path("y"))
  check filesystem.delete(d, ~as: #'file) ~throws "filesystem.delete:"
  check filesystem.delete(d, ~as: #'file, ~must_exist: #false) ~throws "filesystem.delete:"
  check filesystem.delete(d) ~is #void
  filesystem.make_directory(d)
  make_y()
  check filesystem.delete(y, ~as: #'directory) ~throws "filesystem.delete:"
  check filesystem.delete(y, ~as: #'directory, ~must_exist: #false) ~throws "filesystem.delete:"
  check filesystem.delete(d) ~throws "filesystem.delete:"
  check filesystem.delete(d, ~recur: #true) ~is #void
  check filesystem.type(y) ~is #false
  check filesystem.type(d) ~is #false
  check filesystem.delete(d, ~must_exist: #false) ~is #void
  check filesystem.delete(d) ~throws "filesystem.delete:"
  filesystem.make_directory(d)
  make_y()

  check filesystem.size(tmp) ~throws "filesystem.size:"
  check filesystem.size(x) ~is 11
  check filesystem.size(d) ~throws "filesystem.size:"
  check filesystem.size(link) ~is filesystem.size(x)
  check filesystem.size(link2) ~throws "filesystem.size:"

  version_guard.at_least "8.15.0.4":
    check filesystem.modify_seconds(tmp) ~is_a Int
    check filesystem.modify_seconds(x) ~is_a Int
    when !windows
    | check filesystem.modify_seconds(link) ~is filesystem.modify_seconds(x)
      check filesystem.modify_seconds(dlink) ~is filesystem.modify_seconds(d)
    check filesystem.modify_seconds(link2) ~throws "filesystem.modify_seconds:"
    check filesystem.modify_seconds(nonesuch) ~throws "filesystem.modify_seconds:"
    check filesystem.modify_seconds(link, ~must_exist: #false) ~is !windows && filesystem.modify_seconds(x)
    check filesystem.modify_seconds(link2, ~must_exist: #false) ~is #false
    check filesystem.modify_seconds(nonesuch, ~must_exist: #false) ~is #false
    let now = current_seconds()
    check filesystem.modify_seconds(x) .<= now ~is #true
    check filesystem.modify_seconds(x, ~set_to: now) ~is #void
    check filesystem.modify_seconds(x) ~is now
    check filesystem.modify_seconds(x, ~set_to: now-100) ~is #void
    check filesystem.modify_seconds(x) ~is now-100
    when !windows
    | check filesystem.modify_seconds(link, ~set_to: now) ~is #void
      check filesystem.modify_seconds(link) ~is now
      check filesystem.modify_seconds(x) ~is now

  check filesystem.permissions(tmp) ~is { #'read, #'write, #'execute }
  check filesystem.permissions(x) ~is { #'read, #'write }
  check filesystem.permissions(d) ~is { #'read, #'write, #'execute }
  when !windows
  | check filesystem.permissions(link) ~is { #'read, #'write }
  check filesystem.permissions(x, ~set_to: 0o444) ~is #void
  check filesystem.permissions(x) ~is { #'read }
  check filesystem.permissions(x, ~bits: #true) bits.and 0o777 ~is 0o444
  check filesystem.permissions(x, ~set_to: 0o666) ~is #void
  check filesystem.permissions(x) ~is { #'read, #'write }

  check filesystem.identity(tmp) ~is_a PosInt
  check filesystem.identity(x) ~is_a PosInt
  check filesystem.identity(d) ~is_a PosInt
  check filesystem.identity(tmp, ~follow_links: #true) ~is filesystem.identity(tmp)
  check filesystem.identity(x, ~follow_links: #true) ~is filesystem.identity(x)
  check filesystem.identity(x) == filesystem.identity(tmp) ~is #false
  check filesystem.identity(d) == filesystem.identity(tmp) ~is #false
  unless windows
  | check filesystem.identity(x) == filesystem.identity(link) ~is #true
    check filesystem.identity(x) == filesystem.identity(link, ~follow_links: #false) ~is #false

  check filesystem.stat(tmp) ~is_a Map
  check filesystem.stat(x) ~is_a Map
  check filesystem.stat(x, ~follow_links: #false) ~is filesystem.stat(x)
  unless windows
  | check filesystem.stat(link) ~is filesystem.stat(x)
    check filesystem.stat(link, ~follow_links: #false) == filesystem.stat(x) ~is #false
  check filesystem.stat(nonesuch) ~throws "filesystem.stat:"

  check filesystem.read_bytes(x) ~is_now #"hello world"
  check filesystem.read_string(x) ~is "hello world"
  check filesystem.read_bytes_lines(x) ~is_now [#"hello world"]
  check filesystem.read_lines(x) ~is ["hello world"]
  block:
    let inode = filesystem.identity(x)
    block:
      Closeable.let f = Port.Output.open_file(x, ~exists: #'truncate)
      for (i in 0..4096):
        println("hello world", ~out: f)
    check filesystem.identity(x) ~is inode
  check filesystem.size(x) ~is 12*4096
  check filesystem.read_bytes(x) ~is_now Bytes.append(& for List (i in 0..4096): #"hello world\n")
  check filesystem.read_string(x) ~is String.append(& for List (i in 0..4096): "hello world\n")
  check filesystem.read_bytes_lines(x) ~is_now for List (i in 0..4096): #"hello world"
  check filesystem.read_lines(x) ~is for List (i in 0..4096): "hello world"

  check filesystem.write_bytes(x, #"hello world") ~throws "filesystem.write_bytes:"
  check filesystem.write_bytes(x, #"hello world", ~exists: #'truncate) ~is #void
  check filesystem.write_string(x, "hello world", ~exists: #'truncate) ~is #void
  check filesystem.read_string(x) ~is "hello world"

  version_guard.at_least "8.15.0.4":
    block:
      Closeable.let tmp2_obj = filesystem.make_temporary(~as: #'directory)
      let tmp2 = tmp2_obj.path

      let ex = tmp2.add("ex")
      check filesystem.copy(x, ex) ~is #void
      check filesystem.file_exists(ex) ~is #true
      check filesystem.size(ex) ~is filesystem.size(x)
      check filesystem.copy(y, ex) ~throws "filesystem.copy:"
      check filesystem.copy(y, ex, ~exists_ok: #true) ~is #void
      check filesystem.size(ex) ~is filesystem.size(y)
      check filesystem.permissions(ex) ~is filesystem.permissions(y)
      filesystem.delete(ex)
      check filesystem.copy(x, ex, ~permissions: 0o444) ~is #void
      check filesystem.permissions(ex) ~is { #'read }
      filesystem.delete(ex)
      check filesystem.copy(x, ex, ~permissions: 0o777, ~replace_permissions: #true) ~is #void
      check filesystem.permissions(ex, ~bits: #true) ~is 0o777
      check filesystem.copy(x, ex, ~exists_ok: #true) ~is #void
      check filesystem.permissions(ex) ~is filesystem.permissions(x)
      check filesystem.copy(x, ex, ~exists_ok: #true, ~keep_modify_seconds: #true) ~is #void
      check filesystem.modify_seconds(ex) ~is filesystem.modify_seconds(x)

      let sub = tmp2.add("sub")
      check filesystem.copy(tmp, sub, ~recur: #true, ~follow_links: #false) ~is #void
      check filesystem.files(sub, ~recur: #true) ~is filesystem.files(tmp, ~recur: #true)
      filesystem.delete(sub, ~recur: #true)

      unless windows
      | check filesystem.copy(tmp, sub, ~recur: #true) ~throws values("filesystem.copy:", "link2")
        filesystem.delete(sub, ~recur: #true)
        filesystem.delete(link2)
      check filesystem.copy(tmp, sub, ~recur: #true) ~is #void
      check filesystem.files(sub, ~recur: #true) ~is filesystem.files(tmp, ~recur: #true, ~follow_links: #true)
      unless windows
      | make_link2()
      filesystem.delete(sub, ~recur: #true)

      check filesystem.copy(tmp, sub, ~recur: #true, ~follow_links: #false, ~keep_modify_seconds: #true) ~is #void
      for (f: filesystem.files(sub, ~recur: #true)):
        check filesystem.type(sub.add(f)) ~is filesystem.type(tmp.add(f))
        when filesystem.file_exists(sub.add(f)) || filesystem.directory_exists(sub.add(f))
        | check filesystem.permissions(sub.add(f)) ~is filesystem.permissions(tmp.add(f))
        when filesystem.file_exists(sub.add(f))
        | check filesystem.modify_seconds(sub.add(f)) ~is filesystem.modify_seconds(tmp.add(f))
      filesystem.delete(sub, ~recur: #true)

    block:
      let tmp3 = filesystem.make_temporary(~in: tmp, ~as: x).path
      check filesystem.file_exists(tmp3) ~is #true
      check filesystem.size(tmp3) ~is filesystem.size(x)
      let mutable tries = 0
      let tmp4 = filesystem.make_temporary(~in: tmp,
                                           ~make_name:
                                             fun (s :: String):
                                               tries := tries + 1
                                               if tries == 1
                                               | tmp3.name()
                                               | Path("mytmp_" ++ s))
      check tmp4 != tmp3 ~is #true
      check tries ~is 2
      let tmp5 = filesystem.make_temporary(~in: tmp, ~permissions: 0o444).path
      check filesystem.permissions(tmp5) ~is { #'read }
      let tmp6 = filesystem.make_temporary(~in: tmp, ~permissions: 0o777, ~replace_permissions: #true).path
      check filesystem.permissions(tmp6) ~is { #'read, #'write, #'execute }

  filesystem.delete(tmp, ~recur: #true)
  check filesystem.directory_exists(tmp) ~is #false
  check filesystem.file_exists(x) ~is #false
  check filesystem.directory_exists(d) ~is #false
  check filesystem.link_exists(tmp) ~is #false
  check filesystem.link_exists(d) ~is #false
  check filesystem.link_exists(x) ~is #false
  check filesystem.link_exists(link) ~is #false
  check filesystem.link_exists(link2) ~is #false

  check filesystem.type(tmp) ~is #false
  check filesystem.type(x) ~is #false
  check filesystem.type(d) ~is #false
  check filesystem.type(tmp, ~must_exist: #true) ~throws "filesystem.type:"
  check filesystem.type(x, ~must_exist: #true) ~throws "filesystem.type:"
  check filesystem.type(d, ~must_exist: #true) ~throws "filesystem.type:"
