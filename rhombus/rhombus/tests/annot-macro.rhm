#lang rhombus/and_meta

block:
  import "static_arity.rhm"
  static_arity.check ~meta:
    annot_meta.is_predicate(s)
    annot_meta.pack_predicate(pred, [stat_info])
    annot_meta.unpack_predicate(s)
    annot_meta.is_converter(s)
    annot_meta.pack_converter(s, body, [stat_info])
    annot_meta.unpack_converter(s)
    annot_meta.parse_to_packed_statinfo(s)

class Posn(x, y)

block:
  annot.macro 'AlsoPosn': 'Posn'
  check:
    Posn(1, 2) :: AlsoPosn
    ~is Posn(1, 2)
  check:
    "no" :: AlsoPosn
    ~throws "value does not satisfy annotation"

  bind.macro 'AlsoPosn ($x, $y)':
    'Posn($x, $y)'
  def AlsoPosn(also_x, also_y) = Posn(10, 20)
  check:
    also_x +& "," +& also_y
    ~is "10,20"

check:
  annot.macro '-> $r':
    'converting(fun (x): x)'
  def h :: -> Boolean = 1
  ~completes

check:
  annot.macro '$d -> $r':
    'converting(fun (x): x)'
  def h :: Int -> Boolean = 1
  ~completes

block:
  annot.delayed_declare Forward
  check:
    10 :: Forward
    ~throws "delayed annotation is not yet completed"
  annot.delayed_complete Forward: Int
  check:
    10 :: Forward
    ~is 10

block:
  namespace f:
    export: Forward
            f
    annot.delayed_declare Forward
    fun f(v): v :: Forward
  check:
    f.f(10)
    ~throws "delayed annotation is not yet completed"
  annot.delayed_complete f.Forward: Int
  check:
    f.f(10)
    ~is 10

check:
  ~eval
  use_static
  import: rhombus/meta open
  annot.delayed_declare Forward
  fun (): (10 :: Forward).x
  ~throws "static information needed before completed"

check:
  ~eval
  use_static
  import: rhombus/meta open
  annot.delayed_declare Forward
  class Posn(x, y)
  annot.delayed_complete Forward: Posn
  fun (): (10 :: Forward).x
  ~completes

check:
  use_static
  annot.macro 'BoxOf($(ann :: annot_meta.Parsed))':
    def (pred, infos) = annot_meta.unpack_predicate(ann)
    annot_meta.pack_predicate('block:
                                 let content_pred = $pred
                                 fun | (Array(v)): content_pred(v)
                                     | (_): #false',
                              '((#%box_ref_info, $infos),
                                ($(statinfo_meta.dot_provider_key),
                                 boxof_dot_provider))')
  fun box_content(Array(v)): v

  dot.macro 'boxof_dot_provider $left $dot $right':
    let infos = statinfo_meta.lookup(left, '#%box_ref_info') || '()'
    match right
    | 'content': statinfo_meta.wrap('box_content($left)', infos)

  def v :: BoxOf(List) = Array([1, 2, 3])
  v.content[0]
  ~is 1
