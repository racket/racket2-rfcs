#lang rhombus/static/and_meta

space.transform ident:
  space_path demo/ident
  macro_definer macro
  meta_namespace ident_meta:
    parse_syntax_class Parsed

// threads an `amt` value through expansion:
space.transform scaled:
  space_path demo/scaled
  macro_definer macro:
    ~amt
  meta_namespace scaled_meta:
    parse_syntax_class Parsed(amt)

meta:
  def mutable saved :~ List = []

expr.macro 'reset':
  saved := []
  '#void'

ident.macro 'same $(x :: Term)':
  #//
  block:
    import lib("racket/base.rkt")
    println(base.#{syntax-debug-info}(x))
    println(base.#{syntax-debug-info}(syntax_meta.flip_introduce(x)))
  saved := [[x, syntax_meta.flip_introduce(x)], & saved]
  x

expr.macro 'go $(x :: ident_meta.Parsed) $()':
  import lib("racket/base.rkt")
  def res:
    match x.group
    | '$_ $(x :: Term)':
        for all ([plain_x, flipped_x] in saved):
          syntax_meta.equal_name_and_scopes(flipped_x, syntax_meta.flip_introduce(x))
  '$(res)'

expr.macro 'intro':
  'go same ey'

check:
  go same ex
  ~is #true
reset
check:
  go same ex
  ~is #true
reset
check:
  intro
  ~is #true

scaled.macro 'as_scaled $(x :: expr_meta.Parsed)':
  ~amt: a
  '$a * $x'
expr.macro 'with_scale $n: $(body :: Group)':
  match body
  | '$(s :: scaled_meta.Parsed(n.unwrap()))':
      s
check:
  with_scale 2:
    as_scaled 3 + 4
  ~is 14
