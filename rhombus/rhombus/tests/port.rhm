#lang rhombus/static

block:
  import "static_arity.rhm"
  static_arity.check:
    Port.Input.current([in])
    Port.Input.open_bytes(bstr, [name])
    Port.Input.open_string(str, [name])
    // TODO fix tests for keyword arguments
    Port.Input.peek_byte(in) ~method
    Port.Input.peek_bytes(in, amount) ~method
    Port.Input.peek_char(in) ~method
    Port.Input.peek_string(in, amount) ~method
    Port.Input.read_byte(in) ~method
    Port.Input.read_bytes(in, amount) ~method
    Port.Input.read_char(in) ~method
    Port.Input.read_line(in) ~method
    Port.Input.read_string(in, amount) ~method
    Port.Output.open_bytes([name])
    Port.Output.open_string([name])
    Port.Output.get_bytes(out) ~method Port.Output.String
    Port.Output.get_string(out) ~method Port.Output.String
    Port.Output.flush([out]) ~method
    Port.Output.current([out])
    Port.Output.current_error([out])
    Port.Output.print(v, ...) ~method
    Port.Output.println(v, ...) ~method
    Port.Output.show(v, ...) ~method
    Port.Output.showln(v, ...) ~method

block:
  let p = Port.Input.open_string("abλcdefμ")
  check p is_a Port.Input ~is #true
  check p is_a Port.Input.String ~is #true
  check p.peek_byte() ~is "a"[0].to_int()
  check p.peek_byte(~skip_bytes: 1) ~is "b"[0].to_int()
  check p.read_byte() ~is "a"[0].to_int()
  check p.peek_byte(~skip_bytes: 3) ~is "c"[0].to_int()
  check p.peek_char() ~is "b"[0]
  check p.peek_char(~skip_bytes: 1) ~is "λ"[0]
  check p.peek_char(~skip_bytes: 3) ~is "c"[0]
  check p.read_char() ~is "b"[0]
  check p.read_char() ~is "λ"[0]
  check p.peek_char() ~is "c"[0]
  check p.read_bytes(2) ~is_now #"cd".copy()
  check p.read_string(3) ~is "efμ"

block:
  let p = Port.Input.open_string("abcdefg")
  check p is_a Port.Input ~is #true
  check p is_a Port.Input.String ~is #true
  check p.peek_bytes(4) ~is_now #"abcd"
  check p.peek_bytes(4, ~skip_bytes: 4) ~is_now #"efg"
  check p.peek_bytes(4, ~skip_bytes: 7) ~is Port.eof
  check p.read_bytes(4) ~is_now #"abcd"
  check p.peek_bytes(4) ~is_now #"efg"
  check p.read_bytes(4) ~is_now #"efg"
  check p.read_bytes(4) ~is Port.eof

block:
  let p = Port.Input.open_string("abλcdefμ")
  check p is_a Port.Input ~is #true
  check p is_a Port.Input.String ~is #true
  check p.peek_string(2) ~is "ab"
  check p.peek_string(~skip_bytes: 2, 1) ~is "λ"
  check p.peek_string(3) ~is "abλ"
  check p.peek_string(1, ~skip_bytes: 4) ~is "c"

block:
  def str = "a\nb\rc\r\nd\n\re"
  fun read_many(mode):
    let p = Port.Input.open_string(str)
    fun read():
      if mode
      | p.read_line(~mode: mode)
      | p.read_line()
    recur loop(strs :~ List = []):
      match read()
      | _ :: Port.EOF: strs
      | str: loop(strs.add(str))
  check read_many(#'linefeed) ~is ["a", "b\rc\r", "d", "\re"]
  check read_many(#'return) ~is ["a\nb", "c", "\nd\n", "e"]
  check read_many(#'return_linefeed) ~is ["a\nb\rc", "d\n\re"]
  check read_many(#'any) ~is ["a", "b", "c", "d", "", "e"]
  check read_many(#'any_one) ~is ["a", "b", "c", "", "d", "", "e"]
  check read_many(#false) ~is ["a", "b", "c", "d", "", "e"]
  check read_many(#'backward) ~throws "Port.Input.ReadLineMode"

block:
  let p = Port.Output.open_bytes()
  check p is_a Port.Output ~is #true
  check p is_a Port.Output.String ~is #true
  p.print("x")
  check p.get_bytes() ~is_now #"x".copy()
  check p.get_string() ~is "x"
  check p.flush() ~is #void
  p.println("y")
  check p.get_string() ~is "xy\n"
  p.show("z")
  check p.get_string() ~is "xy\n\"z\""
  p.showln("w")
  check p.get_string() ~is "xy\n\"z\"\"w\"\n"

// make sure `current` functions have static info
block:
  let p = Port.Input.open_string("a")
  check:
    parameterize { Port.Input.current: p }:
      Port.Input.current().read_string(1)
    ~is "a"

block:
  let p = Port.Output.open_string()
  parameterize { Port.Output.current: p }:
    Port.Output.current().println(1)
  check p.get_string() ~is "1\n"

block:
  let p = Port.Output.open_string()
  parameterize { Port.Output.current_error: p }:
    Port.Output.current_error().println(1)
  check p.get_string() ~is "1\n"

block:
  let p = Port.Output.open_string()
  parameterize { Port.Output.current: p }:
    Port.Output.current().println(1)
  check p.get_string() ~is "1\n"
  check p.get_bytes() ~is_now #"1\n"
  block:
    use_dynamic
    check dynamic(p).get_string() ~is "1\n"
    check dynamic(p).get_bytes() ~is_now #"1\n"

check:
  ~eval
  use_static
  (Port.Output.open_string() :: Port.Output).get_string()
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  (Port.Output.open_string() :: Port.Output).get_bytes()
  ~throws "no such field or method (based on static information)"

check:
  ("oops" :~ Port.Output.String).get_string()
  ~throws values(
    "contract violation",
    "expected: Port.Output.String",
    "given: \"oops\"",
  )

check:
  ("oops" :~ Port.Output.String).get_bytes()
  ~throws values(
    "contract violation",
    "expected: Port.Output.String",
    "given: \"oops\"",
  )
