#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Char.to_int(ch)
    Char.from_int(int)
    Char.utf8_length(ch)
    Char.is_alphabetic(ch)
    Char.is_lowercase(ch)
    Char.is_uppercase(ch)
    Char.is_titlecase(ch)
    Char.is_numeric(ch)
    Char.is_symbolic(ch)
    Char.is_punctuation(ch)
    Char.is_graphic(ch)
    Char.is_whitespace(ch)
    Char.is_blank(ch)
    Char.is_extended_pictographic(ch)
    Char.general_category(ch)
    Char.grapheme_break_property(ch)
    Char.upcase(ch)
    Char.downcase(ch)
    Char.foldcase(ch)
    Char.titlecase(ch)
    Char.grapheme_step(ch, state)

check:
  "h"[0] :: Char ~is #{#\h}
  Char.to_int("h"[0]) ~is 104
  Char.from_int(104) ~is "h"[0]
  Char.utf8_length("λ"[0]) ~is 2
  Char.is_alphabetic("λ"[0]) ~is #true
  Char.is_lowercase("a"[0]) ~is #true
  Char.is_uppercase("a"[0]) ~is #false
  Char.is_titlecase("a"[0]) ~is #false
  Char.is_numeric("a"[0]) ~is #false
  Char.is_symbolic("+"[0]) ~is #true
  Char.is_punctuation("!"[0]) ~is #true
  Char.is_graphic("!"[0]) ~is #true
  Char.is_blank("!"[0]) ~is #false
  Char.is_whitespace("!"[0]) ~is #false
  Char.is_extended_pictographic("!"[0]) ~is #false
  Char.general_category("a"[0]) ~is #'ll
  Char.grapheme_break_property("a"[0]) ~is #'Other
  Char.upcase("a"[0]) ~is "A"[0]
  Char.downcase("A"[0]) ~is "a"[0]
  Char.foldcase("A"[0]) ~is "a"[0]
  Char.titlecase("a"[0]) ~is "A"[0]
  Char.grapheme_step("a"[0], 0) ~is values(#false, 1)

block:
  use_static
  check Char.from_int(10).to_int() ~is 10

check:
  ~eval
  "a"[0] :: CharCI
  ~throws "not allowed in a dynamic context"

check:
  ~eval
  def c :: CharCI = "a"[0]
  ~throws "not allowed in a dynamic context"

block:
  use_static
  let a :: CharCI = "a"[0]
  let A :: CharCI = "A"[0]
  let b :: CharCI = "b"[0]
  let B :: CharCI = "B"[0]
  check:
    a < B ~is #true
    b < A ~is #false
    a <= B ~is #true
    a <= A ~is #true
    b <= A ~is #false
    a >= B ~is #false
    a >= A ~is #true
    b >= A ~is #true
    a > B ~is #false
    a > A ~is #false
    b > A ~is #true
    a compares_equal a ~is #true
    a compares_equal A ~is #true
    a compares_equal B ~is #false
    a compares_unequal a ~is #false
    a compares_unequal A ~is #false
    a compares_unequal B ~is #true
