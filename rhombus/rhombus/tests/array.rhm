#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    Array(v, ...)
    Array.make(n, [v])
    Array.length(arr) ~method
    Array.get(arr, n) ~method
    Array.set(arr, n, v) ~method
    Array.contains(arr, v, [eql]) ~method
    Array.append(arr, ...) ~method
    Array.copy(arr, [start], [end]) ~method
    Array.copy_from(dest_arr, dest_start, src_arr, [src_start], [src_end]) ~method
    Array.snapshot(arr) ~method
    Array.drop(arr, n) ~method
    Array.drop_last(arr, n) ~method
    Array.take(arr, n) ~method
    Array.take_last(arr, n) ~method
    Array.set_in_copy(arr, i, v) ~method
    Array.to_list(arr) ~method
    Array.to_sequence(arr) ~method

check:
  Array(1, 2, 3) :: Array ~is_now Array(1, 2, 3)
  Array.make(5) ~is_now Array(0, 0, 0, 0, 0)
  Array.make(5, "yes") ~is_now Array("yes", "yes", "yes", "yes", "yes")

check:
  Array.length(Array(1, 2, 3))
  ~is 3

check:
  Array(1, 2, 3).length()
  ~is 3

check:
  Array.length([1, 2, 3])
  ~throws values(
    "Array.length: " ++ error.annot_msg(),
    error.annot("Array").msg,
    error.val([1, 2, 3]).msg,
  )

check:
  ([1, 2, 3] :~ Array).length()
  ~throws values(
    "Array.length: " ++ error.annot_msg(),
    error.annot("Array").msg,
    error.val([1, 2, 3]).msg,
  )

block:
  use_static
  check:
    Array(1, 2, 3).length()
    ~is 3
  check:
    def arr = Array(1, 2, 3)
    arr[0] := 2
    arr[0]
    ~is 2
  check:
    def arr = Array(1, 2, 3)
    arr.set(0, 2)
    arr.get(0)
    ~is 2
  check:
    Array(1, 2, 3) ++ Array(0)
    ~is_now Array(1, 2, 3, 0)
  check:
    Array(1, 2, 3) ++ "oops"
    ~throws values(
      "Array.append: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )
  check:
    Array(1, 2, 3).append(Array(4, 5, 6), Array(7, 8, 9))
    ~is_now Array(1, 2, 3, 4, 5, 6, 7, 8, 9)
  check:
    Array(1, 2, 3).length()
    ~is 3
  check:
    def arr = Array(1, 2, 3)
    arr.length()
    ~is 3
  check:
    def arr :: Array = dynamic(Array(1, 2, 3))
    arr.length()
    ~is 3
  check:
    def arr :: Array.of_length(3) = dynamic(Array(1, 2, 3))
    arr.length()
    ~is 3
  check:
    def arr :: Array.later_of(Int) = dynamic(Array(1, 2, 3))
    arr.length()
    ~is 3
  check:
    def [v, ...] = dynamic([1, 2, 3])
    Array(v, ...).length()
    ~is 3
  check:
    def [v, ... ~nonempty] = dynamic([1, 2, 3])
    Array(v, ...).length()
    ~is 3
  check:
    class Posn(x, y)
    def arr :: Array.later_of(Posn) = Array(Posn(1, 2))
    arr[0].x
    ~is 1
  check:
    Array(1, 2, 3).copy() ~is_now Array(1, 2, 3)
    Array(4, 5, 6).copy() == Array(4, 5, 6) ~is #false
    (block:
       let s = Array(4, 5, 6)
       s.copy_from(0, Array(7))
       s) ~is_now Array(7, 5, 6)
    (block:
       let s = Array(4, 5, 6, 7, 8)
       s.copy_from(2, Array(0, 9, 10, 11), 1, 3)
       s) ~is_now Array(4, 5, 9, 10, 8)
    Array(1, 2, 3).snapshot() ~is Array(1, 2, 3).snapshot()
    Array(1, 2, 3).snapshot().copy() ~is_now Array(1, 2, 3)

block:
  check:
    dynamic(Array(1, 2, 3)).length()
    ~is 3
  check:
    dynamic(Array(1, 2, 3)) ++ Array(0)
    ~is_now Array(1, 2, 3, 0)
  check:
    dynamic(Array(1, 2, 3)).append(Array(4, 5, 6), Array(7, 8, 9))
    ~is_now Array(1, 2, 3, 4, 5, 6, 7, 8, 9)
  check:
    def arr = dynamic(Array(1, 2, 3))
    arr[0] := 2
    arr[0]
    ~is 2
  check:
    def arr = dynamic(Array(1, 2, 3))
    arr.set(0, 2)
    arr.get(0)
    ~is 2
  check:
    dynamic(Array(1, 2, 3)).copy() ~is_now Array(1, 2, 3)
    dynamic(Array(4, 5, 6)).copy() == Array(4, 5, 6) ~is #false
    (block:
       let s = Array(4, 5, 6)
       dynamic(s).copy_from(0, Array(7))
       s) ~is_now Array(7, 5, 6)
    (block:
       let s = Array(4, 5, 6, 7, 8)
       dynamic(s).copy_from(2, Array(0, 9, 10, 11), 1, 3)
       s) ~is_now Array(4, 5, 9, 10, 8)

block:
  def [x, ...] = [1, 2, 3]
  check:
    Array(x, ...)
    ~is_now Array(1, 2, 3)
  check:
    Array(x, ..., 0)
    ~is_now Array(1, 2, 3, 0)
  check:
    Array(0, x, ...)
    ~is_now Array(0, 1, 2, 3)
  check:
    Array(& Array(10, 11), & [12, 13], x, ..., 0)
    ~is_now Array(10, 11, 12, 13, 1, 2, 3, 0)
  check:
    [Array(x), ...]
    ~is_now [Array(1), Array(2), Array(3)]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [Array(z, ...), ...]
    ~is_now [Array(1, 2, 3), Array(4, 5)]

check:
  def Array(0) = Array(0)
  ~completes

check:
  def Array(0, _, ...) = Array(0, 1, 2)
  ~completes

check:
  def Array(0, _, ...) = Array(0)
  ~completes

check:
  def Array(0, _, ... ~nonempty) = Array(0)
  "ok"
  ~throws error.annot_msg()

check:
  def Array(0, x, ...) = Array(0, 1, 2)
  [x, ...]
  ~is [1, 2]

check:
  def Array(0, 1, 2, _, ...) = Array(0, 1, 2)
  ~completes

check:
  def Array(0, 1, 2, x, ...) = Array(0, 1, 2)
  [x, ...]
  ~is []

check:
  Array.append() ~is_now Array()
  Array.append(Array(1)) ~is_now Array(1)
  Array.append(Array(1), Array(2)) ~is_now Array(1, 2)
  Array.append(Array(1), Array(2), Array(3)) ~is_now Array(1, 2, 3)
  Array.append(Array(1), Array(2), Array(3), Array(4)) ~is_now Array(1, 2, 3, 4)

check:
  Array(10, 20, 30).contains(20) ~is #true
  Array(10, 20, 30).contains(2) ~is #false
  20 in Array(10, 20, 30) ~is #true
  2 in Array(10, 20, 30) ~is #false
  20 !in Array(10, 20, 30) ~is #false
  2 !in Array(10, 20, 30) ~is #true

check:
  10 :: Array
  ~throws "does not satisfy annotation"

check:
  10 :: Array.of_length(1)
  ~throws "does not satisfy annotation"

check:
  10 :: Array.now_of(Any)
  ~throws "does not satisfy annotation"

check:
  10 :: Array.later_of(Any)
  ~throws "does not satisfy annotation"

check:
  10 :: Array.later_of(converting(fun (_): #false))
  ~throws "does not satisfy annotation"

check:
  Array(1) :: Array.of_length(1)
  ~completes

check:
  Array(1) :: Array.of_length(2)
  ~throws "does not satisfy annotation"

check:
  Array(1) :: Array.now_of(String)
  ~throws "does not satisfy annotation"

check:
  Array(1) :: Array.later_of(String)
  ~completes

check:
  def a :: Array.later_of(
    converting(fun (n :: Int):
                 println("run")
                 n+1)):
    Array(1)
  println(a[0])
  a[0] := 1
  println(a[0])
  ~prints "run\n2\nrun\nrun\n3\n"

check:
  def a :: Array.later_of(String) = Array(1)
  a[0]
  ~throws values(
    "current element does not satisfy annotation",
    "0",
    "String",
  )

check:
  def a :: Array.later_of(String) = Array(1, "ok")
  a[1]
  ~is "ok"

check:
  def a :: Array.later_of(String) = Array("apple")
  a[0]
  a[0] := #'oops
  ~throws values(
    "new element does not satisfy annotation",
    "0",
    "String",
  )

check:
  ~eval
  Array(Array("apple")) :: Array.now_of(Array.later_of(String))
  ~throws "converter annotation not supported for element"

check:
  use_static
  def a :: Array.later_of(String) = Array("apple")
  a[0] ++ "jack"
  ~is "applejack"

check:
  ~eval
  use_static
  def a :: Array.now_of(String) = Array("apple")
  a[0] ++ "jack"
  ~throws "specialization not known"

check:
  Array("a", "b", "c").copy() ~is_now Array("a", "b", "c")
  Array("a", "b", "c").copy(1)  ~is_now Array("b", "c")
  Array("a", "b", "c").copy(1, 2)  ~is_now Array("b")

  Array("a", "b", "c").take(2) ~is_now Array("a", "b")
  Array("a", "b", "c").take_last(2) ~is_now Array("b", "c")
  Array("a", "b", "c").drop(2) ~is_now Array("c")
  Array("a", "b", "c").drop_last(2) ~is_now Array("a")

  Array("a", "b", "c").set_in_copy(1, "x") ~is_now Array("a", "x", "c")

block:
  use_static
  check Array("a", "b", "c").to_list() ~is [& Array("a", "b", "c")]
  block:
    use_dynamic
    check dynamic(Array("a", "b", "c")).to_list() ~is [& Array("a", "b", "c")]

block:
  use_static
  def arr = Array("a", "b", "c")
  check:
    for List (x in arr):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x in Array.to_sequence(arr)):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x in arr.to_sequence()):
      x
    ~is ["a", "b", "c"]

version_guard.at_least "8.13.0.1":
  check:
    Array.to_sequence("oops")
    ~throws values(
      "Array.to_sequence: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )
  check:
    ("oops" :~ Array).to_sequence()
    ~throws values(
      "Array.to_sequence: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in "oops" :~ Array):
      x
    ~throws values(
      "Array.to_sequence: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )

  check:
    for List (x in Array.to_sequence("oops")):
      x
    ~throws values(
      "Array.to_sequence: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in ("oops" :~ Array).to_sequence()):
      x
    ~throws values(
      "Array.to_sequence: " ++ error.annot_msg(),
      error.annot("Array").msg,
      error.val("oops").msg,
    )

check:
  to_string(Array()) ~is "Array()"
  to_string(Array(1, 2, 3)) ~is "Array(1, 2, 3)"

check:
  def a = Array(1, 2, 3)
  a[0] := a
  to_string(a)
  ~is "#0=Array(#0#, 2, 3)"

check:
  ("oops" :~ Array)[0]
  ~throws values(
    "Array.get: " ++ error.annot_msg(),
    error.annot("Array").msg,
    error.val("oops").msg,
  )

check:
  (Array(1, 2, 3) :~ Array)["oops"]
  ~throws values(
    "Array.get: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )

check:
  (Array(1, 2, 3) :~ Array)[-1]
  ~throws values(
    "Array.get: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )

check:
  ("oops" :~ MutableArray)[0] := 0
  ~throws values(
    "Array.set: " ++ error.annot_msg(),
    error.annot("MutableArray").msg,
    error.val("oops").msg,
  )

check:
  (Array(1, 2, 3).snapshot() :~ MutableArray)[0] := 0
  ~throws values(
    "Array.set: " ++ error.annot_msg(),
    error.annot("MutableArray").msg,
    error.val(Array.snapshot(Array(1, 2, 3))).msg,
  )

check:
  (Array(1, 2, 3) :~ MutableArray)["oops"] := 0
  ~throws values(
    "Array.set: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )

check:
  (Array(1, 2, 3) :~ MutableArray)[-1] := 0
  ~throws values(
    "Array.set: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )

check:
  Array.append("oops") ~throws values(
    "Array.append: " ++ error.annot_msg(),
    error.annot("Array").msg,
    error.val("oops").msg,
  )
  ("oops" :~ Array).append() ~throws values(
    "Array.append: " ++ error.annot_msg(),
    error.annot("Array").msg,
    error.val("oops").msg,
  )

version_guard.at_least "8.14.0.7":
  check:
    Array.make("oops")
    ~throws values(
      "Array.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
  check:
    Array.make(-1)
    ~throws values(
      "Array.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
  check:
    Array.make("oops", 0)
    ~throws values(
      "Array.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
  check:
    Array.make(-1, 0)
    ~throws values(
      "Array.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
