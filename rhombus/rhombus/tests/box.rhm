#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Box(v)
    Box.value(bx, [val])
    Box.copy(bx) ~method
    Box.snapshot(bx) ~method

check:
  Box(1) ~is_now Box(1)
  Box(1) == Box(1) ~is #false
  Box(1) is_a Box ~is #true
  10 is_a Box ~is #false
  Box(1) is_a MutableBox ~is #true
  Box(1) is_a ImmutableBox ~is #false
  10 is_a MutableBox ~is #false
  10 is_a ImmutableBox ~is #false

block:
  use_static
  let bx = Box(10)
  let bx_snapshot = bx.snapshot()
  let bx_copy = bx.copy()
  check:
    bx ~is_a MutableBox
    bx.value ~is 10
    bx_snapshot ~is_a ImmutableBox
    bx_snapshot.value ~is 10
    bx_copy ~is_a MutableBox
    bx_copy.value ~is 10
    bx_copy === bx ~is #false
    bx_snapshot === bx ~is #false

block:
  use_static
  let bx = Box(10).snapshot()
  let bx_snapshot = bx.snapshot()
  let bx_copy = bx.copy()
  check:
    bx ~is_a ImmutableBox
    bx.value ~is 10
    bx_snapshot ~is_a ImmutableBox
    bx_snapshot.value ~is 10
    bx_copy ~is_a MutableBox
    bx_copy.value ~is 10
    bx_copy === bx ~is #false
    bx_snapshot === bx ~is #true

check:
  use_static
  def bx = Box(10)
  bx.value
  ~is 10

check:
  use_static
  def bx = Box(10)
  bx.value := 11
  bx.value
  ~is 11

check:
  use_static
  (dynamic(Box(10)) :~ Box).value
  ~is 10

check:
  use_static
  def bx = dynamic(Box(10))
  (bx :~ Box).value := 11
  (bx :~ Box).value
  ~is 11

check:
  def bx = Box(10)
  dynamic(bx).value
  ~is 10

check:
  use_dynamic
  def bx = Box(10)
  dynamic(bx).value := 11
  dynamic(bx).value
  ~is 11

check:
  10 :: Box
  ~throws "does not satisfy annotation"

check:
  10 :: Box.now_of(Any)
  ~throws "does not satisfy annotation"

check:
  10 :: Box.later_of(Any)
  ~throws "does not satisfy annotation"

check:
  10 :: Box.later_of(converting(fun (_): #false))
  ~throws "does not satisfy annotation"

check:
  Box(1) :: Box.now_of(String)
  ~throws "does not satisfy annotation"

check:
  Box(1) :: Box.later_of(String)
  ~completes

check:
  def bx :: Box.later_of(
    converting(fun (n :: Int):
                 println("run")
                 n+1)):
    Box(1)
  println(bx.value)
  bx.value := 1
  println(bx.value)
  ~prints "run\n2\nrun\nrun\n3\n"

check:
  def bx :: Box.later_of(String) = Box(1)
  bx.value
  ~throws values(
    "current value does not satisfy annotation",
    "String",
  )

check:
  def bx :: Box.later_of(String) = Box("apple")
  bx.value
  bx.value := #'oops
  ~throws values(
    "new value does not satisfy annotation",
    "String",
  )

check:
  ~eval
  Box(Box("apple")) :: Box.now_of(Box.later_of(String))
  ~throws "converter annotation not supported for value"

check:
  use_static
  def bx :: Box.later_of(String) = Box("apple")
  bx.value ++ "jack"
  ~is "applejack"

check:
  ~eval
  use_static
  def bx :: Box.now_of(String) = Box("apple")
  bx.value ++ "jack"
  ~throws "specialization not known"

check:
  to_string(Box(1)) ~is "Box(1)"
  to_string(Box(2)) ~is "Box(2)"

check:
  def b = Box(0)
  b.value := b
  to_string(b)
  ~is "#0=Box(#0#)"

check:
  ("oops" :~ Box).value
  ~throws values(
    "Box.value: contract violation",
    "expected: Box",
    "given: \"oops\"",
  )

check:
  ("oops" :~ MutableBox).value := 0
  ~throws values(
    "Box.value: contract violation",
    "expected: MutableBox",
    "given: \"oops\"",
  )

check:
  (Box(1).snapshot() :~ MutableBox).value := 0
  ~throws values(
    "Box.value: contract violation",
    "expected: MutableBox",
    "given: Box.snapshot(Box(1))",
  )
