#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    Bytes.make(n, [b])
    Bytes.length(bstr) ~method
    Bytes.get(bstr, i) ~method
    Bytes.set(bstr, i, b) ~method
    Bytes.append(bstr, ...) ~method
    Bytes.subbytes(bstr, start, [end]) ~method
    Bytes.copy(bstr) ~method
    Bytes.copy_from(dest_bstr, dest_start, src_bstr, [src_start], [src_end]) ~method
    Bytes.snapshot(bstr) ~method
    Bytes.utf8_string(bstr, [err_ch], [start], [end]) ~method
    Bytes.latin1_string(bstr, [err_ch], [start], [end]) ~method
    Bytes.locale_string(bstr, [err_ch], [start], [end]) ~method
    Bytes.to_sequence(bstr) ~method

check:
  #"hello" :: Bytes ~is #"hello"
  Bytes.make(5) ~is_now #"\0\0\0\0\0"
  Bytes.make(5, Byte#"h") ~is_now #"hhhhh"

block:
  use_static
  check:
    def hello = #"hello"
    hello.length()
    ~is 5
  check:
    #"hello".length() ~is 5
    #"hello"[0] ~is Byte#"h"
    #"hello".get(0) ~is Byte#"h"
    #"hello" ++ #" " ++ #"world" ~is_now #"hello world"
    #"hello" ++ #" " ++ "world" ~throws values(
      "Bytes.append: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("world").msg,
    )
    #"hello".append(#" world") ~is_now #"hello world"
    #"hello".append(#" world", #" and bye") ~is_now #"hello world and bye"
    #"hello".subbytes(1, 3) ~is_now #"el"
    #"hello".subbytes(1..=3) ~is_now #"ell"
    #"hello".subbytes(1..) ~is_now #"ello"
    #"hello".subbytes(..3) ~is_now #"hel"
    #"hello".subbytes(..) ~is_now #"hello"
    #"hello".copy() ~is_now #"hello"
    #"hello".copy() == #"hello" ~is #false
    (block:
       let s = #"hello".copy()
       s.copy_from(0, #"HE")
       s) ~is_now #"HEllo"
    (block:
       let s = #"hello".copy()
       s.copy_from(2, #"xxxx", 1, 3)
       s) ~is_now #"hexxo"
    #"hello".snapshot() ~is #"hello".snapshot()
    #"hello".snapshot() == #"hello" ~is #true
    #"h\303\211llo".utf8_string() ~is "hÉllo"
    #"h\303\211llo".utf8_string(#false, 3) ~is "llo"
    #"h\311llo".latin1_string() ~is "hÉllo"
    #"hello".locale_string() ~is "hello"
    #"h\303\211llo".utf8_string().length() ~is 5

check:
  dynamic(#"hello").length() ~is 5
  dynamic(#"hello")[0] ~is Byte#"h"
  dynamic(#"hello" ++ #" ") ++ #"world" ~is_now #"hello world"
  dynamic(#"hello" ++ #" ") ++ "world" ~throws "cannot append a byte string and other value"
  dynamic(#"hello").append(#" world") ~is_now #"hello world"
  dynamic(#"hello").append(#" world", #" and bye") ~is_now #"hello world and bye"
  dynamic(#"hello").get(0) ~is Byte#"h"
  dynamic(#"hello").subbytes(1, 3) ~is_now #"el"
  dynamic(#"hello").subbytes(1..=3) ~is_now #"ell"
  dynamic(#"hello").subbytes(1..) ~is_now #"ello"
  dynamic(#"hello").subbytes(..3) ~is_now #"hel"
  dynamic(#"hello").subbytes(..) ~is_now #"hello"
  dynamic(#"hello").copy() ~is_now #"hello"
  (block:
     let s = #"hello".copy()
     dynamic(s).copy_from(0, #"HE")
     s) ~is_now #"HEllo"
  dynamic(#"hello").snapshot() ~is #"hello"
  dynamic(#"h\303\211llo").utf8_string() ~is "hÉllo"
  dynamic(#"h\303\211llo").utf8_string(#false, 3) ~is "llo"
  dynamic(#"h\311llo").latin1_string() ~is "hÉllo"
  dynamic(#"hello").locale_string() ~is "hello"

block:
  use_static
  def bstr = #"hello".copy()
  bstr[1] := Byte#"h"
  bstr.set(2, Byte#"h")
  check bstr ~is_now #"hhhlo"
  block:
    use_dynamic
    dynamic(bstr)[3] := Byte#"h"
    dynamic(bstr).set(4, Byte#"h")
    check bstr ~is_now #"hhhhh"
  bstr.fill(Byte#"x")
  check bstr ~is_now #"xxxxx"

check:
  Bytes.append() ~is_now #""
  Bytes.append(#"this".copy()) ~is_now #"this"
  Bytes.append(#"this".copy(), #", that".copy()) ~is_now #"this, that"
  Bytes.append(#"this".copy(), #" and ", #"that".copy()) ~is_now #"this and that"
  Bytes.append(#"this".copy(), #", this", #", and ", #"that".copy()) ~is_now #"this, this, and that"

check:
  Bytes.length(#"hello") ~is 5
  Bytes.subbytes(#"hello", 1, 3) ~is_now #"el"
  Bytes.subbytes(#"hello", 1..=3) ~is_now #"ell"
  Bytes.subbytes(#"hello", 1..) ~is_now #"ello"
  Bytes.subbytes(#"hello", ..3) ~is_now #"hel"
  Bytes.subbytes(#"hello", ..) ~is_now #"hello"
  Bytes.copy(#"hello") ~is_now #"hello"
  Bytes.utf8_string(#"h\303\211llo") ~is "hÉllo"
  Bytes.utf8_string(#"h\303\211llo", #false, 3) ~is "llo"
  Bytes.latin1_string(#"h\311llo") ~is "hÉllo"
  Bytes.locale_string(#"hello") ~is "hello"

check:
  to_string(#"hello") ~is "hello"
  to_string(#"hello".copy()) ~is "hello"
  to_string(#"hello", ~mode: #'expr) ~is "#\"hello\""
  to_string(#"hello".copy(), ~mode: #'expr) ~is "Bytes.copy(#\"hello\")"

block:
  use_static
  def bstr = #"123"
  check:
    for List (x in bstr):
      x
    ~is [49, 50, 51]
  check:
    for List (x in Bytes.to_sequence(bstr)):
      x
    ~is [49, 50, 51]
  check:
    for List (x in bstr.to_sequence()):
      x
    ~is [49, 50, 51]

version_guard.at_least "8.13.0.1":
  check:
    Bytes.to_sequence("oops")
    ~throws values(
      "Bytes.to_sequence: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("oops").msg,
    )
  check:
    ("oops" :~ Bytes).to_sequence()
    ~throws values(
      "Bytes.to_sequence: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in "oops" :~ Bytes):
      x
    ~throws values(
      "Bytes.to_sequence: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in Bytes.to_sequence("oops")):
      x
    ~throws values(
      "Bytes.to_sequence: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in ("oops" :~ Bytes).to_sequence()):
      x
    ~throws values(
      "Bytes.to_sequence: " ++ error.annot_msg(),
      error.annot("Bytes").msg,
      error.val("oops").msg,
    )

check:
  ("oops" :~ Bytes)[0]
  ~throws values(
    "Bytes.get: " ++ error.annot_msg(),
    error.annot("Bytes").msg,
    error.val("oops").msg,
  )

check:
  (#"hello" :~ Bytes)["oops"]
  ~throws values(
    "Bytes.get: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )

check:
  (#"hello" :~ Bytes)[-1]
  ~throws values(
    "Bytes.get: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )

check:
  ("oops" :~ MutableBytes)[0] := 0
  ~throws values(
    "Bytes.set: " ++ error.annot_msg(),
    error.annot("MutableBytes").msg,
    error.val("oops").msg,
  )

check:
  (#"hello" :~ MutableBytes)[0] := 0
  ~throws values(
    "Bytes.set: " ++ error.annot_msg(),
    error.annot("MutableBytes").msg,
    error.val(#"hello").msg,
  )

check:
  (#"hello".copy() :~ MutableBytes)["oops"] := 0
  ~throws values(
    "Bytes.set: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )

check:
  (#"hello".copy() :~ MutableBytes)[-1] := 0
  ~throws values(
    "Bytes.set: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )

version_guard.at_least "8.14.0.2":
  check:
    (#"hello".copy() :~ MutableBytes)[0] := "oops"
    ~throws values(
      "Bytes.set: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val("oops").msg,
    )
  check:
    (#"hello".copy() :~ MutableBytes)[0] := -1
    ~throws values(
      "Bytes.set: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val(-1).msg,
    )

check:
  Bytes.append("oops") ~throws values(
    "Bytes.append: " ++ error.annot_msg(),
    error.annot("Bytes").msg,
    error.val("oops").msg,
  )
  ("oops" :~ Bytes).append() ~throws values(
    "Bytes.append: " ++ error.annot_msg(),
    error.annot("Bytes").msg,
    error.val("oops").msg,
  )

version_guard.at_least "8.14.0.7":
  check:
    Bytes.make("oops")
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
  check:
    Bytes.make(-1)
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
  check:
    Bytes.make("oops", 0)
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
  check:
    Bytes.make(-1, 0)
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
  check:
    Bytes.make(5, "oops")
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val("oops").msg,
    )
  check:
    Bytes.make(5, "a")
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val("a").msg,
    )
  check:
    Bytes.make(5, Char"a")
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val(Char"a").msg,
    )
  check:
    Bytes.make(5, -1)
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val(-1).msg,
    )
  check:
    Bytes.make(5, 256)
    ~throws values(
      "Bytes.make: " ++ error.annot_msg(),
      error.annot("Byte").msg,
      error.val(256).msg,
    )

// checks static infos for elements
block:
  use_static
  check #"a"[0] < #"b"[0] ~is #true
  check #"a"[0] <= #"b"[0] ~is #true
  check #"a"[0] compares_equal #"b"[0] ~is #false
  check #"a"[0] compares_unequal #"b"[0] ~is #true
  check #"a"[0] >= #"b"[0] ~is #false
  check #"a"[0] > #"b"[0] ~is #false
