#lang rhombus/static

check:
  @str{1, 2, 3} ~is "1, 2, 3"
  @str{1, 2, @(1+2)} ~is "1, 2, 3"

  str.s("apple") ~is "apple"
  str.s(["apple"]) ~is "[\"apple\"]"
  str.s("apple", ~width: 8) ~is "apple   "
  str.s("apple", ~width: 8, ~align: #'right) ~is "   apple"
  str.s("apple", ~width: 8, ~align: #'center) ~is " apple  "
  str.s("apple", ~width: 8, ~pad: Char"#") ~is "apple###"
  str.s("apple", ~width: 8, ~align: #'right, ~pad: Char"!") ~is "!!!apple"
  str.s("apple", ~width: 8, ~align: #'center, ~pad: Char"_") ~is "_apple__"

  str.d(100) ~is "100"
  str.d(-100) ~is "-100"
  str.d(0) ~is "0"
  str.d(100, ~plus_sign: "++") ~is "++100"
  str.d(0, ~zero_sign: "...") ~is "...0"
  str.d(-100, ~sign_align: #'right) ~is "100-"

  str.d(100, ~width: 8, ~align: #'right) ~is "     100"
  str.d(-100, ~width: 8, ~align: #'right) ~is "    -100"
  str.d(-100, ~width: 8, ~align: #'center) ~is "  -100  "
  str.d(-100, ~width: 8, ~sign_align: #'left, ~align: #'right) ~is "-    100"
  str.d(-100, ~width: 8, ~sign_align: #'left, ~align: #'center) ~is "-  100  "
  str.d(-100, ~width: 8, ~sign_align: #'right, ~align: #'center) ~is "  100  -"
  str.d(-100, ~width: 8, ~sign_align: #'left, ~align: #'center, ~pad: Char"x") ~is "-xx100xx"
  str.d(-10, ~max_width: 0, ~sign_align: #'left) ~is ""
  str.d(-123456, ~width: 4, ~align: #'right, ~sign_align: #'left) ~is "-456"
  str.d(-123456, ~width: 4, ~sign_align: #'right) ~is "123-"

  str.d(100, ~max_width: 3) ~is "100"
  str.d(-100, ~max_width: 3) ~is "-10"
  str.d(-100, ~max_width: 3, ~align: #'right) ~is "100"

  str.d(100, ~min_width: 4, ~max_width: 3) ~throws "maximum width is less than minimum width"

  str.f(100) ~is "100.000000"
  str.f(-100) ~is "-100.000000"
  str.f(#inf) ~is "inf"
  str.f(#neginf) ~is "-inf"
  str.f(#nan) ~is "nan"
  str.f(0) ~is "0.000000"

  str.f(100, ~precision: 2) ~is "100.00"
  str.f(-100, ~precision: 2) ~is "-100.00"
  str.f(#inf, ~precision: 2) ~is "inf"
  str.f(#neginf, ~precision: 2) ~is "-inf"
  str.f(#nan, ~precision: 2) ~is "nan"
  str.f(0, ~precision: 2) ~is "0.00"

  str.f(2/3) ~is "0.666667"
  str.f(2/3, ~precision: 2) ~is "0.67"
  str.f(20/3, ~precision: 2) ~is "6.67"

  str.f(12.3451) ~is "12.345100"
  str.f(12.3451, ~precision: 2) ~is "12.35"
  str.f(12.3441, ~precision: 2) ~is "12.34"
  str.f(9.999) ~is "9.999000"
  str.f(9.999, ~precision: 2) ~is "10.00"

  str.f(100, ~precision: 0) ~is "100"
  str.f(100, ~precision: 0, ~keep_decimal: #true) ~is "100."
  str.f(20/3, ~precision: 0) ~is "7"
  str.f(20/3, ~precision: 0, ~keep_decimal: #true) ~is "7."
  str.f(0, ~precision: 0) ~is "0"
  str.f(0, ~precision: 0, ~keep_decimal: #true) ~is "0."
  str.f(9.999, ~precision: 0) ~is "10"
  str.f(9.999, ~precision: 0, ~keep_decimal: #true) ~is "10."

  str.f(12.3451, ~decimal: ",") ~is "12,345100"

  str.f(12.3451, ~width: 4) ~is "12.3"
  str.f(12.3451, ~min_width: 4) ~is "12.345100"
  str.f(12.3451, ~max_width: 400) ~is "12.345100"
  str.f(12.3451, ~max_width: 4, ~clip_align: #'right) ~is "5100"
  str.f(-12.3451, ~max_width: 4, ~clip_align: #'right) ~is "5100"
  str.f(-12.3451, ~max_width: 4, ~clip_align: #'right, ~sign_align: #'left) ~is "-100"

  str.e(100) ~is "1.000000e2"
  str.e(100, ~precision: 2) ~is "1.00e2"
  str.e(#inf, ~precision: 2) ~is "inf"
  str.e(#neginf, ~precision: 2) ~is "-inf"
  str.e(#nan, ~precision: 2) ~is "nan"
  str.e(0) ~is "0.000000e0"
  str.e(0, ~precision: 2) ~is "0.00e0"

  str.e(2/3) ~is "6.666667e-1"
  str.e(2/3, ~precision: 2) ~is "6.67e-1"
  str.e(2000/3) ~is "6.666667e2"

  str.e(12.3451) ~is "1.234510e1"
  str.e(12.3451, ~precision: 2) ~is "1.23e1"
  str.e(9.999) ~is "9.999000e0"
  str.e(9.999, ~precision: 2) ~is "1.00e1"

  str.e(100, ~precision: 0) ~is "1e2"
  str.e(100, ~precision: 0, ~keep_decimal: #true) ~is "1.e2"
  str.e(20/3, ~precision: 0) ~is "7e0"
  str.e(20/3, ~precision: 0, ~keep_decimal: #true) ~is "7.e0"
  str.e(9.999, ~precision: 0) ~is "1e1"

  str.e(12.3451, ~decimal: ",") ~is "1,234510e1"
  str.e(12.3451, ~exponent: "EXP") ~is "1.234510EXP1"

  str.g(100) ~is "100"
  str.g(100, ~precision: 3) ~is "100"
  str.g(100, ~precision: 2) ~is "1e2"
  str.g(1000000) ~is "1e6"
  str.g(1000001) ~is "1e6"
  str.g(999999) ~is "999999"
  str.g(9999999) ~is "1e7"
  str.g(#inf, ~precision: 2) ~is "inf"
  str.g(#neginf, ~precision: 2) ~is "-inf"
  str.g(#nan, ~precision: 2) ~is "nan"
  str.g(0, ~precision: 2) ~is "0"

  str.g(2/3) ~is "0.666667"
  str.g(2/3, ~precision: 2) ~is "0.67"
  str.g(20/3, ~precision: 2) ~is "6.7"

  str.g(12.3451) ~is "12.3451"
  str.g(12.3451, ~precision: 2) ~is "12"
  str.g(12.6441, ~precision: 2) ~is "13"
  str.g(9.999) ~is "9.999"
  str.g(9.999, ~precision: 2) ~is "10"

  str.g(100, ~precision: 0) ~is "1e2"
  str.g(100, ~precision: 0, ~keep_decimal: #true) ~is "1.e2"
  str.g(20/3, ~precision: 0) ~is "7"
  str.g(20/3, ~precision: 0, ~keep_decimal: #true) ~is "7."
  str.g(0, ~precision: 0) ~is "0"
  str.g(0, ~precision: 0, ~keep_decimal: #true) ~is "0."
  str.g(9.999, ~precision: 0) ~is "1e1"
  str.g(9.999, ~precision: 0, ~keep_decimal: #true) ~is "1.e1"

  str.g(12.3451, ~decimal: ",") ~is "12,3451"
  str.g(12000000, ~exponent: "EXP") ~is "1.2EXP7"
