#lang rhombus

import:
  rhombus/meta open
  rhombus/scribble/manual
  rhombus/scribble as scribble
  "dispatch_table.rhm" open
  meta_label:
    rhombus open
    rhombus/meta open
  shrubbery/render/private/typeset_meta open

export:
  all_from(rhombus/meta)
  meta_label:
    all_from(rhombus)
    all_from(rhombus/meta)
  all_from("dispatch_table.rhm")
  see_implicit
  provided_note
  provided_interface_only
  provided_interface_and_namespace_only
  provided_interface_and_other_annotation_only
  top_rhombus
  epsilon
  Z
  parens
  brackets
  braces
  s_exp_braces
  quotes
  comma
  colon
  vbar
  more_args
  shrubref
  shrublink
  shrub_doc
  guide_doc
  ref_doc

fun see_implicit(what, whn, context, ~is_infix = #false):
  @scribble.elem{The @what form is implicitly used when @whn is
                 used in @(if is_infix | @scribble.elem{after another @context} | "")
                 in a@(if (context[0] matches (Char"e" || Char"i")) | "n" | "")
                 @context position.
                 See also @scribble.secref("implicit").}

fun provided_note(txt):
  scribble.smaller(txt)

fun provided_interface_only():
  @provided_note{Provided only in the @manual.rhombus(class, ~space) space, not
   the @manual.rhombus(annot, ~space) or @manual.rhombus(namespace, ~space) space.}

fun provided_interface_and_namespace_only():
  @provided_note{Provided only in the @manual.rhombus(class, ~space) space, not
   the @manual.rhombus(annot, ~space) space.}

fun provided_interface_and_other_annotation_only():
  @provided_note{Provided only in the @manual.rhombus(class, ~space) space
   and @manual.rhombus(annot, ~space) space, not
   the @manual.rhombus(namespace, ~space) space.}

// Use `top_rhombus` to avoid a local nonterminal binding,
// such as when referring to `expr.macro` when `expr` is a
// locally bound nonterminal
expr.macro 'top_rhombus($g, ...)':
  'manual.rhombus($(g.replace_scopes('here')), ...)'

def epsilon = "ϵ"

// A hack to typeset alts as an alternative:
meta.bridge Z: Transformer(fun (stx): 'scribble.hspace(1)')

fun open_close(o, c):
  @scribble.elem{@manual.litchar(o)…@manual.litchar(c)}

def parens = @open_close("(", ")")
def brackets = @open_close("[", "]")
def braces = @open_close("{", "}")
def s_exp_braces = @open_close("#{", "}")
def quotes = @open_close("'", "'")
def comma = @manual.litchar(",")
def colon = @manual.litchar(":")
def vbar = @manual.litchar{|}

def more_args = scribble.elem("....")

def shrub_doc = ModulePath 'lib("shrubbery/scribblings/shrubbery.scrbl")'

fun shrubref(tag):
  scribble.secref(~doc: shrub_doc, tag)
fun shrublink(tag, content):
  scribble.seclink(~doc: shrub_doc, tag, content)

def guide_doc = ModulePath'lib("rhombus/scribblings/rhombus.scrbl")'
def ref_doc = ModulePath'lib("rhombus/scribblings/reference/rhombus-reference.scrbl")'
