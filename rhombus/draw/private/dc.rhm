#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "type.rhm" open
  "dc-interface.rhm".DC as DCer
  "dc-interface.rhm"._DC as _DCer
  "dc-interface.rhm".DCForward
  "color.rhm".Color
  "pen.rhm".Pen
  "pen.rhm"!private._Pen
  "brush.rhm".Brush
  "brush.rhm"!private._Brush
  "font.rhm".Font
  "font.rhm"!private._Font
  "region.rhm".Region
  "region.rhm"!private._Region
  "region.rhm"!private.set_wrap_dc
  "path.rhm".Path
  "symbol_map.rhm":
    expose:
      symbol_map_annot
      symbol_set_annot
  "bitmap-interface.rhm".Bitmap

export:
  DC

module internal:
  export:
    SomeDC
    DCer

interface DC:
  export:
    from_handle

  property handle: get_dc()

  private method get_dc():
    (this :: _DCer).dc

  dot '$left . save_and_restore':
    ~head_stx: head
    ~tail: '$tail'
    match tail
    | ': $body':
        values('block:
                  let dc :: DC = $left
                  try:
                    ~initially dc.save()
                    block $tail
                    ~finally dc.restore()',
               '')
    | _:
        syntax_meta.error("expected a block afterward", head)

  property size :: Size:
    def (w, h) = rkt.send get_dc().#{get-size}()
    Size(w, h)

  property width: size.width
  property height: size.height

  method save()
  method restore()

  method clear():
    rkt.send get_dc().clear()

  method font_metrics_key():
    rkt.send get_dc().#{cache-font-metrics-key}()

  property
  | pen :: Pen:
      _Pen(rkt.send get_dc().#{get-pen}())
  | pen := p :: Pen:
      rkt.send get_dc().#{set-pen}(p.handle)

  property
  | brush :: Brush:
      _Brush(rkt.send get_dc().#{get-brush}())
  | brush := b :: Brush:
      rkt.send get_dc().#{set-brush}(b.handle)

  property
  | font :: Font:
      _Font(rkt.send get_dc().#{get-font}())      
  | font := f :: Font:
      rkt.send get_dc().#{set-font}(f.handle)

  property
  | clipping_region :: maybe(Region):
      let r = rkt.send get_dc().#{get-clipping-region}()
      r && _Region(r)()
  | clipping_region := region :: maybe(Region):
      rkt.send get_dc().#{set-clipping-region}(region && Region.handle(region))
    
  method copy(src :: RectLike,
              dest :: PointLike):
    rkt.send get_dc().copy(src.x, src.y, src.width, src.height, dest.x, dest.y)

  method point(pt :: PointLike):
    rkt.send get_dc().#{draw-point}(pt.x, pt.y)

  method line(pt1 :: PointLike,
              pt2 :: PointLike):
    rkt.send get_dc().#{draw-line}(pt1.x, pt1.y, pt2.x, pt2.y)
    
  method lines([pt :: PointLike, ...],
               ~dpt: dpt :: PointLike = Point.zero,
               ~dx: dx :: Real = 0.0,
               ~dy: dy :: Real = 0.0):
    rkt.send get_dc().#{draw-lines}([Pair(pt.x, pt.y), ...], dpt.x + dx, dpt.y + dy)

  method polygon([pt :: PointLike, ...],
                 ~dpt: dpt :: PointLike = Point.zero,
                 ~dx: dx :: Real = 0.0,
                 ~dy: dy :: Real = 0.0,
                 ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send get_dc().#{draw-polygon}([Pair(pt.x, pt.y), ...], dpt.x + dx, dpt.y + dy,
                                      fill_convert(fill))

  method path(p :: Path,
              ~dpt: dpt :: PointLike = Point.zero,
              ~dx: dx :: Real = 0.0,
              ~dy: dy :: Real = 0.0,
              ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send get_dc().#{draw-path}(p.hand, dpt.x + dx, dpt.y + dy, fill_convert(fill))

  method rectangle(r :: RectLike):
    rkt.send get_dc().#{draw-rectangle}(r.x, r.y, r.width, r.height)
    
  method rounded_rectangle(r :: RectLike,
                           radius :: Real = -0.25):
    rkt.send get_dc().#{draw-rounded-rectangle}(r.x, r.y, r.width, r.height, radius)
    
  method ellipse(r :: RectLike):
    rkt.send get_dc().#{draw-ellipse}(r.x, r.y, r.width, r.height)
    
  method arc(r :: RectLike,
             start :: Real, end :: Real):
    rkt.send get_dc().#{draw-arc}(r.x, r.y, r.width, r.height, start, end)

  method spline(pt1 :: PointLike,
                pt2 :: PointLike,
                pt3 :: PointLike):
    rkt.send get_dc().#{draw-spline}(pt1.x, pt1.y, pt2.x, pt2.y, pt3.x, pt3.y)

  method bitmap(b :: Bitmap,
                ~dpt: dpt :: PointLike = Point.zero,
                ~dx: dx :: Real = 0,
                ~dy: dy :: Real = 0,
                ~source: source :: RectLike = Rect(Point.zero, b.size),
                ~style: style :: DC.BitmapOverlay = #'solid,
                ~color: color :: Color = Color("black"),
                ~mask: mask :: maybe(Bitmap) = #false):
    rkt.send get_dc().#{draw-bitmap-section}(b.handle, dpt.x + dx, dpt.y + dy,
                                             source.x, source.y,
                                             source.width, source.height,
                                             style, color.handle, mask)
    #void

  method text(str :: String,
              ~dpt: dpt :: Point = Point.zero,
              ~dx: dx :: Real = 0,
              ~dy: dy :: Real = 0,
              ~combine: combine :: DC.TextCombine = #'kern,
              ~angle: angle :: Real = 0.0):
    rkt.send get_dc().#{draw-text}(str, dpt.x + dx, dpt.y + dy,
                                   match combine
                                   | #'kern: #true
                                   | #'grapheme: #'grapheme
                                   | ~else: #false,
                                   0,
                                   angle)

  method | scale(sx :: Real, sy :: Real):
             rkt.send get_dc().#{scale}(sx, sy)
         | scale(s :: Real):
             rkt.send get_dc().#{scale}(s, s)
  method | translate(dx :: Real, dy :: Real):
             rkt.send get_dc().#{translate}(dx, dy)
         | translate(dpt :: PointLike):
             rkt.send get_dc().#{translate}(dpt.x, dpt.y)
  method rotate(radians :: Real):
    rkt.send get_dc().#{rotate}(radians)
  method transform(a :: Transformation):
    rkt.send get_dc().#{transform}(a)

  property | transformation :: Transformation:
               let Array(a, x, y, sx, sy, rot) =  rkt.send get_dc().#{get-transformation}()
               a
           | transformation := a :: Transformation:
               let Array(old_a, x, y, sx, sy, rot) =  rkt.send get_dc().#{get-transformation}()
               rkt.send get_dc().#{set-transformation}(Array(a, x, y, sx, sy, rot))

  export:
    BitmapOverlay
    TextCombine
    Fill
    Transformation

  symbol_set_annot BitmapOverlay:
    { solid, opaque, xor }

  symbol_set_annot TextCombine:
    { kern, grapheme, char }

  symbol_map_annot Fill fill_convert:
    { odd_even: #{odd-even},
      winding: winding }

  annot.macro 'Transformation':
    'matching(Array(_ :: Real, _ :: Real,
                    _ :: Real, _ :: Real,
                    _ :: Real, _ :: Real))'

fun from_handle(handle) :: DC:
  unless handle rkt.is_a rkt.#{dc<%>}
  | error("DC.from_handle", "not a DC handle: " +& handle)
  SomeDC(handle)

namespace main:
  export: DC

namespace some_dc:
  export:
    rename: DC as SomeDC

  // defined as `DC` for default printer, then exported as `SomeDC`
  class DC(private hand):
    nonfinal
    opaque
    implements main.DC
    internal _DC
    private implements DCer
    private override property dc: hand

    constructor (handle):
      _DC(handle)

    private field states = []

    override method save():
      states := [pen,
                 brush,
                 font,
                 clipping_region,
                 transformation,
                 states]
    
    override method restore():
      match states
      | []:
          error("DC.pop", "no state saved")
      | [old_pen,
         old_brush,
         old_font,
         old_region,
         old_transformation,
         old_states]:
          pen := old_pen
          brush := old_brush
          font := old_font
          clipping_region := old_region
          transformation := old_transformation
          states := old_states

  set_wrap_dc(DC)

import: .some_dc.SomeDC

annot.delayed_complete DCForward: DC
