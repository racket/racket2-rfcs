#lang rhombus/private/core
import:
  "core-meta.rkt" open
  "call-capture-exn.rkt" open
  lib("racket/syntax-srcloc.rkt") as srcloc
  lib("racket/base.rkt").#{error-print-source-location}
  lib("rackunit/log.rkt").#{test-log!}
  lib("racket/base.rkt")

export:
 check

meta:
  syntax_class ResultMode:
    kind: ~term
  | '~is'
  | '~is_now'
  | '~is_a'
  | '~prints_like'
  | '~prints'
  | '~raises'
  | '~matches'
      
  syntax_class Result:
    kind: ~sequence
  | '$(mode :: ResultMode): $body':
      field [suffix, ...]: []
  | '$(mode :: ResultMode) $g ...':
      field body: '$g ...'
      field [suffix, ...]: []
  | '~completes':
      field mode: '~completes'
      field body: '#void'
      field [suffix, ...]: ['#void']

  syntax_class EvalClause:
    fields: make_eval
  | '~eval':
      field make_eval = 'Evaluator.make_rhombus()'
  | '~eval: $(block :: Block)':
      field make_eval = 'block $block'

expr.macro '«located '$w'»':
  '[#' $w, $(w.srcloc())]'

expr.macro
// `~eval` case
| 'check:
     $(eval :: EvalClause)
     $result1
     ...
     $(result2 :: Result)':
    ~op_stx: check_id
    'check_same(located '$(check_id)',
                fun():
                  eval_test(Syntax.literal '$result1
                                            ...
                                            $result2.suffix
                                            ...',
                            $eval.make_eval),
                fun(): $result2.body,
                located '$result2.mode')'
// normal block
| 'check:
     $result1
     ...
     $(result2 :: Result)':
    ~op_stx: check_id
    'check_same(located'$(check_id)',
                fun ():
                  $result1
                  ...
                  $result2.suffix
                  ...,
                matcher($result2.mode, : $result2.body),
                #'$result2.mode)'
// single lines in block
| 'check: $result1 ... $(result2 :: Result); ...':
    ~op_stx: check_id
    'block:
       check_same(located'$(check_id)',
                  fun (): $result1 ...; $result2.suffix; ...,
                  matcher($result2.mode, : $result2.body),
                  located'$result2.mode')
       ...'
// single line
| 'check $result1 ... $(result2 :: Result)':
    ~op_stx: check_id
    'check_same(located'$(check_id)',
                fun (): $result1 ...; $result2.suffix; ...,
                matcher($result2.mode, : $result2.body),
                #'$result2.mode)'

expr.macro
| 'matcher(~matches, : $binding)':
    'fun | (): (fun | ($binding): #true | (&_): #false)
         | (x): $("" +& '$binding')'
| 'matcher(~is_a, : $ann)':
    'fun | (): (fun (x): x is_a ($ann))
         | (x): $("" +& '$ann')'
| 'matcher($_, : $body)': 'fun (): $body'

fun check_same(loc_where, thunk, expected_thunk, maybe_loc_mode):
  def [mode, srcloc]:
    match maybe_loc_mode
    | [mode, srcloc]: maybe_loc_mode
    | mode: [mode, loc_where[1]]
  def values(got, exn_msg, output) = call_capturing_exn(thunk, mode == #'~prints)
  def expected = call_capturing_values(expected_thunk)
  def ok:
    match mode
    | #'~prints:
        !exn_msg && (output == expected[0])
    | #'~prints_like:
        !exn_msg && (to_string(got) == to_string(expected))
    | #'~is:
        !exn_msg && (got == expected)
    | #'~is_now:
        !exn_msg && (got is_now expected)
    | #'~raises:
        exn_msg && does_contain_each(expected, exn_msg)
    | #'~completes:
        !exn_msg
    | #'~is_a:
        !exn_msg && got.length() == 1 && expected[0](got[0])
    | #'~matches:
        !exn_msg && expected[0](&got)
  #{test-log!}(ok)
  if ok
  | #void
  | fun
    | values_str([v]): to_string(v, ~mode: #'expr)
    | values_str(lst): "values " +& to_string(lst, ~mode: #'expr)
    def msg:
      (if #{error-print-source-location}()
       | (if srcloc | srcloc.source +& ":" +& srcloc.line | "???")
       | loc_where[0])
        +& ": failed\n"
        +& "  got: "
        // magic number is length of "  got: exception "
        +& (exn_msg && ("exception " +& reindent_exn_msg(exn_msg, 17))
              || output && to_string(output, ~mode: #'expr)
              || values_str(got))
        +&  "\n"
        +& "  expected: " +& (match mode
                              | #'~completes: "completion"
                              | #'~raises: "exception " +& values_str(expected)
                              | #'~matches: "matching " +& expected_thunk(#false)
                              | #'~is_a: "satisfying " +& expected_thunk(#false)
                              | #'~prints: "output " +& values_str(expected)
                              | ~else: values_str(expected))
    display_as_exn(msg, srcloc)

fun eval_test(stx, evalor):
  parameterize { Evaluator.current: evalor }:
    eval(Syntax.strip_scopes(stx), ~as_interaction: #true)
